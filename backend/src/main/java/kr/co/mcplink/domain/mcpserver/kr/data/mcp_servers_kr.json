[{
  "_id": {
    "$oid": "68288b7b768b34f5be82865c"
  },
  "seq": 1,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/aws-kb-retrieval-server",
  "stars": 46345,
  "views": 32,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "aws kb retrieval",
    "aws",
    "kb",
    "retrieval"
  ],
  "mcpServers": {
    "name": "aws-kb-retrieval",
    "description": "Query and retrieve information from AWS knowledge bases using the Bedrock Agent Runtime.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-aws-kb-retrieval"
    ],
    "env": {
      "AWS_ACCESS_KEY_ID": "YOUR_ACCESS_KEY_HERE",
      "AWS_SECRET_ACCESS_KEY": "YOUR_SECRET_ACCESS_KEY_HERE",
      "AWS_REGION": "YOUR_AWS_REGION_HERE"
    }
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2025-05-17T22:02:09.107Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be82865d"
  },
  "seq": 2,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "brave search",
    "brave",
    "search"
  ],
  "mcpServers": {
    "name": "brave-search",
    "description": "Retrieve web pages, news, and local business results via Brave API.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-brave-search"
    ],
    "env": {
      "BRAVE_API_KEY": "YOUR_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be82865e"
  },
  "seq": 3,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/everart",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "everart"
  ],
  "mcpServers": {
    "name": "everart",
    "description": "Integrates with EverArt API to generate images from text prompts using multiple AI models for creative and visual design tasks.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-everart"
    ],
    "env": {
      "EVERART_API_KEY": "your_key_here"
    }
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be82865f"
  },
  "seq": 4,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/everything",
  "stars": 46345,
  "views": 1,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "everything"
  ],
  "mcpServers": {
    "name": "everything",
    "description": "Test protocol features and tools for client compatibility.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-everything"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:53:16.329Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be828660"
  },
  "seq": 5,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/fetch",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "fetch"
  ],
  "mcpServers": {
    "name": "fetch",
    "description": "Retrieve and convert web content to markdown for analysis.",
    "command": "uvx",
    "args": [
      "mcp-server-fetch"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be828661"
  },
  "seq": 6,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "filesystem"
  ],
  "mcpServers": {
    "name": "filesystem",
    "description": "Provides a secure interface for interacting with local filesystems, enabling file reading, writing, updating, and directory management with robust path resolution and security measures.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-filesystem",
      "/Users/username/Desktop",
      "/path/to/other/allowed/dir"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be828662"
  },
  "seq": 7,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/git",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "git"
  ],
  "mcpServers": {
    "name": "git",
    "description": "Interact with local Git repositories for version control tasks.",
    "command": "uvx",
    "args": [
      "mcp-server-git",
      "--repository",
      "path/to/git/repo"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be828663"
  },
  "seq": 8,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/github",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "github"
  ],
  "mcpServers": {
    "name": "github",
    "description": "Manage repositories, issues, and search code via GitHub API.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-github"
    ],
    "env": {
      "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be828664"
  },
  "seq": 9,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "gitlab"
  ],
  "mcpServers": {
    "name": "gitlab",
    "description": "Control repositories, merge requests, and issues via GitLab API.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-gitlab"
    ],
    "env": {
      "GITLAB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>",
      "GITLAB_API_URL": "https://gitlab.com/api/v4 // Optional, for self-hosted instances"
    }
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be828665"
  },
  "seq": 10,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/gdrive",
  "stars": 46345,
  "views": 1,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "google drive",
    "google",
    "drive"
  ],
  "mcpServers": {
    "name": "gdrive",
    "description": "Search and access Google Drive files and folders via read-only API.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-gdrive"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:35:13.380Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be828666"
  },
  "seq": 11,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "google map",
    "google",
    "map"
  ],
  "mcpServers": {
    "name": "google-maps",
    "description": "Access location data, geocoding, and place details through Maps API.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-google-maps"
    ],
    "env": {
      "GOOGLE_MAPS_API_KEY": "<YOUR_API_KEY>"
    }
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be828667"
  },
  "seq": 12,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/memory",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "memory"
  ],
  "mcpServers": {
    "name": "memory",
    "description": "Build and query persistent semantic networks for data management.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-memory"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be828668"
  },
  "seq": 13,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "postgres"
  ],
  "mcpServers": {
    "name": "postgres",
    "description": "Access and analyze Postgres databases with read-only queries.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-postgres",
      "postgresql://localhost/mydb"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be828669"
  },
  "seq": 14,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "puppeteer"
  ],
  "mcpServers": {
    "name": "puppeteer",
    "description": "Navigate websites, fill forms, and capture screenshots programmatically.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-puppeteer"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be82866a"
  },
  "seq": 15,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/redis",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "redis"
  ],
  "mcpServers": {
    "name": "redis",
    "description": "Integrates with Redis databases to enable fast, in-memory key-value operations for caching, session management, and real-time data processing.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-redis",
      "redis://localhost:6379"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be82866b"
  },
  "seq": 16,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/sentry",
  "stars": 46345,
  "views": 9,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "sentry"
  ],
  "mcpServers": {
    "name": "sentry",
    "description": "Retrieve and analyze application error reports for debugging support.",
    "command": "uvx",
    "args": [
      "mcp-server-sentry",
      "--auth-token",
      "YOUR_SENTRY_TOKEN"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:57:28.358Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be82866c"
  },
  "seq": 17,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "sequential thinking",
    "sequential",
    "thinking"
  ],
  "mcpServers": {
    "name": "sequential-thinking",
    "description": "Implements a structured sequential thinking process for breaking down complex problems, iteratively refining solutions, and exploring multiple reasoning paths.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-sequential-thinking"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be82866d"
  },
  "seq": 18,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/slack",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "slack"
  ],
  "mcpServers": {
    "name": "slack",
    "description": "Send messages, manage channels, and access workspace history.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-slack"
    ],
    "env": {
      "SLACK_BOT_TOKEN": "xoxb-your-bot-token",
      "SLACK_TEAM_ID": "T01234567",
      "SLACK_CHANNEL_IDS": "C01234567, C76543210"
    }
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be82866e"
  },
  "seq": 19,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "sqlite"
  ],
  "mcpServers": {
    "name": "sqlite",
    "description": "Query and analyze SQLite databases directly.",
    "command": "uv",
    "args": [
      "--directory",
      "parent_of_servers_repo/servers/src/sqlite",
      "run",
      "mcp-server-sqlite",
      "--db-path",
      "~/test.db"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68288b7b768b34f5be82866f"
  },
  "seq": 20,
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/time",
  "stars": 46345,
  "views": 0,
  "official": true,
  "scanned": true,
  "securityRank": "MODERATE",
  "tags": [
    "time"
  ],
  "mcpServers": {
    "name": "time",
    "description": "MCP server providing time and timezone conversion tools for AI assistants to handle localized time data and calculations.",
    "command": "uvx",
    "args": [
      "mcp-server-time"
    ]
  },
  "created_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  },
  "updated_at": {
    "$date": "2000-01-01T00:00:00.000Z"
  }
},
{
  "_id": {
    "$oid": "68289646a6f8dc721ceb402e"
  },
  "seq": {
    "$numberLong": "21"
  },
  "type": "STDIO",
  "url": "https://github.com/GLips/Figma-Context-MCP",
  "stars": 6837,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "Framelink Figma MCP",
    "description": "The Framelink Figma MCP server enables AI coding tools like Cursor to access Figma design data via the Model Context Protocol, translating and simplifying Figma API responses to provide relevant layout and styling information, thereby improving code generation accuracy.",
    "command": "npx",
    "args": [
      "-y",
      "figma-developer-mcp",
      "--figma-api-key=YOUR-KEY",
      "--stdio"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:34.142Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:45:34.308Z"
  },
  "tags": [
    "framelink figma",
    "framelink",
    "figma"
  ]
},
{
  "_id": {
    "$oid": "68289646a6f8dc721ceb4030"
  },
  "seq": {
    "$numberLong": "22"
  },
  "type": "STDIO",
  "url": "https://github.com/executeautomation/mcp-playwright",
  "stars": 3533,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "playwright",
    "description": "This Playwright MCP server enables Large Language Models to automate web browsers through the Model Context Protocol; it provides capabilities like taking screenshots, generating test code, scraping web content, and executing JavaScript within a real browser environment using Playwright.",
    "command": "npx",
    "args": [
      "-y",
      "@executeautomation/playwright-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:34.824Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:45:36.077Z"
  },
  "tags": [
    "playwright"
  ]
},
{
  "_id": {
    "$oid": "68289647a6f8dc721ceb4032"
  },
  "seq": {
    "$numberLong": "23"
  },
  "type": "STDIO",
  "url": "https://github.com/modelcontextprotocol/inspector",
  "stars": 3086,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "everything",
    "description": "The MCP Inspector provides a UI and CLI tool for testing and debugging Model Context Protocol (MCP) servers, supporting STDIO and SSE transports, bearer token authentication, and configuration via UI, files, and query parameters; it uses a proxy server to communicate with local MCP processes and allows exporting server configurations for integration with clients like Cursor and Claude Code.",
    "command": "npx",
    "args": [
      "@modelcontextprotocol/server-everything"
    ],
    "env": {
      "hello": "Hello MCP!"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:35.856Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:45:37.990Z"
  },
  "tags": [
    "everything"
  ]
},
{
  "_id": {
    "$oid": "68289648a6f8dc721ceb4034"
  },
  "seq": {
    "$numberLong": "24"
  },
  "type": "STDIO",
  "url": "https://github.com/makenotion/notion-mcp-server",
  "stars": 1744,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "notionApi",
    "description": "This server implements the Model Context Protocol (MCP) to enable interactions with the Notion API, allowing users to control Notion pages and databases via natural language commands; it integrates using Notion's API with authorization via bearer tokens and supports installation via npm or Docker.",
    "command": "npx",
    "args": [
      "-y",
      "@notionhq/notion-mcp-server"
    ],
    "env": {
      "OPENAPI_MCP_HEADERS": "{\"Authorization\": \"Bearer ntn_****\", \"Notion-Version\": \"2022-06-28\" }"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:36.551Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:45:40.047Z"
  },
  "tags": [
    "notion",
    "api",
    "notion api"
  ]
},
{
  "_id": {
    "$oid": "68289649a6f8dc721ceb4036"
  },
  "seq": {
    "$numberLong": "25"
  },
  "type": "STDIO",
  "url": "https://github.com/exa-labs/exa-mcp-server",
  "stars": 1583,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "exa",
    "description": "The Exa MCP server acts as a Model Context Protocol endpoint, enabling AI assistants like Claude to perform real-time web searches and other research tasks via the Exa AI Search API, utilizing protocols to provide information in a controlled environment and integrating with Claude Desktop through its configuration files.",
    "command": "npx",
    "args": [
      "/path/to/exa-mcp-server/build/index.js"
    ],
    "env": {
      "EXA_API_KEY": "your-api-key-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:37.580Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:45:41.699Z"
  },
  "tags": [
    "exa"
  ]
},
{
  "_id": {
    "$oid": "6828964aa6f8dc721ceb4038"
  },
  "seq": {
    "$numberLong": "26"
  },
  "type": "STDIO",
  "url": "https://github.com/punkpeye/fastmcp",
  "stars": 1577,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "my-mcp-server",
    "description": "FastMCP is a TypeScript framework for building Model Context Protocol (MCP) servers that expose tools, resources, and prompts to clients, enabling interactions with LLMs and other applications via typed server events; it supports authentication, sessions, SSE, HTTP streaming, and utilizes standard schema validation libraries like Zod for defining tool parameters, while also offering configurable ping behavior and roots management.",
    "command": "npx",
    "args": [
      "tsx",
      "/PATH/TO/YOUR_PROJECT/src/index.ts"
    ],
    "env": {
      "YOUR_ENV_VAR": "value"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:38.189Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:46:37.013Z"
  },
  "tags": [
    "my",
    "my mcp server"
  ]
},
{
  "_id": {
    "$oid": "6828964aa6f8dc721ceb403a"
  },
  "seq": {
    "$numberLong": "27"
  },
  "type": "STDIO",
  "url": "https://github.com/supercorp-ai/supergateway",
  "stars": 1268,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "supermachineExampleNpx",
    "description": "Supergateway exposes MCP (Model Context Protocol) stdio-based servers over SSE (Server-Sent Events) or WebSockets, enabling remote access and simplifying integration with clients; it supports features like header injection, CORS, health endpoints and also works well with Supermachine, Claude Desktop, and Cursor.",
    "command": "npx",
    "args": [
      "-y",
      "supergateway",
      "--sse",
      "https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:38.852Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:46:38.950Z"
  },
  "tags": [
    "supermachine example npx",
    "supermachine",
    "example",
    "npx"
  ]
},
{
  "_id": {
    "$oid": "6828964ca6f8dc721ceb403c"
  },
  "seq": {
    "$numberLong": "28"
  },
  "type": "STDIO",
  "url": "https://github.com/suekou/mcp-notion-server",
  "stars": 702,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "notion",
    "description": "The Notion MCP Server enables Large Language Models to interact with Notion workspaces through the Notion API, utilizing Markdown conversion to reduce context size and token consumption; it supports various operations on pages, databases, blocks, users and comments, and can optionally format responses in JSON or Markdown.",
    "command": "npx",
    "args": [
      "-y",
      "@suekou/mcp-notion-server"
    ],
    "env": {
      "NOTION_API_TOKEN": "your-integration-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:40.557Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:46:40.552Z"
  },
  "tags": [
    "notion"
  ]
},
{
  "_id": {
    "$oid": "6828964da6f8dc721ceb403e"
  },
  "seq": {
    "$numberLong": "29"
  },
  "type": "STDIO",
  "url": "https://github.com/jae-jae/fetcher-mcp",
  "stars": 680,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "fetcher",
    "description": "Fetcher MCP serves as a modern MCP server that retrieves web page content by utilizing Playwright to execute JavaScript, supporting dynamic content and modern web applications; it features intelligent content extraction with a Readability algorithm, offers HTML and Markdown output formats, and integrates via streamable HTTP and SSE protocols.",
    "command": "npx",
    "args": [
      "-y",
      "fetcher-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:41.279Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:46:42.249Z"
  },
  "tags": [
    "fetcher"
  ]
},
{
  "_id": {
    "$oid": "6828964ea6f8dc721ceb4040"
  },
  "seq": {
    "$numberLong": "30"
  },
  "type": "STDIO",
  "url": "https://github.com/Flux159/mcp-server-kubernetes",
  "stars": 612,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "kubernetes",
    "description": "This MCP server implementation connects to a Kubernetes cluster using kubectl and Helm, enabling management and introspection of Kubernetes resources via the Kubernetes API; it communicates via STDIO, and supports features like pod/service management, ConfigMap manipulation, log retrieval, and Helm chart operations.",
    "command": "npx",
    "args": [
      "mcp-server-kubernetes"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:42.205Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:46:43.858Z"
  },
  "tags": [
    "kubernetes"
  ]
},
{
  "_id": {
    "$oid": "6828964ea6f8dc721ceb4042"
  },
  "seq": {
    "$numberLong": "31"
  },
  "type": "STDIO",
  "url": "https://github.com/iFurySt/RedNote-MCP",
  "stars": 470,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "RedNote MCP",
    "description": "RedNote MCP provides access to content on Xiaohongshu (Little Red Book) via keyword searches and URLs using Playwright, and it persists authentication via cookies; the server integrates with tools like Cursor via standard input/output (stdio) using the Model Context Protocol.",
    "command": "npx",
    "args": [
      "rednote-mcp",
      "--stdio"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:42.815Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:47:38.491Z"
  },
  "tags": [
    "rednote",
    "red note",
    "note",
    "red"
  ]
},
{
  "_id": {
    "$oid": "6828964fa6f8dc721ceb4044"
  },
  "seq": {
    "$numberLong": "32"
  },
  "type": "STDIO",
  "url": "https://github.com/bytebase/dbhub",
  "stars": 465,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "dbhub-postgres-npx",
    "description": "DBHub acts as a universal database gateway, implementing the Model Context Protocol (MCP) server interface to allow MCP-compatible clients to connect to various databases like PostgreSQL, MySQL, SQL Server, SQLite, MariaDB, and Oracle using connection strings (DSN) and communicate via stdio or SSE transports; it also provides SQL execution and schema exploration capabilities.",
    "command": "npx",
    "args": [
      "-y",
      "@bytebase/dbhub",
      "--transport",
      "stdio",
      "--dsn",
      "postgres://user:password@localhost:5432/dbname?sslmode=disable"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:43.774Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:47:40.894Z"
  },
  "tags": [
    "dbhub postgres npx",
    "dbhub",
    "postgres",
    "npx",
    "db hub",
    "hub"
  ]
},
{
  "_id": {
    "$oid": "68289650a6f8dc721ceb4046"
  },
  "seq": {
    "$numberLong": "33"
  },
  "type": "STDIO",
  "url": "https://github.com/regenrek/deepwiki-mcp",
  "stars": 458,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-deepwiki",
    "description": "This MCP server implementation fetches content from deepwiki.com URLs via MCP requests, sanitizes and converts the HTML to Markdown, and returns either a single aggregated document or structured pages using JSON; it offers configurable crawling depth and concurrency, and integrates with MCP-compatible clients using the `deepwiki_fetch` action.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-deepwiki@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:44.406Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:47:42.875Z"
  },
  "tags": [
    "deepwiki",
    "deep wiki",
    "deep",
    "wiki"
  ]
},
{
  "_id": {
    "$oid": "68289651a6f8dc721ceb4048"
  },
  "seq": {
    "$numberLong": "34"
  },
  "type": "STDIO",
  "url": "https://github.com/benborla/mcp-server-mysql",
  "stars": 377,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp_server_mysql",
    "description": "This MCP server, implemented in NodeJS, connects to MySQL databases and allows LLMs to inspect schemas and execute SQL queries, supporting integrations with tools like Claude Desktop, Cursor, and Smithery through the Model Context Protocol. It uses environment variables for configuration, allowing control over database connections, security, and write operation permissions like INSERT, UPDATE, and DELETE.",
    "command": "npx",
    "args": [
      "-y",
      "@benborla29/mcp-server-mysql"
    ],
    "env": {
      "PATH": "/Users/atlasborla/Library/Application Support/Herd/config/nvm/versions/node/v22.9.0/bin:/usr/bin:/bin",
      "MYSQL_PORT": "3306",
      "MYSQL_PASS": "your_password",
      "MYSQL_USER": "root",
      "MYSQL_DB": "your_database",
      "ALLOW_INSERT_OPERATION": "false",
      "MYSQL_HOST": "127.0.0.1",
      "ALLOW_UPDATE_OPERATION": "false",
      "ALLOW_DELETE_OPERATION": "false",
      "NODE_PATH": "/Users/atlasborla/Library/Application Support/Herd/config/nvm/versions/node/v22.9.0/lib/node_modules"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:45.060Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:47:45.061Z"
  },
  "tags": [
    "mysql"
  ]
},
{
  "_id": {
    "$oid": "68289651a6f8dc721ceb404a"
  },
  "seq": {
    "$numberLong": "35"
  },
  "type": "STDIO",
  "url": "https://github.com/ferrislucas/iterm-mcp",
  "stars": 324,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "iterm-mcp",
    "description": "This MCP server implementation provides access to iTerm sessions via the Model Context Protocol, enabling models to execute commands using `write_to_terminal`, read output with `read_terminal_output`, and send control characters, thereby integrating iTerm functionality into applications like Claude Desktop.",
    "command": "npx",
    "args": [
      "-y",
      "iterm-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:45.992Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:47:46.655Z"
  },
  "tags": [
    "iterm",
    "iterm mcp"
  ]
},
{
  "_id": {
    "$oid": "68289652a6f8dc721ceb404c"
  },
  "seq": {
    "$numberLong": "36"
  },
  "type": "STDIO",
  "url": "https://github.com/StevenStavrakis/obsidian-mcp",
  "stars": 318,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "obsidian",
    "description": "The Obsidian MCP server enables AI assistants, such as Claude, to interact with Obsidian vaults using the Model Context Protocol (MCP) via Node.js, offering tools to read, create, edit, move, and delete notes, as well as manage tags and search vault contents.",
    "command": "npx",
    "args": [
      "-y",
      "obsidian-mcp",
      "/path/to/your/vault",
      "/path/to/your/vault2"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:46.607Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:48:40.292Z"
  },
  "tags": [
    "obsidian"
  ]
},
{
  "_id": {
    "$oid": "68289654a6f8dc721ceb404e"
  },
  "seq": {
    "$numberLong": "37"
  },
  "type": "STDIO",
  "url": "https://github.com/hyperbrowserai/mcp",
  "stars": 264,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "hyperbrowser",
    "description": "The Hyperbrowser MCP Server implements the Model Context Protocol to enable web scraping, data extraction, and web crawling, utilizing tools such as Bing search and agents like OpenAI's CUA and Anthropic's Claude Computer Use for browser automation, accessible via npx.",
    "command": "npx",
    "args": [
      "-y",
      "hyperbrowser-mcp"
    ],
    "env": {
      "HYPERBROWSER_API_KEY": "YOUR-API-KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:48.150Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:48:42.687Z"
  },
  "tags": [
    "hyperbrowser",
    "hyper",
    "browser"
  ]
},
{
  "_id": {
    "$oid": "68289655a6f8dc721ceb4050"
  },
  "seq": {
    "$numberLong": "38"
  },
  "type": "STDIO",
  "url": "https://github.com/graphlit/graphlit-mcp-server",
  "stars": 257,
  "views": 1,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "graphlit-mcp-server",
    "description": "The Graphlit MCP Server implements the Model Context Protocol, enabling integration between MCP clients and the Graphlit platform for knowledge retrieval and augmentation; it ingests data from sources like Slack, Discord, websites, and file systems, performs web crawling and search, and provides tools for retrieval, RAG, extraction, and publishing, utilizing technologies such as ElevenLabs Audio and OpenAI Image Generation.",
    "command": "npx",
    "args": [
      "-y",
      "graphlit-mcp-server"
    ],
    "env": {
      "GRAPHLIT_ENVIRONMENT_ID": "your-environment-id",
      "LINEAR_API_KEY": "your-linear-api-key",
      "DISCORD_BOT_TOKEN": "your-discord-bot-token",
      "GITHUB_PERSONAL_ACCESS_TOKEN": "your-github-pat",
      "JIRA_EMAIL": "your-jira-email",
      "GOOGLE_EMAIL_REFRESH_TOKEN": "your-google-refresh-token",
      "NOTION_API_KEY": "your-notion-api-key",
      "GOOGLE_EMAIL_CLIENT_SECRET": "your-google-client-secret",
      "GOOGLE_EMAIL_CLIENT_ID": "your-google-client-id",
      "GRAPHLIT_JWT_SECRET": "your-jwt-secret",
      "JIRA_TOKEN": "your-jira-token",
      "GRAPHLIT_ORGANIZATION_ID": "your-organization-id",
      "TWITTER_TOKEN": "your-twitter-token",
      "SLACK_BOT_TOKEN": "your-slack-bot-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:49.125Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:42:15.076Z"
  },
  "tags": [
    "graphlit",
    "graph lit",
    "graph",
    "lit"
  ]
},
{
  "_id": {
    "$oid": "68289655a6f8dc721ceb4052"
  },
  "seq": {
    "$numberLong": "39"
  },
  "type": "STDIO",
  "url": "https://github.com/mcpdotdirect/evm-mcp-server",
  "stars": 243,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "evm-mcp-server",
    "description": "The EVM MCP server enables AI agents to interact with over 30 EVM-compatible blockchains using the Model Context Protocol and exposes blockchain services via a unified interface of MCP tools and resources; it supports ENS name resolution and leverages technologies like TypeScript and Viem to provide services such as reading blockchain state, interacting with smart contracts, and transferring tokens across chains like Ethereum, Optimism, and Polygon.",
    "command": "npx",
    "args": [
      "-y",
      "@mcpdotdirect/evm-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:49.871Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:48:46.892Z"
  },
  "tags": [
    "evm",
    "evm"
  ]
},
{
  "_id": {
    "$oid": "68289656a6f8dc721ceb4054"
  },
  "seq": {
    "$numberLong": "40"
  },
  "type": "STDIO",
  "url": "https://github.com/neondatabase-labs/mcp-server-neon",
  "stars": 237,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "Neon",
    "description": "The Neon MCP Server enables natural language interaction with Neon Postgres databases via the Model Context Protocol (MCP), translating user requests into Neon API calls to manage projects, branches, run SQL queries, and perform database migrations; it integrates with MCP clients like Claude Desktop and supports local or remote hosted server setup with OAuth or API key authentication.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-remote",
      "https://mcp.neon.tech/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:50.548Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:48:48.657Z"
  },
  "tags": [
    "neon"
  ]
},
{
  "_id": {
    "$oid": "68289657a6f8dc721ceb4056"
  },
  "seq": {
    "$numberLong": "41"
  },
  "type": "STDIO",
  "url": "https://github.com/base/base-mcp",
  "stars": 226,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "base-mcp",
    "description": "The Base MCP server provides onchain tools for AI applications, enabling interaction with the Base Network and Coinbase API via AgentKit; it supports actions such as wallet management, fund transfers, smart contract deployment, interaction with Morpho vaults, onramping funds with Coinbase, ERC20/NFT management, buying OpenRouter credits with USDC, and resolving Farcaster usernames.",
    "command": "npx",
    "args": [
      "-y",
      "base-mcp@latest"
    ],
    "env": {
      "COINBASE_API_PRIVATE_KEY": "your_private_key",
      "ALCHEMY_API_KEY": "your_alchemy_api_key",
      "COINBASE_API_KEY_NAME": "your_api_key_name",
      "SEED_PHRASE": "your seed phrase here",
      "COINBASE_PROJECT_ID": "your_project_id",
      "CHAIN_ID": "optional_for_base_sepolia_testnet",
      "OPENROUTER_API_KEY": "your_openrouter_api_key",
      "PINATA_JWT": "your_pinata_jwt"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:51.212Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:49:51.443Z"
  },
  "tags": [
    "base"
  ]
},
{
  "_id": {
    "$oid": "68289658a6f8dc721ceb4058"
  },
  "seq": {
    "$numberLong": "42"
  },
  "type": "STDIO",
  "url": "https://github.com/kiliczsh/mcp-mongo-server",
  "stars": 206,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mongodb-env",
    "description": "The MCP MongoDB Server enables Large Language Models to interact with MongoDB databases by exposing a standardized interface for executing queries, aggregations, updates, insertions, and index creation, utilizing the Model Context Protocol and offering configurable ObjectId handling, environment variable configuration, and read-only modes for secure database access.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-mongo-server"
    ],
    "env": {
      "MCP_MONGODB_READONLY": "true",
      "MCP_MONGODB_URI": "mongodb://muhammed:kilic@localhost:27017/database"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:52.468Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:49:53.403Z"
  },
  "tags": [
    "mongodb env",
    "mongodb",
    "env"
  ]
},
{
  "_id": {
    "$oid": "68289659a6f8dc721ceb405a"
  },
  "seq": {
    "$numberLong": "43"
  },
  "type": "STDIO",
  "url": "https://github.com/EnesCinr/twitter-mcp",
  "stars": 196,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "twitter-mcp",
    "description": "This MCP server implements a Twitter integration, allowing clients to post tweets and search Twitter using the Twitter API. It communicates with the client through a defined MCP protocol and is configured using environment variables for API keys and access tokens.",
    "command": "npx",
    "args": [
      "-y",
      "@enescinar/twitter-mcp"
    ],
    "env": {
      "API_KEY": "your_api_key_here",
      "ACCESS_TOKEN": "your_access_token_here",
      "API_SECRET_KEY": "your_api_secret_key_here",
      "ACCESS_TOKEN_SECRET": "your_access_token_secret_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:53.408Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:49:54.862Z"
  },
  "tags": [
    "twitter",
    "twitter"
  ]
},
{
  "_id": {
    "$oid": "6828965aa6f8dc721ceb405c"
  },
  "seq": {
    "$numberLong": "44"
  },
  "type": "STDIO",
  "url": "https://github.com/EvalsOne/MCP-connect",
  "stars": 183,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "MCP Connect bridges cloud-based AI services with local Model Context Protocol (MCP) servers by translating HTTP/HTTPS requests to Stdio communication; it supports token-based authentication, Ngrok tunneling, and interacts with MCP servers using `npx` and `@modelcontextprotocol/server-github`.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-github"
    ],
    "env": {
      "GITHUB_PERSONAL_ACCESS_TOKEN": "<your_github_personal_access_token>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:54.418Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:49:56.413Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "6828965ba6f8dc721ceb405e"
  },
  "seq": {
    "$numberLong": "45"
  },
  "type": "STDIO",
  "url": "https://github.com/blurrah/mcp-graphql",
  "stars": 155,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-graphql",
    "description": "The mcp-graphql server enables LLMs to interact with GraphQL APIs by providing schema introspection and query execution capabilities via the Model Context Protocol; it uses environment variables to configure the GraphQL endpoint, custom headers, and mutation allowance, while supporting schema retrieval through introspection or local files.",
    "command": "npx",
    "args": [
      "mcp-graphql"
    ],
    "env": {
      "ENDPOINT": "http://localhost:3000/graphql"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:55.961Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:49:57.840Z"
  },
  "tags": [
    "graphql"
  ]
},
{
  "_id": {
    "$oid": "6828965ca6f8dc721ceb4060"
  },
  "seq": {
    "$numberLong": "46"
  },
  "type": "STDIO",
  "url": "https://github.com/taazkareem/clickup-mcp-server",
  "stars": 154,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ClickUp",
    "description": "This MCP server implements a Model Context Protocol for ClickUp, enabling AI agents to manage ClickUp tasks, spaces, folders, lists, tags, time tracking, and documents via a standardized protocol, using the ClickUp API and supporting integrations with Smithery and direct NPX installation.",
    "command": "npx",
    "args": [
      "-y",
      "@taazkareem/clickup-mcp-server@latest"
    ],
    "env": {
      "CLICKUP_API_KEY": "your-api-key",
      "CLICKUP_TEAM_ID": "your-team-id",
      "DOCUMENT_SUPPORT": "true"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:56.620Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:50:52.912Z"
  },
  "tags": [
    "clickup"
  ]
},
{
  "_id": {
    "$oid": "6828965da6f8dc721ceb4062"
  },
  "seq": {
    "$numberLong": "47"
  },
  "type": "STDIO",
  "url": "https://github.com/Tiberriver256/mcp-server-azure-devops",
  "stars": 149,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "azureDevOps",
    "description": "This Azure DevOps MCP server implementation acts as a bridge between AI assistants and Azure DevOps APIs by implementing the Model Context Protocol (MCP), enabling AI to access and manage Azure DevOps resources like projects, work items, and repositories through standard APIs using authentication methods such as PAT, Azure Identity, or Azure CLI.",
    "command": "npx",
    "args": [
      "-y",
      "@tiberriver256/mcp-server-azure-devops"
    ],
    "env": {
      "AZURE_DEVOPS_ORG_URL": "https://dev.azure.com/your-organization",
      "AZURE_DEVOPS_DEFAULT_PROJECT": "your-project-name",
      "AZURE_DEVOPS_AUTH_METHOD": "azure-identity"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:57.237Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:50:55.159Z"
  },
  "tags": [
    "azure devops",
    "azure",
    "devops"
  ]
},
{
  "_id": {
    "$oid": "6828965ea6f8dc721ceb4064"
  },
  "seq": {
    "$numberLong": "48"
  },
  "type": "STDIO",
  "url": "https://github.com/g0t4/mcp-server-commands",
  "stars": 142,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-commands",
    "description": "This MCP server implementation exposes a `run_command` tool to LLMs such as Claude and Groq Desktop, allowing them to execute arbitrary shell commands on the host system via standard input and output streams; it integrates with the Model Context Protocol (MCP) for communication and supports debugging through the MCP Inspector.",
    "command": "npx",
    "args": [
      "mcp-server-commands"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:58.176Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:50:56.733Z"
  },
  "tags": [
    "commands",
    "command"
  ]
},
{
  "_id": {
    "$oid": "6828965ea6f8dc721ceb4066"
  },
  "seq": {
    "$numberLong": "49"
  },
  "type": "STDIO",
  "url": "https://github.com/domdomegg/airtable-mcp-server",
  "stars": 141,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "airtable",
    "description": "This Model Context Protocol (MCP) server provides LLMs with the ability to inspect Airtable schemas and read/write records within Airtable databases, utilizing the Airtable API for accessing and manipulating data.",
    "command": "npx",
    "args": [
      "-y",
      "airtable-mcp-server"
    ],
    "env": {
      "AIRTABLE_API_KEY": "pat123.abc123"
    }
  },
  "created_at": {
    "$date": "2025-05-17T13:59:58.901Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:50:58.291Z"
  },
  "tags": [
    "airtable"
  ]
},
{
  "_id": {
    "$oid": "6828965fa6f8dc721ceb4068"
  },
  "seq": {
    "$numberLong": "50"
  },
  "type": "STDIO",
  "url": "https://github.com/QuantGeekDev/mongo-mcp",
  "stars": 140,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mongodb",
    "description": "This MongoDB MCP server implementation enables LLMs, such as Claude, to interact with MongoDB databases through natural language, utilizing the Model Context Protocol to query collections, inspect schemas, manage indexes, and perform CRUD operations. The server is accessible through the Claude Desktop application, leveraging Node.js and `npx` for execution.",
    "command": "npx",
    "args": [
      "mongo-mcp",
      "mongodb://<username>:<password>@<host>:<port>/<database>?authSource=admin"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T13:59:59.561Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:50:59.918Z"
  },
  "tags": [
    "mongodb",
    "mongo",
    "db"
  ]
},
{
  "_id": {
    "$oid": "68289660a6f8dc721ceb406a"
  },
  "seq": {
    "$numberLong": "51"
  },
  "type": "STDIO",
  "url": "https://github.com/bigcodegen/mcp-neovim-server",
  "stars": 140,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "MCP Neovim Server",
    "description": "This MCP server connects Claude Desktop (or any MCP client) to Neovim using the neovim/node-client JavaScript library and a socket connection, enabling AI text assistance by exposing Neovim buffers, cursor location, and mode, and allowing execution of Vim commands and edits.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-neovim-server"
    ],
    "env": {
      "ALLOW_SHELL_COMMANDS": "true",
      "NVIM_SOCKET_PATH": "/tmp/nvim"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:00.304Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:51:54.662Z"
  },
  "tags": [
    "neovim",
    "neo vim"
  ]
},
{
  "_id": {
    "$oid": "68289661a6f8dc721ceb406c"
  },
  "seq": {
    "$numberLong": "52"
  },
  "type": "STDIO",
  "url": "https://github.com/aliargun/mcp-server-gemini",
  "stars": 132,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gemini",
    "description": "This MCP server enables Claude Desktop to interact with Google's Gemini AI models by implementing the full Model Context Protocol (MCP) with real-time response streaming. It utilizes TypeScript, handles API keys securely via environment variables, and allows for configurable model parameters.",
    "command": "npx",
    "args": [
      "-y",
      "github:aliargun/mcp-server-gemini"
    ],
    "env": {
      "GEMINI_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:01.660Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:51:56.816Z"
  },
  "tags": [
    "gemini"
  ]
},
{
  "_id": {
    "$oid": "68289662a6f8dc721ceb406e"
  },
  "seq": {
    "$numberLong": "53"
  },
  "type": "STDIO",
  "url": "https://github.com/spences10/mcp-sequentialthinking-tools",
  "stars": 130,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-sequentialthinking-tools",
    "description": "This MCP server implements a sequential thinking tool that guides users through problem-solving by suggesting MCP tools with confidence scores and rationales for each step, utilizing JSON for communication and integrating with MCP-compatible environments like Cline and Claude.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-sequentialthinking-tools"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:02.322Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:51:58.506Z"
  },
  "tags": [
    "sequentialthinking tools",
    "sequentialthinking",
    "sequential thinking",
    "sequential",
    "thinking",
    "tools"
  ]
},
{
  "_id": {
    "$oid": "68289662a6f8dc721ceb4070"
  },
  "seq": {
    "$numberLong": "54"
  },
  "type": "STDIO",
  "url": "https://github.com/jae-jae/g-search-mcp",
  "stars": 126,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "g-search",
    "description": "This MCP server enables parallel Google searches for multiple keywords using Playwright to simulate user behavior, handle CAPTCHAs, and optimize browser usage, returning structured JSON results with configurable parameters such as result limits, timeouts, and locale settings; it integrates with Claude Desktop via command-line execution.",
    "command": "npx",
    "args": [
      "-y",
      "g-search-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:02.981Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:52:00.187Z"
  },
  "tags": [
    "g search",
    "g",
    "search"
  ]
},
{
  "_id": {
    "$oid": "68289664a6f8dc721ceb4072"
  },
  "seq": {
    "$numberLong": "55"
  },
  "type": "STDIO",
  "url": "https://github.com/thrashr888/terraform-mcp-server",
  "stars": 112,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "terraform-registry",
    "description": "This MCP server provides AI agents with the ability to interact with the Terraform Registry API using tools like `providerDetails` and `moduleSearch`, and optionally, the Terraform Cloud API via a `TFC_TOKEN` for functions like `listWorkspaces`. It implements stdio transport for MCP communication, and exposes provider, resource, and data source information as resources using specific URIs.",
    "command": "npx",
    "args": [
      "-y",
      "terraform-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:04.222Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:52:02.067Z"
  },
  "tags": [
    "terraform",
    "registry",
    "terraform registry"
  ]
},
{
  "_id": {
    "$oid": "68289665a6f8dc721ceb4074"
  },
  "seq": {
    "$numberLong": "56"
  },
  "type": "STDIO",
  "url": "https://github.com/antvis/mcp-server-chart",
  "stars": 134,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-chart",
    "description": "This MCP server, built with TypeScript, generates various chart types using AntV and returns image URLs through the Model Context Protocol. It integrates with platforms like aliyun, modelscope, glama.ai, and smithery.ai using HTTP and SSE protocols.",
    "command": "npx",
    "args": [
      "-y",
      "@antv/mcp-server-chart"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:05.307Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:53:05.491Z"
  },
  "tags": [
    "chart"
  ]
},
{
  "_id": {
    "$oid": "68289666a6f8dc721ceb4076"
  },
  "seq": {
    "$numberLong": "57"
  },
  "type": "STDIO",
  "url": "https://github.com/awkoy/notion-mcp-server",
  "stars": 103,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "notion-mcp-server",
    "description": "This Notion MCP server exposes tools to read, create, and modify Notion pages, blocks, databases, comments, and users via the Notion API, adhering to the Model Context Protocol and utilizing TypeScript, the official Notion API client, and Zod for validation.",
    "command": "npx",
    "args": [
      "-y",
      "notion-mcp-server"
    ],
    "env": {
      "NOTION_TOKEN": "YOUR_KEY",
      "NOTION_PAGE_ID": "YOUR_PAGE_ID"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:06.623Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:53:07.067Z"
  },
  "tags": [
    "notion",
    "notion"
  ]
},
{
  "_id": {
    "$oid": "68289668a6f8dc721ceb4078"
  },
  "seq": {
    "$numberLong": "58"
  },
  "type": "STDIO",
  "url": "https://github.com/arabold/docs-mcp-server",
  "stars": 92,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "docs-mcp-server",
    "description": "The Docs MCP Server indexes documentation from websites, GitHub, package managers (npm, PyPI), and local files, providing up-to-date, version-aware context to AI coding assistants via the Model Context Protocol (MCP); it supports various embedding models (OpenAI, Google Gemini/Vertex AI, Azure OpenAI, AWS Bedrock) and offers a hybrid search combining vector similarity with full-text search.",
    "command": "npx",
    "args": [
      "-y",
      "@arabold/docs-mcp-server"
    ],
    "env": {
      "OPENAI_API_KEY": "sk-proj-..."
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:08.049Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:53:08.879Z"
  },
  "tags": [
    "docs",
    "docs"
  ]
},
{
  "_id": {
    "$oid": "68289668a6f8dc721ceb407a"
  },
  "seq": {
    "$numberLong": "59"
  },
  "type": "STDIO",
  "url": "https://github.com/isaacphi/mcp-gdrive",
  "stars": 90,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gdrive",
    "description": "This MCP server integrates with Google Drive and Google Sheets, providing tools to list, read, and search files using the Google Drive API, as well as read and update spreadsheets via the Google Sheets API; it converts Google Workspace files to Markdown, CSV, plain text, or PNG formats.",
    "command": "npx",
    "args": [
      "-y",
      "@isaacphi/mcp-gdrive"
    ],
    "env": {
      "CLIENT_SECRET": "<CLIENT_SECRET>",
      "GDRIVE_CREDS_DIR": "/path/to/config/directory",
      "CLIENT_ID": "<CLIENT_ID>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:08.681Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:53:10.453Z"
  },
  "tags": [
    "gdrive",
    "google drive",
    "google",
    "drive"
  ]
},
{
  "_id": {
    "$oid": "68289669a6f8dc721ceb407c"
  },
  "seq": {
    "$numberLong": "60"
  },
  "type": "STDIO",
  "url": "https://github.com/Cheffromspace/MCPControl",
  "stars": 86,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "MCPControl",
    "description": "MCPControl is a Windows-specific server that implements the Model Context Protocol (MCP) to provide programmatic control over the operating system, enabling AI models to interact with the desktop through mouse and keyboard automation, window management, screen capture using libraries such as keysender and sharp, and clipboard operations.",
    "command": "npx",
    "args": [
      "--no-cache",
      "-y",
      "mcp-control"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:09.682Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:53:11.978Z"
  },
  "tags": [
    "control"
  ]
},
{
  "_id": {
    "$oid": "6828966aa6f8dc721ceb407e"
  },
  "seq": {
    "$numberLong": "61"
  },
  "type": "STDIO",
  "url": "https://github.com/steipete/macos-automator-mcp",
  "stars": 92,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "macos_automator",
    "description": "The macos_automator MCP server executes AppleScript and JavaScript for Automation (JXA) scripts on macOS via the Model Context Protocol (MCP), offering a knowledge base of pre-defined scripts accessible by ID, as well as supporting inline scripts and script files, utilizing technologies like `osascript` and integrating with macOS applications and system functions.",
    "command": "npx",
    "args": [
      "-y",
      "@steipete/macos-automator-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:10.338Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:54:07.481Z"
  },
  "tags": [
    "macos automator",
    "macos",
    "automator",
    "mac os automator",
    "mac os",
    "os"
  ]
},
{
  "_id": {
    "$oid": "6828966aa6f8dc721ceb4080"
  },
  "seq": {
    "$numberLong": "62"
  },
  "type": "STDIO",
  "url": "https://github.com/ivo-toby/mcp-openapi-server",
  "stars": 86,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "openapi",
    "description": "This MCP server implementation exposes REST APIs, defined by OpenAPI specifications, as MCP resources, enabling Large Language Models to interact with them via the MCP protocol; it uses environment variables or command-line arguments to configure the API base URL, OpenAPI specification path, and custom headers.",
    "command": "npx",
    "args": [
      "-y",
      "@ivotoby/openapi-mcp-server"
    ],
    "env": {
      "API_BASE_URL": "https://api.example.com",
      "OPENAPI_SPEC_PATH": "https://api.example.com/openapi.json",
      "API_HEADERS": "Authorization:Bearer token123,X-API-Key:your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:10.966Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:54:09.064Z"
  },
  "tags": [
    "openapi",
    "open api"
  ]
},
{
  "_id": {
    "$oid": "6828966ca6f8dc721ceb4082"
  },
  "seq": {
    "$numberLong": "63"
  },
  "type": "STDIO",
  "url": "https://github.com/integromat/make-mcp-server",
  "stars": 84,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "make",
    "description": "This MCP server implementation connects to Make via API, discovers on-demand scenarios, and exposes them as callable tools to AI assistants, parsing scenario parameters and returning structured JSON output; it is configured using environment variables for API key, zone, and team ID.",
    "command": "npx",
    "args": [
      "-y",
      "@makehq/mcp-server"
    ],
    "env": {
      "MAKE_ZONE": "<your-zone>",
      "MAKE_API_KEY": "<your-api-key>",
      "MAKE_TEAM": "<your-team-id>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:12.089Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:54:10.716Z"
  },
  "tags": [
    "make"
  ]
},
{
  "_id": {
    "$oid": "6828966ea6f8dc721ceb4084"
  },
  "seq": {
    "$numberLong": "64"
  },
  "type": "STDIO",
  "url": "https://github.com/tacticlaunch/mcp-linear",
  "stars": 73,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "linear",
    "description": "The MCP Linear server acts as a bridge between AI assistants and the Linear project management tool by implementing the Model Context Protocol (MCP) to retrieve, create, and update Linear data through its GraphQL API; it integrates with tools like Cursor and Claude, and can be configured manually using a Linear API token.",
    "command": "npx",
    "args": [
      "-y",
      "@tacticlaunch/mcp-linear"
    ],
    "env": {
      "LINEAR_API_TOKEN": "<YOUR_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:14.888Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:54:12.215Z"
  },
  "tags": [
    "linear"
  ]
},
{
  "_id": {
    "$oid": "68289670a6f8dc721ceb4086"
  },
  "seq": {
    "$numberLong": "65"
  },
  "type": "STDIO",
  "url": "https://github.com/roychri/mcp-server-asana",
  "stars": 68,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "asana",
    "description": "This MCP server implementation provides an interface to the Asana API, enabling interaction with Asana tasks, projects, workspaces, and comments through the Model Context Protocol; it utilizes the Asana API with a personal access token and supports queries from MCP clients such as Anthropic's Claude Desktop Application.",
    "command": "npx",
    "args": [
      "-y",
      "@roychri/mcp-server-asana"
    ],
    "env": {
      "ASANA_ACCESS_TOKEN": "your-asana-access-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:16.116Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:54:13.870Z"
  },
  "tags": [
    "asana"
  ]
},
{
  "_id": {
    "$oid": "68289670a6f8dc721ceb4088"
  },
  "seq": {
    "$numberLong": "66"
  },
  "type": "STDIO",
  "url": "https://github.com/QuantGeekDev/coincap-mcp",
  "stars": 67,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mongodb",
    "description": "The Coincap MCP server integrates with the Claude Desktop application and utilizes the Coincap API to provide cryptocurrency information via tools that fetch prices and list available crypto assets, using Node.js and npx for execution.",
    "command": "npx",
    "args": [
      "coincap-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:16.768Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:55:09.270Z"
  },
  "tags": [
    "mongodb",
    "mongo",
    "db"
  ]
},
{
  "_id": {
    "$oid": "68289671a6f8dc721ceb408a"
  },
  "seq": {
    "$numberLong": "67"
  },
  "type": "STDIO",
  "url": "https://github.com/lapras-inc/lapras-mcp-server",
  "stars": 67,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "lapras",
    "description": "The LAPRAS MCP server implements the Model Context Protocol, enabling AI models to access and manipulate user career data and search for jobs on the LAPRAS platform using tools like `search_job`, `get_experiences`, `update_experience`, and others; it integrates with LAPRAS via an API key and can be deployed using npx or Docker.",
    "command": "npx",
    "args": [
      "-y",
      "@lapras-inc/lapras-mcp-server"
    ],
    "env": {
      "LAPRAS_API_KEY": "<YOUR_LAPRAS_API_KEY>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:17.869Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:55:11.203Z"
  },
  "tags": [
    "lapras"
  ]
},
{
  "_id": {
    "$oid": "68289672a6f8dc721ceb408c"
  },
  "seq": {
    "$numberLong": "68"
  },
  "type": "STDIO",
  "url": "https://github.com/spences10/mcp-svelte-docs",
  "stars": 66,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-svelte-docs",
    "description": "This MCP server delivers comprehensive documentation and migration guides for Svelte 5, enabling LLMs to provide accurate assistance for Svelte development. It utilizes the Model Context Protocol to serve Svelte 5 reference material, including features, best practices, and common errors.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-svelte-docs"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:18.788Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:55:12.753Z"
  },
  "tags": [
    "svelte docs",
    "svelte",
    "docs"
  ]
},
{
  "_id": {
    "$oid": "68289674a6f8dc721ceb408e"
  },
  "seq": {
    "$numberLong": "69"
  },
  "type": "STDIO",
  "url": "https://github.com/sammcj/mcp-package-docs",
  "stars": 64,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "package-docs",
    "description": "This MCP server provides LLMs with access to package documentation and LSP features for multiple languages, including Go (via `go doc`), Python (via `help()`), NPM (via registry documentation), and Rust (via crates.io and docs.rs), and leverages language servers such as `typescript-language-server` for hover information, code completions, and diagnostics via the Language Server Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-package-docs"
    ],
    "env": {
      "ENABLE_LSP": "true"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:20.064Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:55:14.450Z"
  },
  "tags": [
    "package docs",
    "package",
    "docs"
  ]
},
{
  "_id": {
    "$oid": "68289675a6f8dc721ceb4090"
  },
  "seq": {
    "$numberLong": "70"
  },
  "type": "STDIO",
  "url": "https://github.com/tadasant/mcp-server-stability-ai",
  "stars": 59,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "stability-ai",
    "description": "This MCP server integrates MCP clients, like Claude, with Stability AI's REST API to enable Stable Diffusion image manipulation functionalities such as generating, editing, and upscaling images, leveraging the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-stability-ai"
    ],
    "env": {
      "STABILITY_AI_API_KEY": "sk-1234567890"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:21.580Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:55:16.143Z"
  },
  "tags": [
    "stability ai",
    "stability",
    "ai"
  ]
},
{
  "_id": {
    "$oid": "68289676a6f8dc721ceb4092"
  },
  "seq": {
    "$numberLong": "71"
  },
  "type": "STDIO",
  "url": "https://github.com/XeroAPI/xero-mcp-server",
  "stars": 58,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "xero",
    "description": "This MCP server provides a bridge between the Model Context Protocol and the Xero API, enabling access to Xero's accounting features using OAuth2 for authentication. It supports contact, chart of accounts, and invoice management, leveraging Node.js and integrates with tools like Claude Desktop.",
    "command": "npx",
    "args": [
      "-y",
      "@xeroapi/xero-mcp-server@latest"
    ],
    "env": {
      "XERO_CLIENT_ID": "your_client_id_here",
      "XERO_CLIENT_SECRET": "your_client_secret_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:22.285Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:56:10.958Z"
  },
  "tags": [
    "xero"
  ]
},
{
  "_id": {
    "$oid": "68289677a6f8dc721ceb4094"
  },
  "seq": {
    "$numberLong": "72"
  },
  "type": "STDIO",
  "url": "https://github.com/mettamatt/code-reasoning",
  "stars": 56,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "code-reasoning",
    "description": "This MCP server implements the Model Context Protocol to enable Claude to perform code reasoning tasks by promoting structured, step-by-step thinking using sequential prompts; it integrates with Claude Desktop and VS Code via `npx` and provides ready-to-use prompts for common development tasks.",
    "command": "npx",
    "args": [
      "-y",
      "@mettamatt/code-reasoning"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:23.541Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:56:12.758Z"
  },
  "tags": [
    "code reasoning",
    "code",
    "reasoning"
  ]
},
{
  "_id": {
    "$oid": "68289678a6f8dc721ceb4096"
  },
  "seq": {
    "$numberLong": "73"
  },
  "type": "STDIO",
  "url": "https://github.com/juehang/vscode-mcp-server",
  "stars": 55,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "vscode-mcp-server",
    "description": "The VS Code MCP Server extension implements a Model Context Protocol (MCP) server that exposes VS Code's filesystem and editing capabilities to MCP clients through HTTP, providing tools for file manipulation, diagnostic checking, symbol searching, and shell command execution; it integrates with VS Code's built-in features via a streamable HTTP API.",
    "command": "npx",
    "args": [
      "mcp-remote@next",
      "http://localhost:3000/mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:24.185Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:56:14.572Z"
  },
  "tags": [
    "vscode",
    "vs code"
  ]
},
{
  "_id": {
    "$oid": "68289679a6f8dc721ceb4098"
  },
  "seq": {
    "$numberLong": "74"
  },
  "type": "STDIO",
  "url": "https://github.com/jonrad/lsp-mcp",
  "stars": 53,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "lsp",
    "description": "This MCP server implementation provides language-aware context to LLMs/AI Agents by acting as an intermediary between the AI and Language Server Protocol (LSP) servers, enabling code analysis and insights; it supports multiple LSPs and utilizes dynamically generated LSP method definitions from JSON Schema, facilitating integrations with tools like Claude and Cursor using technologies like Docker and npx.",
    "command": "npx",
    "args": [
      "-y",
      "--silent",
      "git+https://github.com/jonrad/lsp-mcp",
      "--lsp",
      "npx -y --silent -p 'typescript@5.7.3' -p 'typescript-language-server@4.3.3' typescript-language-server --stdio"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:25.450Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:56:16.202Z"
  },
  "tags": [
    "lsp"
  ]
},
{
  "_id": {
    "$oid": "6828967ba6f8dc721ceb409a"
  },
  "seq": {
    "$numberLong": "75"
  },
  "type": "STDIO",
  "url": "https://github.com/lamemind/mcp-server-multiverse",
  "stars": 51,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "job-multiverse",
    "description": "The Multiverse MCP Server enables running multiple isolated instances of MCP servers simultaneously, each with its own configuration and namespace, using a JSON configuration format to define server commands, arguments, environment variables, and file watching; it supports automatic server restarts on file changes and provides function hiding and server disabling capabilities.",
    "command": "npx",
    "args": [
      "-y",
      "@lamemind/mcp-server-multiverse@latest",
      "/path/to/your/job-multiverse.json"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:27.357Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:56:18.070Z"
  },
  "tags": [
    "job multiverse",
    "job",
    "multiverse"
  ]
},
{
  "_id": {
    "$oid": "6828967ca6f8dc721ceb409c"
  },
  "seq": {
    "$numberLong": "76"
  },
  "type": "STDIO",
  "url": "https://github.com/ttommyth/interactive-mcp",
  "stars": 49,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "interactive",
    "description": "This Node.js/TypeScript server implements the Model Context Protocol (MCP) to enable interactive communication between LLMs and users on their local machines, providing tools to request user input, display OS notifications, and manage command-line chat sessions. It integrates with MCP clients like Claude Desktop and VS Code via npx and allows customization through command-line options for timeout and disabling specific tools.",
    "command": "npx",
    "args": [
      "-y",
      "interactive-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:28.274Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:57:12.852Z"
  },
  "tags": [
    "interactive"
  ]
},
{
  "_id": {
    "$oid": "6828967ca6f8dc721ceb409e"
  },
  "seq": {
    "$numberLong": "77"
  },
  "type": "STDIO",
  "url": "https://github.com/sanity-io/sanity-mcp-server",
  "stars": 49,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "sanity",
    "description": "The Sanity MCP server implements the Model Context Protocol to connect Sanity projects with AI tools like Claude, Cursor, and VS Code, enabling content intelligence and operations through natural language using GROQ queries and Sanity's API.",
    "command": "npx",
    "args": [
      "-y",
      "@sanity/mcp-server@latest"
    ],
    "env": {
      "SANITY_PROJECT_ID": "your-project-id",
      "MCP_USER_ROLE": "developer",
      "SANITY_API_TOKEN": "your-sanity-api-token",
      "SANITY_DATASET": "production"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:28.941Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:57:15.315Z"
  },
  "tags": [
    "sanity"
  ]
},
{
  "_id": {
    "$oid": "6828967da6f8dc721ceb40a0"
  },
  "seq": {
    "$numberLong": "78"
  },
  "type": "STDIO",
  "url": "https://github.com/auth0/auth0-mcp-server",
  "stars": 48,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "auth0",
    "description": "The Auth0 MCP server acts as a Model Context Protocol (MCP) implementation, enabling Large Language Models to interact with the Auth0 Management API to perform tasks like managing applications, resource servers, actions, logs, and forms; it utilizes OAuth 2.0 device authorization flow for secure authentication and supports integrations with MCP clients like Claude Desktop, Windsurf, and Cursor using Node.js.",
    "command": "npx",
    "args": [
      "-y",
      "@auth0/auth0-mcp-server",
      "run"
    ],
    "env": {
      "DEBUG": "auth0-mcp"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:29.675Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:57:17.580Z"
  },
  "tags": [
    "auth0"
  ]
},
{
  "_id": {
    "$oid": "6828967fa6f8dc721ceb40a2"
  },
  "seq": {
    "$numberLong": "79"
  },
  "type": "STDIO",
  "url": "https://github.com/MFYDev/ghost-mcp",
  "stars": 44,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ghost-mcp",
    "description": "This MCP server provides secure access to a Ghost CMS, managing posts, users, members, and other resources using the Ghost Admin API via the `@tryghost/admin-api` client, and exposing tools for browsing, reading, creating, editing, and deleting entities through the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@fanyangmeng/ghost-mcp"
    ],
    "env": {
      "GHOST_API_URL": "https://yourblog.com",
      "GHOST_ADMIN_API_KEY": "your_admin_api_key",
      "GHOST_API_VERSION": "v5.0"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:31.789Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:57:19.255Z"
  },
  "tags": [
    "ghost"
  ]
},
{
  "_id": {
    "$oid": "68289681a6f8dc721ceb40a4"
  },
  "seq": {
    "$numberLong": "80"
  },
  "type": "STDIO",
  "url": "https://github.com/alchemyplatform/alchemy-mcp-server",
  "stars": 43,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "alchemy",
    "description": "This MCP server enables AI agents to query Alchemy's blockchain data using token price, NFT ownership, and transaction history methods, communicating through the Model Context Protocol (MCP) and utilizing Alchemy's APIs for blockchain interactions across multiple networks.",
    "command": "npx",
    "args": [
      "-y",
      "@alchemy/mcp-server"
    ],
    "env": {
      "ALCHEMY_API_KEY": "YOUR_API_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:33.400Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:57:20.641Z"
  },
  "tags": [
    "alchemy"
  ]
},
{
  "_id": {
    "$oid": "68289682a6f8dc721ceb40a6"
  },
  "seq": {
    "$numberLong": "81"
  },
  "type": "STDIO",
  "url": "https://github.com/runablehq/mobile-mcp",
  "stars": 43,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mobile-mcp",
    "description": "The Mobile MCP server enables LLMs to automate Android mobile devices by interacting with structured UI dumps, eliminating the need for visual inputs; it integrates with Claude Desktop and VS Code via command-line installation and configuration using the Model Context Protocol.",
    "command": "npx",
    "args": [
      "mobile-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:34.140Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:58:14.465Z"
  },
  "tags": [
    "mobile",
    "mobile"
  ]
},
{
  "_id": {
    "$oid": "68289683a6f8dc721ceb40a8"
  },
  "seq": {
    "$numberLong": "82"
  },
  "type": "STDIO",
  "url": "https://github.com/da-okazaki/mcp-neo4j-server",
  "stars": 42,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "neo4j",
    "description": "The MCP Neo4j Server implements a bridge between Neo4j graph databases and Claude Desktop, enabling natural language interaction with the database through Cypher queries, node creation, and relationship management; it uses environment variables for configuration and communicates via the MCP protocol.",
    "command": "npx",
    "args": [
      "@alanse/mcp-neo4j-server"
    ],
    "env": {
      "NEO4J_PASSWORD": "your-password",
      "NEO4J_URI": "bolt://localhost:7687",
      "NEO4J_USERNAME": "neo4j"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:35.072Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:58:16.794Z"
  },
  "tags": [
    "neo4j"
  ]
},
{
  "_id": {
    "$oid": "68289683a6f8dc721ceb40aa"
  },
  "seq": {
    "$numberLong": "83"
  },
  "type": "STDIO",
  "url": "https://github.com/AbdelStark/bitcoin-mcp",
  "stars": 41,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "bitcoin-mcp",
    "description": "This MCP server empowers AI models to interact with the Bitcoin and Lightning Networks by providing capabilities such as key generation, address validation, transaction decoding, blockchain querying, and Lightning invoice processing and payment via LNBits, all accessible through the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "bitcoin-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:35.696Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:58:19.459Z"
  },
  "tags": [
    "bitcoin",
    "bitcoin"
  ]
},
{
  "_id": {
    "$oid": "68289684a6f8dc721ceb40ac"
  },
  "seq": {
    "$numberLong": "84"
  },
  "type": "STDIO",
  "url": "https://github.com/playcanvas/editor-mcp-server",
  "stars": 41,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "playcanvas",
    "description": "This MCP server automates the PlayCanvas Editor by providing LLMs, specifically Anthropic's Claude, with tools to manage entities, assets, scenes, and the store via a Chrome extension and a local server running with `tsx` through `npm` commands.",
    "command": "npx",
    "args": [
      "tsx",
      "/path/to/mcp-editor/src/server.ts"
    ],
    "env": {
      "PORT": "52000"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:36.392Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:58:21.227Z"
  },
  "tags": [
    "playcanvas",
    "play canvas",
    "play",
    "canvas"
  ]
},
{
  "_id": {
    "$oid": "68289685a6f8dc721ceb40ae"
  },
  "seq": {
    "$numberLong": "85"
  },
  "type": "STDIO",
  "url": "https://github.com/zhsama/duckduckgo-mcp-server",
  "stars": 41,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "duckduckgo-search",
    "description": "This MCP server, implemented in TypeScript, integrates with the DuckDuckGo Search API to provide a search tool via the Model Context Protocol; it accepts search queries and parameters for result count and safe search, returning formatted Markdown results, while also enforcing rate limiting.",
    "command": "npx",
    "args": [
      "-y",
      "duckduckgo-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:37.006Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:58:23.060Z"
  },
  "tags": [
    "duckduckgo",
    "duck duck go",
    "search",
    "duckduckgo search",
    "duck",
    "go"
  ]
},
{
  "_id": {
    "$oid": "68289685a6f8dc721ceb40b0"
  },
  "seq": {
    "$numberLong": "86"
  },
  "type": "STDIO",
  "url": "https://github.com/ivo-toby/contentful-mcp",
  "stars": 39,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "contentful",
    "description": "This MCP server provides content management capabilities for Contentful, enabling CRUD operations for entries, assets, content types, spaces, and environments via the Content Management API; it supports bulk operations, smart pagination, and offers both stdio and StreamableHTTP transport modes, and can leverage either a Content Management API token or App Identity for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@ivotoby/contentful-management-mcp-server"
    ],
    "env": {
      "CONTENTFUL_MANAGEMENT_ACCESS_TOKEN": "<Your CMA token>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:37.959Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:59:16.054Z"
  },
  "tags": [
    "contentful"
  ]
},
{
  "_id": {
    "$oid": "68289686a6f8dc721ceb40b2"
  },
  "seq": {
    "$numberLong": "87"
  },
  "type": "STDIO",
  "url": "https://github.com/GeLi2001/shopify-mcp",
  "stars": 39,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "shopify",
    "description": "This MCP server implements a GraphQL API for interacting with Shopify store data, enabling management of products, customers, and orders. It integrates directly with Shopify's GraphQL Admin API and is designed to be used with Claude Desktop, utilizing access tokens for authentication.",
    "command": "npx",
    "args": [
      "shopify-mcp",
      "--accessToken",
      "<YOUR_ACCESS_TOKEN>",
      "--domain",
      "<YOUR_SHOP>.myshopify.com"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:38.608Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:59:18.268Z"
  },
  "tags": [
    "shopify"
  ]
},
{
  "_id": {
    "$oid": "68289687a6f8dc721ceb40b4"
  },
  "seq": {
    "$numberLong": "88"
  },
  "type": "STDIO",
  "url": "https://github.com/rember/rember-mcp",
  "stars": 39,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "rember",
    "description": "The Rember MCP server integrates with Claude via the Model Context Protocol (MCP) to enable users to create flashcards in Rember directly from their chats and PDFs; it exposes a `create_flashcards` tool that leverages the Rember API to generate flashcards from user-provided notes.",
    "command": "npx",
    "args": [
      "-y",
      "@getrember/mcp",
      "--api-key=YOUR_REMBER_API_KEY"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:39.280Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:59:20.960Z"
  },
  "tags": [
    "rember"
  ]
},
{
  "_id": {
    "$oid": "68289688a6f8dc721ceb40b6"
  },
  "seq": {
    "$numberLong": "89"
  },
  "type": "STDIO",
  "url": "https://github.com/ReAPI-com/mcp-openapi",
  "stars": 38,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "@reapi/mcp-openapi",
    "description": "This MCP server implementation loads and serves multiple OpenAPI specifications via the Model Context Protocol, enabling LLM-powered IDE integrations, such as Cursor, to understand and interact with APIs directly; it uses `npx` to run and supports dereferenced schemas, specification ID configuration (`x-spec-id`), and maintains a catalog of API operations and schemas.",
    "command": "npx",
    "args": [
      "-y",
      "@reapi/mcp-openapi@latest",
      "--dir",
      "./specs"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:40.300Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:59:23.143Z"
  },
  "tags": [
    "reapi",
    "openapi",
    "reapi openapi",
    "re api",
    "api"
  ]
},
{
  "_id": {
    "$oid": "68289689a6f8dc721ceb40b8"
  },
  "seq": {
    "$numberLong": "90"
  },
  "type": "STDIO",
  "url": "https://github.com/sparesparrow/mcp-prompts",
  "stars": 37,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "prompts",
    "description": "The MCP Prompts Server manages AI prompts and templates, enabling project orchestration by storing, retrieving, and applying templates to prompts via tools and APIs; it supports file, PostgreSQL, and MDC storage, multiple prompt formats, and integrates with other MCP servers using HTTP and Server-Sent Events (SSE) protocols.",
    "command": "npx",
    "args": [
      "-y",
      "@sparesparrow/mcp-prompts"
    ],
    "env": {
      "PROMPTS_DIR": "/path/to/your/prompts/directory",
      "LOG_LEVEL": "debug",
      "STORAGE_TYPE": "file"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:41.616Z"
  },
  "updated_at": {
    "$date": "2025-05-17T14:59:26.335Z"
  },
  "tags": [
    "prompts"
  ]
},
{
  "_id": {
    "$oid": "6828968aa6f8dc721ceb40ba"
  },
  "seq": {
    "$numberLong": "91"
  },
  "type": "STDIO",
  "url": "https://github.com/Softeria/ms-365-mcp-server",
  "stars": 35,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ms365",
    "description": "This Model Context Protocol (MCP) server enables interaction with Microsoft 365 services, providing tools for managing Excel files, calendar events, mail, OneDrive files, OneNote notebooks, To Do tasks, Planner plans, Outlook contacts, and users via the Microsoft Graph API. It utilizes the Microsoft Authentication Library (MSAL) for authentication and caches tokens securely.",
    "command": "npx",
    "args": [
      "-y",
      "@softeria/ms-365-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:42.308Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:00:17.661Z"
  },
  "tags": [
    "ms365"
  ]
},
{
  "_id": {
    "$oid": "6828968aa6f8dc721ceb40bc"
  },
  "seq": {
    "$numberLong": "92"
  },
  "type": "STDIO",
  "url": "https://github.com/sapientpants/sonarqube-mcp-server",
  "stars": 35,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "sonarqube",
    "description": "The SonarQube MCP server implements the Model Context Protocol to integrate with SonarQube and SonarCloud, providing AI assistants with access to code quality metrics, issues, and project analysis results via a REST API; it utilizes technologies such as TypeScript and supports Docker deployments.",
    "command": "npx",
    "args": [
      "-y",
      "sonarqube-mcp-server@latest"
    ],
    "env": {
      "SONARQUBE_TOKEN": "your-sonarqube-token",
      "SONARQUBE_URL": "https://sonarqube.example.com",
      "SONARQUBE_ORGANIZATION": "your-organization-key (optional)"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:42.917Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:00:20.127Z"
  },
  "tags": [
    "sonarqube",
    "sonar cube",
    "sonar",
    "cube"
  ]
},
{
  "_id": {
    "$oid": "6828968ba6f8dc721ceb40be"
  },
  "seq": {
    "$numberLong": "93"
  },
  "type": "STDIO",
  "url": "https://github.com/r-huijts/ns-mcp-server",
  "stars": 34,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ns-server",
    "description": "This MCP server integrates with the NS (Nederlandse Spoorwegen) API to provide real-time Dutch railway travel information, including departures, arrivals, journey planning, pricing, and station details via HTTP requests triggered by Claude or other AI assistants.",
    "command": "npx",
    "args": [
      "-y",
      "ns-mcp-server"
    ],
    "env": {
      "NS_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:43.562Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:00:22.479Z"
  },
  "tags": [
    "ns",
    "ns server"
  ]
},
{
  "_id": {
    "$oid": "6828968ca6f8dc721ceb40c0"
  },
  "seq": {
    "$numberLong": "94"
  },
  "type": "STDIO",
  "url": "https://github.com/IzumiSy/mcp-duckdb-memory-server",
  "stars": 34,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "graph-memory",
    "description": "This MCP server implements a knowledge graph memory store utilizing DuckDB for persistent storage and efficient querying via SQL, enhanced with Fuse.js for fuzzy search capabilities; it integrates with the Model Context Protocol and can be deployed with Claude, Smithery or Docker.",
    "command": "npx",
    "args": [
      "-y",
      "@izumisy/mcp-duckdb-memory-server"
    ],
    "env": {
      "MEMORY_FILE_PATH": "/path/to/your/memory.data"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:44.179Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:00:25.145Z"
  },
  "tags": [
    "graph memory",
    "graph",
    "memory"
  ]
},
{
  "_id": {
    "$oid": "6828968ca6f8dc721ceb40c2"
  },
  "seq": {
    "$numberLong": "95"
  },
  "type": "STDIO",
  "url": "https://github.com/lazy-dinosaur/ccxt-mcp",
  "stars": 34,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ccxt-mcp",
    "description": "The CCXT MCP Server enables AI models to interact with cryptocurrency exchanges via the Model Context Protocol (MCP), utilizing the CCXT library to access over 100 exchanges and providing market data, trading functionalities, and account analytics; it supports configuration through Claude Desktop with either direct integration or separate JSON configuration files.",
    "command": "npx",
    "args": [
      "-y",
      "@lazydino/ccxt-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:44.809Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:00:28.119Z"
  },
  "tags": [
    "ccxt"
  ]
},
{
  "_id": {
    "$oid": "6828968da6f8dc721ceb40c4"
  },
  "seq": {
    "$numberLong": "96"
  },
  "type": "STDIO",
  "url": "https://github.com/sawa-zen/vrchat-mcp",
  "stars": 34,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "vrchat-mcp",
    "description": "This MCP server enables interaction with the VRChat API by providing access to user, avatar, world, instance, group, favorites, invite, and notification data; it uses the Model Context Protocol over stdio and integrates with Claude Desktop for automated execution using environment variables for VRChat authentication.",
    "command": "npx",
    "args": [
      "vrchat-mcp"
    ],
    "env": {
      "VRCHAT_USERNAME": "your-username",
      "VRCHAT_AUTH_TOKEN": "your-auth-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:45.473Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:01:19.300Z"
  },
  "tags": [
    "vrchat",
    "vr chat"
  ]
},
{
  "_id": {
    "$oid": "6828968fa6f8dc721ceb40c6"
  },
  "seq": {
    "$numberLong": "97"
  },
  "type": "STDIO",
  "url": "https://github.com/tsmztech/mcp-server-salesforce",
  "stars": 32,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "salesforce",
    "description": "This MCP server implementation integrates Claude with Salesforce using the Model Context Protocol, enabling natural language interaction to query, modify, and manage Salesforce objects and records via SOQL, SOSL, and Apex code management through REST APIs.",
    "command": "npx",
    "args": [
      "-y",
      "@tsmztech/mcp-server-salesforce"
    ],
    "env": {
      "SALESFORCE_INSTANCE_URL": "org_url",
      "SALESFORCE_USERNAME": "your_username",
      "SALESFORCE_TOKEN": "your_security_token",
      "SALESFORCE_CONNECTION_TYPE": "User_Password",
      "SALESFORCE_PASSWORD": "your_password"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:47.316Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:01:21.694Z"
  },
  "tags": [
    "salesforce"
  ]
},
{
  "_id": {
    "$oid": "68289690a6f8dc721ceb40c8"
  },
  "seq": {
    "$numberLong": "98"
  },
  "type": "STDIO",
  "url": "https://github.com/yuna0x0/anilist-mcp",
  "stars": 32,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "anilist",
    "description": "This MCP server connects to the AniList API and exposes a suite of tools that allows Large Language Models to search and retrieve data about anime, manga, characters, staff, studios, and user profiles, as well as manage user lists and activities, utilizing HTTP requests.",
    "command": "npx",
    "args": [
      "-y",
      "anilist-mcp"
    ],
    "env": {
      "ANILIST_TOKEN": "your_api_token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:48.598Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:01:24.218Z"
  },
  "tags": [
    "anilist"
  ]
},
{
  "_id": {
    "$oid": "68289691a6f8dc721ceb40ca"
  },
  "seq": {
    "$numberLong": "99"
  },
  "type": "STDIO",
  "url": "https://github.com/webflow/mcp-server",
  "stars": 30,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "webflow",
    "description": "The Webflow MCP Server implements the Model Context Protocol in Node.js, enabling AI agents to interact with Webflow APIs using the Webflow JavaScript SDK for tasks like managing sites, pages, CMS collections, and custom code; it integrates with services like Cursor and Claude Desktop via configurations using `mcp-remote`.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "https://mcp.webflow.com/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:49.397Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:01:27.073Z"
  },
  "tags": [
    "webflow"
  ]
},
{
  "_id": {
    "$oid": "68289692a6f8dc721ceb40cc"
  },
  "seq": {
    "$numberLong": "100"
  },
  "type": "STDIO",
  "url": "https://github.com/kevinwatt/yt-dlp-mcp",
  "stars": 30,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "yt-dlp",
    "description": "This MCP server implements video and audio downloading capabilities for LLMs using yt-dlp, allowing retrieval of content (e.g., YouTube, Facebook) and subtitles in various formats via MCP, and integrates with platforms like Dive.",
    "command": "npx",
    "args": [
      "-y",
      "@kevinwatt/yt-dlp-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:50.679Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:01:29.753Z"
  },
  "tags": [
    "yt-dlp",
    "yt dlp",
    "yt",
    "dlp"
  ]
},
{
  "_id": {
    "$oid": "68289694a6f8dc721ceb40ce"
  },
  "seq": {
    "$numberLong": "101"
  },
  "type": "STDIO",
  "url": "https://github.com/merajmehrabi/puppeteer-mcp-server",
  "stars": 29,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "puppeteer",
    "description": "This MCP server utilizes Puppeteer to provide browser automation by connecting to new or existing Chrome instances via remote debugging, and it exposes tools for navigation, screenshot capture, element interaction, JavaScript execution, and form handling through the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "puppeteer-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:52.563Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:02:20.699Z"
  },
  "tags": [
    "puppeteer"
  ]
},
{
  "_id": {
    "$oid": "68289695a6f8dc721ceb40d0"
  },
  "seq": {
    "$numberLong": "102"
  },
  "type": "STDIO",
  "url": "https://github.com/jason-tan-swe/railway-mcp",
  "stars": 29,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "railway",
    "description": "This Railway MCP server enables management of Railway.app infrastructure through natural language by providing tools to manage projects, services, deployments, and variables via the Railway API; it integrates with MCP clients such as Claude and Cursor using Node.js and npx.",
    "command": "npx",
    "args": [
      "-y",
      "@jasontanswe/railway-mcp"
    ],
    "env": {
      "RAILWAY_API_TOKEN": "your-railway-api-token-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:53.215Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:02:23.447Z"
  },
  "tags": [
    "railway"
  ]
},
{
  "_id": {
    "$oid": "68289695a6f8dc721ceb40d2"
  },
  "seq": {
    "$numberLong": "103"
  },
  "type": "STDIO",
  "url": "https://github.com/executeautomation/mcp-database-server",
  "stars": 29,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "sqlite",
    "description": "This MCP server, implemented in Node.js, provides database access to Claude via the Model Context Protocol (MCP) and supports SQLite, SQL Server, and PostgreSQL databases using their respective connection protocols. It offers tools for querying, creating, altering, and managing database tables.",
    "command": "npx",
    "args": [
      "-y",
      "@executeautomation/database-server",
      "/path/to/your/database.db"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:53.859Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:02:25.636Z"
  },
  "tags": [
    "sqlite"
  ]
},
{
  "_id": {
    "$oid": "68289696a6f8dc721ceb40d4"
  },
  "seq": {
    "$numberLong": "104"
  },
  "type": "STDIO",
  "url": "https://github.com/GeLi2001/datadog-mcp-server",
  "stars": 29,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "datadog",
    "description": "This MCP server provides access to Datadog's monitoring data through the Datadog API, enabling users to retrieve monitors, dashboards, metrics, events, logs, and incidents; it supports filtering, sorting, and aggregation of log data, and integrates with Datadog's v1 and v2 APIs via environment variables or command-line arguments.",
    "command": "npx",
    "args": [
      "datadog-mcp-server",
      "--apiKey",
      "<YOUR_API_KEY>",
      "--appKey",
      "<YOUR_APP_KEY>",
      "--site",
      "<YOUR_DD_SITE>(e.g us5.datadoghq.com)"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:54.478Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:02:28.539Z"
  },
  "tags": [
    "datadog"
  ]
},
{
  "_id": {
    "$oid": "68289697a6f8dc721ceb40d6"
  },
  "seq": {
    "$numberLong": "105"
  },
  "type": "STDIO",
  "url": "https://github.com/djalal/quran-mcp-server",
  "stars": 28,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "quran-api",
    "description": "This MCP server integrates with the Quran.com REST API v4, providing endpoints for retrieving chapters, verses, juzs, translations, tafsirs, audio recitations, and languages; it exposes these functionalities as tools that LLMs can use through compatible clients, utilizing technologies like Node.js and Docker for deployment.",
    "command": "npx",
    "args": [
      "ts-node",
      "/path/to/quran-mcp-server/src/server.ts"
    ],
    "env": {
      "API_KEY": "your_api_key_if_needed",
      "VERBOSE_MODE": "true"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:55.134Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:02:31.575Z"
  },
  "tags": [
    "quran api",
    "quran",
    "api"
  ]
},
{
  "_id": {
    "$oid": "68289698a6f8dc721ceb40d8"
  },
  "seq": {
    "$numberLong": "106"
  },
  "type": "STDIO",
  "url": "https://github.com/ruchernchong/mcp-server-google-analytics",
  "stars": 27,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "google-analytics",
    "description": "This MCP server implements the Model Context Protocol using the TypeScript SDK to provide access to Google Analytics 4 data via the Google Analytics Data API; it retrieves metrics like page views, active users, events, and user behavior, and integrates with platforms like Claude Desktop.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-google-analytics"
    ],
    "env": {
      "GOOGLE_PRIVATE_KEY": "your-private-key",
      "GA_PROPERTY_ID": "your-ga4-property-id",
      "GOOGLE_CLIENT_EMAIL": "your-service-account@project.iam.gserviceaccount.com"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:56.719Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:03:22.267Z"
  },
  "tags": [
    "google analytics",
    "google",
    "analytics"
  ]
},
{
  "_id": {
    "$oid": "6828969aa6f8dc721ceb40da"
  },
  "seq": {
    "$numberLong": "107"
  },
  "type": "STDIO",
  "url": "https://github.com/qianniuspace/mcp-security-audit",
  "stars": 26,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-security-audit",
    "description": "This MCP server audits npm package dependencies for security vulnerabilities by integrating with a remote npm registry. It provides detailed vulnerability reports with severity levels, fix recommendations, CVSS scores, and CVE references, accessible via the Model Context Protocol (MCP).",
    "command": "npx",
    "args": [
      "-y",
      "mcp-security-audit"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:00:58.930Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:03:25.021Z"
  },
  "tags": [
    "security audit",
    "security",
    "audit"
  ]
},
{
  "_id": {
    "$oid": "6828969ba6f8dc721ceb40dc"
  },
  "seq": {
    "$numberLong": "108"
  },
  "type": "STDIO",
  "url": "https://github.com/gleanwork/mcp-server",
  "stars": 25,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "glean",
    "description": "The Glean MCP Server implements the Model Context Protocol to provide access to Glean's enterprise knowledge via the Glean Search and Chat APIs, enabling company search, people profile search, and interaction with Glean's AI assistant; it integrates with clients like Cursor, Claude, and Windsurf.",
    "command": "npx",
    "args": [
      "-y",
      "@gleanwork/mcp-server"
    ],
    "env": {
      "GLEAN_API_TOKEN": "<glean api token>",
      "GLEAN_INSTANCE": "<glean instance name>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:00:59.591Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:03:27.332Z"
  },
  "tags": [
    "glean"
  ]
},
{
  "_id": {
    "$oid": "6828969ca6f8dc721ceb40de"
  },
  "seq": {
    "$numberLong": "109"
  },
  "type": "STDIO",
  "url": "https://github.com/railsware/mailtrap-mcp",
  "stars": 26,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mailtrap",
    "description": "This MCP server, built with TypeScript and leveraging the Mailtrap API, enables applications like Claude Desktop, Cursor, and VS Code to send transactional emails; it accepts parameters such as recipient, subject, and email body via the `send-email` tool.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-mailtrap"
    ],
    "env": {
      "DEFAULT_FROM_EMAIL": "your_sender@example.com",
      "MAILTRAP_API_TOKEN": "your_mailtrap_api_token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:00.896Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:03:30.297Z"
  },
  "tags": [
    "mailtrap",
    "mail trap",
    "mail",
    "trap"
  ]
},
{
  "_id": {
    "$oid": "6828969da6f8dc721ceb40e0"
  },
  "seq": {
    "$numberLong": "110"
  },
  "type": "STDIO",
  "url": "https://github.com/bnb-chain/bnbchain-mcp",
  "stars": 25,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "bnbchain-mcp",
    "description": "The BNBChain MCP server implements the Model Context Protocol to facilitate interaction with BNB Chain, Greenfield, and other EVM-compatible networks using AI assistance by enabling querying of blockchain data, managing transactions, interacting with smart contracts and NFTs, and performing file management operations; it supports integration with tools like Cursor and Claude Desktop via npx commands.",
    "command": "npx",
    "args": [
      "-y",
      "@bnb-chain/mcp@latest"
    ],
    "env": {
      "PRIVATE_KEY": "your_private_key_here. (optional)"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:01.624Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:03:33.639Z"
  },
  "tags": [
    "bnbchain",
    "bnb chain",
    "bnb",
    "chain"
  ]
},
{
  "_id": {
    "$oid": "6828969ea6f8dc721ceb40e2"
  },
  "seq": {
    "$numberLong": "111"
  },
  "type": "STDIO",
  "url": "https://github.com/truss44/mcp-crypto-price",
  "stars": 25,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-crypto-price",
    "description": "This MCP server provides cryptocurrency analysis via the CoinCap API, offering real-time price data, market analysis, and historical trends; it supports both the v2 and v3 CoinCap APIs and integrates with Claude Desktop through a configuration file.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-crypto-price"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:02.619Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:04:23.770Z"
  },
  "tags": [
    "crypto price",
    "crypto",
    "price"
  ]
},
{
  "_id": {
    "$oid": "6828969fa6f8dc721ceb40e4"
  },
  "seq": {
    "$numberLong": "112"
  },
  "type": "STDIO",
  "url": "https://github.com/takumi0706/google-calendar-mcp",
  "stars": 25,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "google-calendar",
    "description": "The Google Calendar MCP server integrates Google Calendar with Claude Desktop using the Model Context Protocol, allowing Claude to retrieve, create, update, and delete calendar events via the Google Calendar API, secured with OAuth2 and AES-256-GCM token encryption, and communicated over STDIO.",
    "command": "npx",
    "args": [
      "-y",
      "@takumi0706/google-calendar-mcp"
    ],
    "env": {
      "GOOGLE_CLIENT_SECRET": "your_client_secret",
      "GOOGLE_CLIENT_ID": "your_client_id",
      "GOOGLE_REDIRECT_URI": "http://localhost:4153/oauth2callback"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:03.257Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:04:27.017Z"
  },
  "tags": [
    "google calendar",
    "google",
    "calendar"
  ]
},
{
  "_id": {
    "$oid": "6828969fa6f8dc721ceb40e6"
  },
  "seq": {
    "$numberLong": "113"
  },
  "type": "STDIO",
  "url": "https://github.com/useshortcut/mcp-server-shortcut",
  "stars": 24,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "shortcut",
    "description": "This MCP server implementation integrates Shortcut with AI coding assistants like Windsurf, Cursor, and Claude Code, enabling these tools to access Shortcut data using the Model Context Protocol (MCP); it is configured via JSON and uses `npx` or `node` commands to execute the server, requiring a Shortcut API token for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@shortcut/mcp"
    ],
    "env": {
      "SHORTCUT_API_TOKEN": "<YOUR_SHORTCUT_API_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:03.993Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:04:29.102Z"
  },
  "tags": [
    "shortcut"
  ]
},
{
  "_id": {
    "$oid": "682896a1a6f8dc721ceb40e8"
  },
  "seq": {
    "$numberLong": "114"
  },
  "type": "STDIO",
  "url": "https://github.com/makeplane/plane-mcp-server",
  "stars": 24,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "plane",
    "description": "The Plane MCP Server implements the Model Context Protocol to programmatically interact with the Plane API, enabling users to manage projects, issues, modules, cycles, and worklogs using tools like Claude Desktop and VSCode; it communicates using API keys and workspace slugs for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@makeplane/plane-mcp-server"
    ],
    "env": {
      "PLANE_API_HOST_URL": "<HOST_URL_FOR_SELF_HOSTED>",
      "PLANE_API_KEY": "<YOUR_API_KEY>",
      "PLANE_WORKSPACE_SLUG": "<YOUR_WORKSPACE_SLUG>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:05.015Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:04:31.970Z"
  },
  "tags": [
    "plane"
  ]
},
{
  "_id": {
    "$oid": "682896a1a6f8dc721ceb40ea"
  },
  "seq": {
    "$numberLong": "115"
  },
  "type": "STDIO",
  "url": "https://github.com/Tritlo/lsp-mcp",
  "stars": 24,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "lsp-mcp",
    "description": "This MCP server bridges Language Server Protocol (LSP) functionality to Large Language Models by acting as an LSP client and exposing LSP features like hover information, code completions, and diagnostics through MCP tools and resources via `lsp-diagnostics://`, `lsp-hover://`, and `lsp-completions://` schemes; it uses a stdio connection to communicate with the LSP server and supports language-specific extensions.",
    "command": "npx",
    "args": [
      "tritlo/lsp-mcp",
      "<language-id>",
      "<path-to-lsp>",
      "<lsp-args>"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:05.674Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:04:37.248Z"
  },
  "tags": [
    "lsp",
    "lsp"
  ]
},
{
  "_id": {
    "$oid": "682896a2a6f8dc721ceb40ec"
  },
  "seq": {
    "$numberLong": "116"
  },
  "type": "STDIO",
  "url": "https://github.com/thirdstrandstudio/mcp-figma",
  "stars": 24,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "figma",
    "description": "This MCP server implements the full Figma API via the Model Context Protocol, exposing methods for users, files, comments, teams, projects, components, styles, webhooks, and library analytics; it integrates with tools like Smithery and Claude Desktop, using Node.js and requiring a Figma API key for authentication.",
    "command": "npx",
    "args": [
      "@thirdstrandstudio/mcp-figma",
      "--figma-token",
      "your_figma_api_key"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:06.364Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:05:25.658Z"
  },
  "tags": [
    "figma"
  ]
},
{
  "_id": {
    "$oid": "682896a3a6f8dc721ceb40ee"
  },
  "seq": {
    "$numberLong": "117"
  },
  "type": "STDIO",
  "url": "https://github.com/d-kimuson/esa-mcp-server",
  "stars": 24,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "esa-mcp-server",
    "description": "This MCP server exposes the esa.io API, allowing interaction with esa.io's articles through the Model Context Protocol; it supports searching, reading, creating, updating, and deleting esa.io posts and uses a configuration file to define the server command and environment variables.",
    "command": "npx",
    "args": [
      "-y",
      "esa-mcp-server@latest"
    ],
    "env": {
      "ESA_API_KEY": "your api key here",
      "DEFAULT_ESA_TEAM": "your default esa team"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:07.001Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:05:28.697Z"
  },
  "tags": [
    "esa",
    "esa"
  ]
},
{
  "_id": {
    "$oid": "682896a4a6f8dc721ceb40f0"
  },
  "seq": {
    "$numberLong": "118"
  },
  "type": "STDIO",
  "url": "https://github.com/chatwork/chatwork-mcp-server",
  "stars": 23,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "chatwork",
    "description": "This MCP server enables AI tools to interact with Chatwork by implementing the Model Context Protocol. It utilizes the Chatwork API with a provided API token, allowing AI clients like Claude Desktop to send commands to Chatwork.",
    "command": "npx",
    "args": [
      "@chatwork/mcp-server"
    ],
    "env": {
      "CHATWORK_API_TOKEN": "YOUR_CHATWORK_API_TOKEN"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:08.751Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:05:30.688Z"
  },
  "tags": [
    "chatwork",
    "chat",
    "work"
  ]
},
{
  "_id": {
    "$oid": "682896a5a6f8dc721ceb40f2"
  },
  "seq": {
    "$numberLong": "119"
  },
  "type": "STDIO",
  "url": "https://github.com/yokingma/one-search-mcp",
  "stars": 22,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "one-search-mcp",
    "description": "The OneSearch MCP server provides web search, scraping, crawling, and content extraction capabilities by integrating with search engines like Searxng, Tavily, DuckDuckGo, and Bing, as well as Firecrawl for advanced scraping; it also supports local browser search using Puppeteer-core.",
    "command": "npx",
    "args": [
      "-y",
      "one-search-mcp"
    ],
    "env": {
      "SEARCH_PROVIDER": "searxng",
      "FIRECRAWL_API_URL": "http://127.0.0.1:3002",
      "FIRECRAWL_API_KEY": "YOUR_API_KEY",
      "SEARCH_API_URL": "http://127.0.0.1:8080",
      "SEARCH_API_KEY": "YOUR_API_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:09.381Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:05:33.682Z"
  },
  "tags": [
    "one search",
    "one",
    "search"
  ]
},
{
  "_id": {
    "$oid": "682896a6a6f8dc721ceb40f4"
  },
  "seq": {
    "$numberLong": "120"
  },
  "type": "STDIO",
  "url": "https://github.com/yuna0x0/hackmd-mcp",
  "stars": 22,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "hackmd",
    "description": "This MCP server implements the Model Context Protocol to integrate HackMD with AI assistants, enabling them to manage user and team notes via the HackMD API; it supports operations such as creating, reading, updating, and deleting notes, as well as listing notes and user information.",
    "command": "npx",
    "args": [
      "-y",
      "hackmd-mcp"
    ],
    "env": {
      "HACKMD_API_TOKEN": "your_api_token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:10.031Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:40:23.093Z"
  },
  "tags": [
    "hackmd"
  ]
},
{
  "_id": {
    "$oid": "682896a6a6f8dc721ceb40f6"
  },
  "seq": {
    "$numberLong": "121"
  },
  "type": "STDIO",
  "url": "https://github.com/aliyun/mcp-server-esa",
  "stars": 22,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "esa-mcp-server",
    "description": "This MCP server implementation provides an interface to manage Alibaba Cloud Edge Routine (ER) services by creating, deleting, listing, and getting routines, deployments, routes, records, and sites using the MCP protocol and Alibaba Cloud Access Key credentials.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-esa"
    ],
    "env": {
      "ALIBABA_CLOUD_ACCESS_KEY_ID": "your AK",
      "ALIBABA_CLOUD_SECURITY_TOKEN": "sts_security_token optional, required when using STS Token (By default, no need to pass)",
      "ALIBABA_CLOUD_ACCESS_KEY_SECRET": "your SK"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:10.774Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:06:27.365Z"
  },
  "tags": [
    "esa",
    "esa"
  ]
},
{
  "_id": {
    "$oid": "682896a7a6f8dc721ceb40f8"
  },
  "seq": {
    "$numberLong": "122"
  },
  "type": "STDIO",
  "url": "https://github.com/pnizer/wweb-mcp",
  "stars": 21,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "whatsapp",
    "description": "This Node.js application implements a Model Context Protocol (MCP) server that connects to WhatsApp Web, providing programmatic access to WhatsApp functionality via a REST API or direct integration, and supports automated messaging, contact management, and group chat interactions using SSE or command-line transport modes.",
    "command": "npx",
    "args": [
      "wweb-mcp",
      "-m",
      "mcp",
      "-s",
      "local",
      "-c",
      "api",
      "-t",
      "command",
      "--api-base-url",
      "http://localhost:3001/api",
      "--api-key",
      "1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:11.760Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:06:30.724Z"
  },
  "tags": [
    "whatsapp"
  ]
},
{
  "_id": {
    "$oid": "682896a8a6f8dc721ceb40fa"
  },
  "seq": {
    "$numberLong": "123"
  },
  "type": "STDIO",
  "url": "https://github.com/marcopesani/mcp-server-serper",
  "stars": 21,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "serper-search",
    "description": "This MCP server, written in TypeScript, offers web searching and scraping functionalities using the Serper API, enabling integrations with Claude Desktop and other platforms. It provides tools for comprehensive Google searches with advanced operators and extracts structured content from web pages, including text, markdown, JSON-LD, and metadata.",
    "command": "npx",
    "args": [
      "-y",
      "serper-search-scrape-mcp-server"
    ],
    "env": {
      "SERPER_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:12.963Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:06:32.563Z"
  },
  "tags": [
    "serper search",
    "serper",
    "search"
  ]
},
{
  "_id": {
    "$oid": "682896a9a6f8dc721ceb40fc"
  },
  "seq": {
    "$numberLong": "124"
  },
  "type": "STDIO",
  "url": "https://github.com/dx-zero/mcpn",
  "stars": 21,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "workflows-mcp",
    "description": "This MCP server implementation, mcpn.ai, facilitates the creation, organization, and sharing of AI workflows and prompts by combining prompts with MCP servers into reusable components configured via YAML, offering features such as custom tool strategies and parameter injection, and integrates with MCP tools and servers for specific development tasks.",
    "command": "npx",
    "args": [
      "-y",
      "mcpn@latest server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:13.688Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:06:35.616Z"
  },
  "tags": [
    "workflows",
    "workflows mcp"
  ]
},
{
  "_id": {
    "$oid": "682896aaa6f8dc721ceb40fe"
  },
  "seq": {
    "$numberLong": "125"
  },
  "type": "STDIO",
  "url": "https://github.com/tokenizin-agency/mcp-npx-fetch",
  "stars": 21,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "fetch",
    "description": "This MCP server implementation fetches web content from URLs and transforms it into HTML, JSON, Markdown, or plain text using technologies like JSDOM and Turndown; it supports custom headers and integrates with Claude Desktop and other MCP clients via the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@tokenizin/mcp-npx-fetch"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:14.759Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:06:40.543Z"
  },
  "tags": [
    "fetch"
  ]
},
{
  "_id": {
    "$oid": "682896aca6f8dc721ceb4100"
  },
  "seq": {
    "$numberLong": "126"
  },
  "type": "STDIO",
  "url": "https://github.com/groq/compound-mcp-server",
  "stars": 21,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "groq-compound",
    "description": "This server implements the Model Context Protocol (MCP) to interface with Groq models, offering tools like `ask_with_realtime_information` and `ask_with_code_execution`; it communicates via stdio and optionally uses Redis for SSE transport when deployed on Vercel.",
    "command": "npx",
    "args": [
      "-y",
      "groq-compound-mcp-server"
    ],
    "env": {
      "GROQ_API_KEY": "YOUR_GROQ_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:16.097Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:07:28.980Z"
  },
  "tags": [
    "groq compound",
    "groq",
    "compound"
  ]
},
{
  "_id": {
    "$oid": "682896aea6f8dc721ceb4102"
  },
  "seq": {
    "$numberLong": "127"
  },
  "type": "STDIO",
  "url": "https://github.com/ying-dao/yingdao_mcp_server",
  "stars": 20,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "YingDao RPA MCP Server",
    "description": "The Yingdao RPA MCP Server provides RPA capabilities to AI Power and other MCP Host tools using the Model Context Protocol (MCP); it supports SSE Server and Stdio Server modes and integrates with Yingdao RPA via local execution or the Open API using ACCESS_KEY_ID and ACCESS_KEY_SECRET for enterprise users.",
    "command": "npx",
    "args": [
      "-y",
      "yingdao-mcp-server"
    ],
    "env": {
      "RPA_MODEL": "openApi",
      "ACCESS_KEY_ID": "{your_access_key_id}",
      "ACCESS_KEY_SECRET": "{your_access_key_secret}"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:18.640Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:07:32.534Z"
  },
  "tags": [
    "yingdao rpa",
    "yingdao",
    "rpa"
  ]
},
{
  "_id": {
    "$oid": "682896afa6f8dc721ceb4104"
  },
  "seq": {
    "$numberLong": "128"
  },
  "type": "STDIO",
  "url": "https://github.com/sylphxltd/pdf-reader-mcp",
  "stars": 20,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "pdf-reader-mcp",
    "description": "The PDF Reader MCP server provides a secure and flexible interface for AI agents to read and extract text, metadata, and page counts from PDF files accessible via local paths or URLs, using `pdfjs-dist` for parsing and returning structured JSON output through an MCP interface, and it can be deployed via npm or Docker.",
    "command": "npx",
    "args": [
      "@sylphlab/pdf-reader-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:19.982Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:07:34.068Z"
  },
  "tags": [
    "pdf reader",
    "pdf",
    "reader",
    "pdf-reader"
  ]
},
{
  "_id": {
    "$oid": "682896b1a6f8dc721ceb4106"
  },
  "seq": {
    "$numberLong": "129"
  },
  "type": "STDIO",
  "url": "https://github.com/nota/gyazo-mcp-server",
  "stars": 19,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gyazo-mcp-server",
    "description": "This MCP server, implemented in TypeScript, provides AI assistants with the ability to access and interact with Gyazo images using the Model Context Protocol; it offers image resources, full-text search via `gyazo_search`, image retrieval via `gyazo_image`, and image uploading capabilities through the Gyazo API.",
    "command": "npx",
    "args": [
      "@notainc/gyazo-mcp-server"
    ],
    "env": {
      "GYAZO_ACCESS_TOKEN": "your-access-token-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:21.010Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:07:37.322Z"
  },
  "tags": [
    "gyazo",
    "gyazo mcp",
    "gyazo"
  ]
},
{
  "_id": {
    "$oid": "682896b1a6f8dc721ceb4108"
  },
  "seq": {
    "$numberLong": "130"
  },
  "type": "STDIO",
  "url": "https://github.com/cablate/mcp-google-map",
  "stars": 19,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "google-map",
    "description": "This MCP server provides Google Maps API integration using Node.js and the Google Maps Services JS library, allowing LLMs to perform location searches, geocoding/reverse geocoding, distance calculations, direction retrieval, and elevation data queries via the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@cablate/mcp-google-map"
    ],
    "env": {
      "GOOGLE_MAPS_API_KEY": "your_api_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:21.662Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:07:42.165Z"
  },
  "tags": [
    "google map",
    "google",
    "map"
  ]
},
{
  "_id": {
    "$oid": "682896b3a6f8dc721ceb410a"
  },
  "seq": {
    "$numberLong": "131"
  },
  "type": "STDIO",
  "url": "https://github.com/spences10/mcp-n8n-builder",
  "stars": 19,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "n8n-workflow-builder",
    "description": "This MCP server implementation manages n8n workflows programmatically using n8n's REST API, enabling AI assistants to create, modify, execute, and delete workflows; it integrates with Zod for schema validation and uses environment variables for configuration.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-n8n-builder"
    ],
    "env": {
      "OUTPUT_VERBOSITY": "concise",
      "N8N_HOST": "http://localhost:5678/api/v1",
      "N8N_API_KEY": "your-n8n-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:23.922Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:08:30.730Z"
  },
  "tags": [
    "n8n workflow builder",
    "n8n",
    "workflow",
    "builder",
    "workflow builder"
  ]
},
{
  "_id": {
    "$oid": "682896b4a6f8dc721ceb410c"
  },
  "seq": {
    "$numberLong": "132"
  },
  "type": "STDIO",
  "url": "https://github.com/gannonh/agent-pm",
  "stars": 19,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "agent-pm",
    "description": "AgentPM is an MCP server implementation that serves as a product manager for AI-driven software development, integrating with IDEs through the Model Context Protocol and orchestrating project planning, task management, and documentation using Claude and optionally Perplexity APIs to leverage AI for task generation, research, and context management.",
    "command": "npx",
    "args": [
      "-y",
      "@gannonh/agent-pm@latest"
    ],
    "env": {
      "PROJECT_ROOT": "/path/to/project/root/",
      "PERPLEXITY_API_KEY": "pplx-your-perplexity-api-key",
      "ANTHROPIC_API_KEY": "sk-your-anthropic-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:24.564Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:08:35.286Z"
  },
  "tags": [
    "agent pm",
    "agent",
    "pm"
  ]
},
{
  "_id": {
    "$oid": "682896b5a6f8dc721ceb410e"
  },
  "seq": {
    "$numberLong": "133"
  },
  "type": "STDIO",
  "url": "https://github.com/scrapeless-ai/scrapeless-mcp-server",
  "stars": 18,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "scrapelessMcpServer",
    "description": "The Scrapeless MCP server integrates LLMs with Scrapeless's Google SERP API, enabling real-time retrieval of Google Search results by utilizing the Model Context Protocol (MCP) for enhanced AI workflows, supporting search queries and configurable geographic and language parameters.",
    "command": "npx",
    "args": [
      "-y",
      "scrapeless-mcp-server"
    ],
    "env": {
      "SCRAPELESS_KEY": "YOUR_SCRAPELESS_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:25.508Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:08:36.964Z"
  },
  "tags": [
    "scrapeless",
    "scrape less"
  ]
},
{
  "_id": {
    "$oid": "682896b6a6f8dc721ceb4110"
  },
  "seq": {
    "$numberLong": "134"
  },
  "type": "STDIO",
  "url": "https://github.com/olaservo/shannon-thinking",
  "stars": 18,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "shannon-thinking",
    "description": "This MCP server implements Claude Shannon's problem-solving methodology, providing a `shannonthinking` tool that guides users through structured thought processes; it leverages TypeScript for schema definition and supports features such as dependency tracking, assumption management, iterative revisions, and experimental validation.",
    "command": "npx",
    "args": [
      "-y",
      "server-shannon-thinking@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:26.473Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:08:38.934Z"
  },
  "tags": [
    "shannon thinking",
    "shannon",
    "thinking"
  ]
},
{
  "_id": {
    "$oid": "682896b7a6f8dc721ceb4112"
  },
  "seq": {
    "$numberLong": "135"
  },
  "type": "STDIO",
  "url": "https://github.com/nearai/near-mcp",
  "stars": 17,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "near-mcp",
    "description": "The NEAR MCP server implements the Model Context Protocol (MCP) to securely enable Large Language Models (LLMs) and AI agents to interact with the NEAR blockchain; it allows these models to manage accounts, sign transactions, and execute smart contracts through integrations with tools like `claude` and `goose`.",
    "command": "npx",
    "args": [
      "-y",
      "@nearai/near-mcp@latest",
      "run"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:27.766Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:08:44.072Z"
  },
  "tags": [
    "near",
    "near"
  ]
},
{
  "_id": {
    "$oid": "682896b9a6f8dc721ceb4114"
  },
  "seq": {
    "$numberLong": "136"
  },
  "type": "STDIO",
  "url": "https://github.com/b1ff/atlassian-dc-mcp",
  "stars": 17,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "atlassian-jira-dc",
    "description": "This MCP server implementation enables integration with Atlassian Data Center products (Jira, Confluence, and Bitbucket) through their REST APIs, allowing interaction with issues, content, and code repositories using API tokens for authentication and configuration via environment variables.",
    "command": "npx",
    "args": [
      "-y",
      "@atlassian-dc-mcp/jira"
    ],
    "env": {
      "JIRA_API_TOKEN": "your-token",
      "JIRA_HOST": "your-jira-host"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:29.663Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:09:32.541Z"
  },
  "tags": [
    "atlassian jira dc",
    "atlassian",
    "jira",
    "dc",
    "atlassian jira",
    "jira dc"
  ]
},
{
  "_id": {
    "$oid": "682896baa6f8dc721ceb4116"
  },
  "seq": {
    "$numberLong": "137"
  },
  "type": "STDIO",
  "url": "https://github.com/glifxyz/glif-mcp-server",
  "stars": 17,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "glif",
    "description": "The glif-mcp-server implements a Model Context Protocol (MCP) server that runs glifs, manages bots, and provides access to glif metadata using URI-based resources; it integrates with platforms like Claude and utilizes tools like npx for deployment and Smithery for remote hosting.",
    "command": "npx",
    "args": [
      "-y",
      "@glifxyz/glif-mcp-server@latest"
    ],
    "env": {
      "GLIF_API_TOKEN": "your-token-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:30.383Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:09:37.177Z"
  },
  "tags": [
    "glif"
  ]
},
{
  "_id": {
    "$oid": "682896bba6f8dc721ceb4118"
  },
  "seq": {
    "$numberLong": "138"
  },
  "type": "STDIO",
  "url": "https://github.com/vrknetha/aisdk-mcp-bridge",
  "stars": 17,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "twitter-mcp",
    "description": "The AISDK MCP Bridge facilitates communication between Model Context Protocol (MCP) servers and the AI SDK, enabling AI models to execute tools from these servers using stdio or SSE; it utilizes a `mcp.config.json` file for flexible server configuration and supports diverse server types with robust error handling and logging.",
    "command": "npx",
    "args": [
      "-y",
      "@enescinar/twitter-mcp"
    ],
    "env": {
      "API_KEY": "your-twitter-api-key",
      "ACCESS_TOKEN": "your-twitter-access-token",
      "API_SECRET_KEY": "your-twitter-api-secret",
      "ACCESS_TOKEN_SECRET": "your-twitter-access-token-secret"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:31.377Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:09:39.044Z"
  },
  "tags": [
    "twitter",
    "twitter"
  ]
},
{
  "_id": {
    "$oid": "682896bca6f8dc721ceb411a"
  },
  "seq": {
    "$numberLong": "139"
  },
  "type": "STDIO",
  "url": "https://github.com/yWorks/mcp-typescribe",
  "stars": 17,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "typescribe",
    "description": "This MCP server implementation parses TypeScript definitions into a machine-readable format using TypeDoc and serves them dynamically to LLMs via the Model Context Protocol, enabling AI agents to query and understand APIs through endpoints that search symbols, retrieve details, list members, and find usages.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-typescribe@latest",
      "run-server",
      "<PATH_TO_API_DOT_JSON>"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:32.084Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:09:40.921Z"
  },
  "tags": [
    "typescribe",
    "type scribe",
    "type",
    "scribe"
  ]
},
{
  "_id": {
    "$oid": "682896bca6f8dc721ceb411c"
  },
  "seq": {
    "$numberLong": "140"
  },
  "type": "STDIO",
  "url": "https://github.com/stanislavlysenko0912/todoist-mcp-server",
  "stars": 16,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "todoist",
    "description": "This MCP server integrates with the Todoist REST API v2 and Sync API, providing natural language task management capabilities through AI assistants like Claude; it uses the Model Context Protocol to create, update, and manage Todoist resources such as tasks, projects, labels, and comments.",
    "command": "npx",
    "args": [
      "-y",
      "todoist-mcp"
    ],
    "env": {
      "API_KEY": "your_todoist_api_token_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:32.700Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:09:45.648Z"
  },
  "tags": [
    "todoist"
  ]
},
{
  "_id": {
    "$oid": "682896bda6f8dc721ceb411e"
  },
  "seq": {
    "$numberLong": "141"
  },
  "type": "STDIO",
  "url": "https://github.com/OctoMind-dev/octomind-mcp",
  "stars": 16,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "octomind-mcp",
    "description": "The Octomind MCP server enables agents to create, manage, and execute end-to-end tests within the Octomind platform, using an API key and configured API URL; it provides tools for test case management, environment configuration, test execution triggering, and report retrieval, supporting integrations with Claude Desktop, Cursor, and Windsurf via `npx`.",
    "command": "npx",
    "args": [
      "-y",
      "@octomind/octomind-mcp@latest"
    ],
    "env": {
      "APIKEY": "your-api-key-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:33.660Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:10:34.620Z"
  },
  "tags": [
    "octomind",
    "octo mind",
    "octo",
    "mind"
  ]
},
{
  "_id": {
    "$oid": "682896bea6f8dc721ceb4120"
  },
  "seq": {
    "$numberLong": "142"
  },
  "type": "STDIO",
  "url": "https://github.com/isnow890/naver-search-mcp",
  "stars": 16,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "naver-search",
    "description": "This MCP server integrates with the Naver Search API and DataLab API to provide search capabilities across various Naver services and enables data trend analysis using Node.js and can be deployed via NPX or Docker.",
    "command": "npx",
    "args": [
      "-y",
      "@isnow890/naver-search-mcp"
    ],
    "env": {
      "NAVER_CLIENT_SECRET": "your_client_secret",
      "NAVER_CLIENT_ID": "your_client_id"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:34.301Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:10:38.756Z"
  },
  "tags": [
    "naver search",
    "naver",
    "search"
  ]
},
{
  "_id": {
    "$oid": "682896c2a6f8dc721ceb4122"
  },
  "seq": {
    "$numberLong": "143"
  },
  "type": "STDIO",
  "url": "https://github.com/delorenj/mcp-server-ticketmaster",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ticketmaster",
    "description": "This MCP server implementation, utilizing the Ticketmaster Discovery API, enables the searching and retrieval of events, venues, and attractions, returning structured JSON or human-readable text output; it accepts flexible search parameters such as keywords, date ranges, and locations.",
    "command": "npx",
    "args": [
      "-y",
      "@delorenj/mcp-server-ticketmaster"
    ],
    "env": {
      "TICKETMASTER_API_KEY": "your-api-key-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:38.176Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:10:40.880Z"
  },
  "tags": [
    "ticketmaster"
  ]
},
{
  "_id": {
    "$oid": "682896c2a6f8dc721ceb4124"
  },
  "seq": {
    "$numberLong": "144"
  },
  "type": "STDIO",
  "url": "https://github.com/VapiAI/mcp-server",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "vapi-mcp-server",
    "description": "The Vapi MCP server enables integration with Vapi APIs via function calling using the Model Context Protocol, supporting tools for managing assistants, calls, phone numbers, and other Vapi resources; it connects to Claude Desktop and supports remote access via Server-Sent Events (SSE) with API key authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@vapi-ai/mcp-server"
    ],
    "env": {
      "VAPI_TOKEN": "<your_vapi_token>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:38.885Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:10:42.478Z"
  },
  "tags": [
    "vapi",
    "vapi"
  ]
},
{
  "_id": {
    "$oid": "682896c3a6f8dc721ceb4126"
  },
  "seq": {
    "$numberLong": "145"
  },
  "type": "STDIO",
  "url": "https://github.com/bhouston/mcp-server-text-editor",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "textEditor",
    "description": "This MCP server implements the Claude text editor tool API, enabling viewing, creating, and editing of text files via commands like view, create, str_replace, insert, and undo_edit; it adheres to the Model Context Protocol and is compatible with Claude versions `text_editor_20241022` and `text_editor_20250124`.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-text-editor"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:39.766Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:10:47.217Z"
  },
  "tags": [
    "text editor",
    "text",
    "editor"
  ]
},
{
  "_id": {
    "$oid": "682896c4a6f8dc721ceb4128"
  },
  "seq": {
    "$numberLong": "146"
  },
  "type": "STDIO",
  "url": "https://github.com/mektigboy/server-hyperliquid",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "brave-search",
    "description": "This MCP server provides access to Hyperliquid market data, including mid prices, candlestick data, and L2 order books, using the Hyperliquid SDK and exposing endpoints that accept coin symbols and time intervals as inputs, for integration with platforms like Claude Desktop.",
    "command": "npx",
    "args": [
      "-y",
      "@mektigboy/server-hyperliquid"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:40.363Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:11:36.263Z"
  },
  "tags": [
    "brave",
    "search",
    "brave search"
  ]
},
{
  "_id": {
    "$oid": "682896c5a6f8dc721ceb412a"
  },
  "seq": {
    "$numberLong": "147"
  },
  "type": "STDIO",
  "url": "https://github.com/aindreyway/mcp-neurolora",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "aindreyway-mcp-neurolora",
    "description": "The MCP Neurolora server provides code analysis using the OpenAI API, code collection with syntax highlighting, and automatic installation of base MCP servers; it integrates with tools like fetch, puppeteer, git, and shell commands and communicates via npx.",
    "command": "npx",
    "args": [
      "-y",
      "@aindreyway/mcp-neurolora@latest"
    ],
    "env": {
      "NODE_OPTIONS": "--max-old-space-size=256",
      "OPENAI_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:41.266Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:11:40.604Z"
  },
  "tags": [
    "aindreyway neurolora",
    "aindreyway",
    "neurolora"
  ]
},
{
  "_id": {
    "$oid": "682896c6a6f8dc721ceb412c"
  },
  "seq": {
    "$numberLong": "148"
  },
  "type": "STDIO",
  "url": "https://github.com/zandko/mcp-use",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "playwright",
    "description": "This MCP client library facilitates connecting any LLM to any MCP server in TypeScript/Node.js environments, leveraging LangChain.js and direct SSE/HTTP connections to enable custom agents with tool access; it also supports dynamic server selection, multi-server configurations, and tool restrictions.",
    "command": "npx",
    "args": [
      "@playwright/mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:42.485Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:11:42.491Z"
  },
  "tags": [
    "playwright"
  ]
},
{
  "_id": {
    "$oid": "682896c8a6f8dc721ceb412e"
  },
  "seq": {
    "$numberLong": "149"
  },
  "type": "STDIO",
  "url": "https://github.com/aiDotEngineer/aie-mcp",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "math",
    "description": "This MCP server implementation, designed for the AI Engineer Conference 2025 talk submission system, exposes tools via Server-Sent Events (SSE) protocol, integrates with Cloudflare Workers for deployment, and supports connection with the MCP Inspector and Claude Desktop for tool interaction.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "http://localhost:8787/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:44.101Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:11:44.126Z"
  },
  "tags": [
    "math"
  ]
},
{
  "_id": {
    "$oid": "682896c9a6f8dc721ceb4130"
  },
  "seq": {
    "$numberLong": "150"
  },
  "type": "STDIO",
  "url": "https://github.com/leafeye/lunchmoney-mcp-server",
  "stars": 13,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "lunchmoney",
    "description": "This Lunchmoney MCP server enables Claude and other AI assistants to access and analyze your financial data from Lunchmoney via the Model Context Protocol (MCP). It uses the Lunchmoney API to fetch transactions and budget information based on approved requests, allowing for secure and privacy-preserving financial analysis within AI conversations.",
    "command": "npx",
    "args": [
      "-y",
      "lunchmoney-mcp-server"
    ],
    "env": {
      "LUNCHMONEY_TOKEN": "your_token_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:45.340Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:11:48.743Z"
  },
  "tags": [
    "lunchmoney",
    "lunch",
    "money"
  ]
},
{
  "_id": {
    "$oid": "682896caa6f8dc721ceb4132"
  },
  "seq": {
    "$numberLong": "151"
  },
  "type": "STDIO",
  "url": "https://github.com/b-open-io/bsv-mcp",
  "stars": 13,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "Bitcoin SV",
    "description": "This Bitcoin SV MCP server implements the Model Context Protocol (MCP) and provides AI assistants with tools for interacting with the BSV blockchain, including wallet operations, ordinals management, transaction decoding, and data conversion, utilizing protocols such as HTTP for API calls and potentially sigma-protocol signing for ordinal inscriptions.",
    "command": "npx",
    "args": [
      "bsv-mcp@latest"
    ],
    "env": {
      "PRIVATE_KEY_WIF": "<your_private_key_wif>",
      "IDENTITY_KEY_WIF": "<your_identity_key_wif>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:46.039Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:12:38.798Z"
  },
  "tags": [
    "bitcoin sv",
    "bitcoin",
    "sv"
  ]
},
{
  "_id": {
    "$oid": "682896cba6f8dc721ceb4134"
  },
  "seq": {
    "$numberLong": "152"
  },
  "type": "STDIO",
  "url": "https://github.com/john-zhang-dev/xero-mcp",
  "stars": 13,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "xero-mcp",
    "description": "The Xero MCP server acts as an intermediary, allowing Clients to interact with Xero Accounting Software using OAuth2 for authentication and providing tools to create bank transactions and contacts, and retrieve balance sheets, accounts, invoices, and other financial data.",
    "command": "npx",
    "args": [
      "-y",
      "xero-mcp@latest"
    ],
    "env": {
      "XERO_REDIRECT_URI": "http://localhost:5000/callback",
      "XERO_CLIENT_ID": "YOUR_CLIENT_ID",
      "XERO_CLIENT_SECRET": "YOUR_CLIENT_SECRET"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:46.996Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:12:42.317Z"
  },
  "tags": [
    "xero",
    "xero"
  ]
},
{
  "_id": {
    "$oid": "682896cda6f8dc721ceb4136"
  },
  "seq": {
    "$numberLong": "153"
  },
  "type": "STDIO",
  "url": "https://github.com/AdsPower/local-api-mcp-typescript",
  "stars": 13,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "adspower-local-api",
    "description": "This MCP server implementation integrates with the AdsPower LocalAPI, enabling Large Language Models to manage AdsPower browsers by creating, updating, deleting, opening, and closing browser instances, as well as managing browser groups; it leverages technologies like Node.js and supports proxy and fingerprint configurations.",
    "command": "npx",
    "args": [
      "-y",
      "local-api-mcp-typescript"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:49.607Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:12:45.323Z"
  },
  "tags": [
    "adspower local api",
    "adspower",
    "local",
    "api",
    "local api"
  ]
},
{
  "_id": {
    "$oid": "682896cea6f8dc721ceb4138"
  },
  "seq": {
    "$numberLong": "154"
  },
  "type": "STDIO",
  "url": "https://github.com/dforel/easy-mcp-use",
  "stars": 13,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "playwright",
    "description": "Easy-MCP-Use is a TypeScript library that connects Large Language Models (LLMs) to any MCP server over HTTP, allowing the creation of custom agents with tool access; it integrates with LangChain and supports LLMs such as OpenAI, Anthropic, and Groq, enabling functionalities like web browsing and file operations.",
    "command": "npx",
    "args": [
      "@playwright/mcp@latest"
    ],
    "env": {
      "DISPLAY": ":1"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:50.335Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:12:47.049Z"
  },
  "tags": [
    "playwright"
  ]
},
{
  "_id": {
    "$oid": "682896d0a6f8dc721ceb413a"
  },
  "seq": {
    "$numberLong": "155"
  },
  "type": "STDIO",
  "url": "https://github.com/wrtnlabs/calculator-mcp",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "calculate",
    "description": "This Model Context Protocol (MCP) server provides calculator capabilities to LLMs, enabling them to perform basic arithmetic operations. It utilizes command-line execution via `npx` or a programmatic API with custom transports, and supports SSE transport for communication with clients.",
    "command": "npx",
    "args": [
      "-y",
      "@wrtnlabs/calculator-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:52.252Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:12:50.241Z"
  },
  "tags": [
    "calculate"
  ]
},
{
  "_id": {
    "$oid": "682896d0a6f8dc721ceb413c"
  },
  "seq": {
    "$numberLong": "156"
  },
  "type": "STDIO",
  "url": "https://github.com/KyrieTangSheng/mcp-server-nationalparks",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "nationalparks",
    "description": "This MCP server implementation integrates with the National Park Service API to provide real-time information on U.S. National Parks, allowing users to find parks, get detailed park information, check alerts, and explore visitor centers, campgrounds, and events; it utilizes the NPS API and expects an NPS API key for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-nationalparks"
    ],
    "env": {
      "NPS_API_KEY": "YOUR_NPS_API_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:52.896Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:13:40.442Z"
  },
  "tags": [
    "national parks",
    "national",
    "parks"
  ]
},
{
  "_id": {
    "$oid": "682896d2a6f8dc721ceb413e"
  },
  "seq": {
    "$numberLong": "157"
  },
  "type": "STDIO",
  "url": "https://github.com/d-zero-dev/mcp-server",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "coding_guidelines",
    "description": "This MCP server implementation provides Figma data retrieval and D-ZERO coding guidelines through an API, and it integrates with CLINE to support AI assistant interactions using the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@d-zero/mcp-server"
    ],
    "env": {
      "FIGMA_ACCESS_TOKEN": "abcd_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:54.588Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:13:43.842Z"
  },
  "tags": [
    "coding guidelines",
    "coding",
    "guidelines"
  ]
},
{
  "_id": {
    "$oid": "682896d3a6f8dc721ceb4140"
  },
  "seq": {
    "$numberLong": "158"
  },
  "type": "STDIO",
  "url": "https://github.com/tmhr1850/backlog-mcp-server",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "backlog",
    "description": "This MCP server facilitates access to the Backlog API, providing functionalities for project and issue management, user information retrieval, and file operations using technologies such as REST and incorporating Backlog-specific authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@tmhr1850/backlog-mcp-server"
    ],
    "env": {
      "BACKLOG_DOMAIN": "your-domain.backlog.com",
      "BACKLOG_API_KEY": "your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:55.210Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:13:47.000Z"
  },
  "tags": [
    "backlog"
  ]
},
{
  "_id": {
    "$oid": "682896d5a6f8dc721ceb4142"
  },
  "seq": {
    "$numberLong": "159"
  },
  "type": "STDIO",
  "url": "https://github.com/SurajAdsul/mcp-server-salesforce",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "salesforce",
    "description": "This MCP server implementation allows Claude to interact with Salesforce using natural language by leveraging the Model Context Protocol (MCP) to query, modify, and manage Salesforce objects and records through both Username/Password and OAuth2 authentication methods.",
    "command": "npx",
    "args": [
      "-y",
      "@surajadsul02/mcp-server-salesforce"
    ],
    "env": {
      "SALESFORCE_INSTANCE_URL": "https://login.salesforce.com",
      "SALESFORCE_USERNAME": "your_username",
      "SALESFORCE_TOKEN": "your_security_token",
      "SALESFORCE_PASSWORD": "your_password"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:57.406Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:13:48.586Z"
  },
  "tags": [
    "salesforce"
  ]
},
{
  "_id": {
    "$oid": "682896d6a6f8dc721ceb4144"
  },
  "seq": {
    "$numberLong": "160"
  },
  "type": "STDIO",
  "url": "https://github.com/yoda-digital/mcp-gitlab-server",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gitlab",
    "description": "The GitLab MCP server implements the Model Context Protocol (MCP) to provide AI assistants with access to GitLab resources via the GitLab API, and supports stdio and Server-Sent Events (SSE) transports for communication.",
    "command": "npx",
    "args": [
      "-y",
      "@yoda.digital/gitlab-mcp-server"
    ],
    "env": {
      "GITLAB_PERSONAL_ACCESS_TOKEN": "your_token_here",
      "GITLAB_API_URL": "https://gitlab.com/api/v4"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:58.064Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:13:51.880Z"
  },
  "tags": [
    "gitlab"
  ]
},
{
  "_id": {
    "$oid": "682896d6a6f8dc721ceb4146"
  },
  "seq": {
    "$numberLong": "161"
  },
  "type": "STDIO",
  "url": "https://github.com/dcSpark/mcp-server-helius",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-helius",
    "description": "This Model Context Protocol (MCP) server provides Claude with access to Solana blockchain data via the Helius API, enabling operations like retrieving wallet balances, fetching blockchain information, and interacting with tokens and NFTs using methods that leverage the Solana JSON RPC API.",
    "command": "npx",
    "args": [
      "@dcspark/mcp-server-helius"
    ],
    "env": {
      "HELIUS_API_KEY": "your-helius-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:01:58.754Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:14:42.039Z"
  },
  "tags": [
    "helius"
  ]
},
{
  "_id": {
    "$oid": "682896d7a6f8dc721ceb4148"
  },
  "seq": {
    "$numberLong": "162"
  },
  "type": "STDIO",
  "url": "https://github.com/cablate/mcp-doc-forge",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "searxng",
    "description": "This Model Context Protocol (MCP) server provides document processing capabilities, including reading DOCX, PDF, TXT, HTML, and CSV files, performing conversions like DOCX to HTML/PDF and HTML to TXT/Markdown, and offering text and HTML processing features through CLI and integrations with platforms like Dive Desktop using JSON configuration.",
    "command": "npx",
    "args": [
      "-y",
      "@cablate/mcp-doc-forge"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:01:59.410Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:14:45.481Z"
  },
  "tags": [
    "searxng"
  ]
},
{
  "_id": {
    "$oid": "682896d8a6f8dc721ceb414a"
  },
  "seq": {
    "$numberLong": "163"
  },
  "type": "STDIO",
  "url": "https://github.com/marcopesani/think-mcp-server",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "think",
    "description": "This MCP server implements Anthropic's 'think' tool, enabling Claude AI models to perform internal reasoning steps during response generation via the Model Context Protocol (MCP); it registers the 'think' tool, logs thinking steps, and communicates with Claude using stdio.",
    "command": "npx",
    "args": [
      "-y",
      "think-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:00.407Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:14:48.555Z"
  },
  "tags": [
    "think"
  ]
},
{
  "_id": {
    "$oid": "682896d9a6f8dc721ceb414c"
  },
  "seq": {
    "$numberLong": "164"
  },
  "type": "STDIO",
  "url": "https://github.com/jinzcdev/markmap-mcp-server",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "markmap",
    "description": "The Markmap MCP Server converts Markdown text to interactive mind maps using the Model Context Protocol (MCP) and the markmap library, supporting features such as zooming and node expansion. It exports mind maps in PNG, JPG, and SVG formats and integrates with tools like Smithery for automated installation.",
    "command": "npx",
    "args": [
      "-y",
      "@jinzcdev/markmap-mcp-server",
      "--output",
      "/path/to/output/directory"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:01.588Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:14:50.099Z"
  },
  "tags": [
    "markmap",
    "mark map",
    "mark",
    "map"
  ]
},
{
  "_id": {
    "$oid": "682896daa6f8dc721ceb414e"
  },
  "seq": {
    "$numberLong": "165"
  },
  "type": "STDIO",
  "url": "https://github.com/cswkim/discogs-mcp-server",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "discogs",
    "description": "This MCP server provides access to the Discogs API using the FastMCP framework, enabling music catalog operations and search functionality through interactions with tools. It communicates using the Model Context Protocol and can be deployed via NPX, local Node, or Docker, requiring a Discogs personal access token for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "discogs-mcp-server"
    ],
    "env": {
      "DISCOGS_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:02.210Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:14:53.381Z"
  },
  "tags": [
    "discogs"
  ]
},
{
  "_id": {
    "$oid": "682896dca6f8dc721ceb4150"
  },
  "seq": {
    "$numberLong": "166"
  },
  "type": "STDIO",
  "url": "https://github.com/hijaz/postmancer",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "postmancer",
    "description": "Postmancer acts as an MCP server, allowing AI assistants to interact with REST APIs by sending HTTP requests, managing API endpoint collections, and handling authentication using methods like Basic, Bearer, API Key, and OAuth2; it integrates with AI assistants such as Claude via configuration files and uses environment variables for configuration.",
    "command": "npx",
    "args": [
      "-y",
      "postmancer"
    ],
    "env": {
      "LOG_LEVEL": "info"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:04.491Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:15:43.755Z"
  },
  "tags": [
    "postmancer",
    "post",
    "mancer"
  ]
},
{
  "_id": {
    "$oid": "682896dfa6f8dc721ceb4152"
  },
  "seq": {
    "$numberLong": "167"
  },
  "type": "STDIO",
  "url": "https://github.com/felores/placid-mcp-server",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "placid",
    "description": "This MCP server implementation integrates with the Placid.app API, allowing users to list Placid templates and generate images and videos using template IDs and dynamic content via HTTP requests with JSON payloads; it requires a Placid API token for authentication.",
    "command": "npx",
    "args": [
      "@felores/placid-mcp-server"
    ],
    "env": {
      "PLACID_API_TOKEN": "your-api-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:07.160Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:15:46.992Z"
  },
  "tags": [
    "placid"
  ]
},
{
  "_id": {
    "$oid": "682896dfa6f8dc721ceb4154"
  },
  "seq": {
    "$numberLong": "168"
  },
  "type": "STDIO",
  "url": "https://github.com/istarwyh/mcpadvisor",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcpadvisor",
    "description": "MCP Advisor implements a discovery and recommendation service for Model Context Protocol (MCP) servers, using natural language queries to locate appropriate tools and leveraging hybrid search strategies with keyword and vector matching across providers like Meilisearch, GetMCP, Compass, and an offline index, and it supports various transport layers, including Stdio, SSE, and REST.",
    "command": "npx",
    "args": [
      "-y",
      "@xiaohui-wang/mcpadvisor"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:07.799Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:15:50.756Z"
  },
  "tags": [
    "advisor"
  ]
},
{
  "_id": {
    "$oid": "682896e0a6f8dc721ceb4156"
  },
  "seq": {
    "$numberLong": "169"
  },
  "type": "STDIO",
  "url": "https://github.com/instructa/mcp-starter",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "my-starter-mcp-stdio",
    "description": "This MCP server implementation provides a basic structure for running local tools with clients like Cursor and Claude, utilizing the MCP standard over stdio and Streamable HTTP protocols, and includes TypeScript support for type safety and Cursor AI integration examples.",
    "command": "npx",
    "args": [
      "my-mcp-server",
      "--stdio"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:08.774Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:15:52.144Z"
  },
  "tags": [
    "my",
    "starter",
    "stdio"
  ]
},
{
  "_id": {
    "$oid": "682896e2a6f8dc721ceb4158"
  },
  "seq": {
    "$numberLong": "170"
  },
  "type": "STDIO",
  "url": "https://github.com/rmarescu/gumroad-mcp",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gumroad",
    "description": "This MCP server implementation enables AI clients like Claude Desktop to interact with the Gumroad API using the Model Context Protocol (MCP); it exposes tools for managing products, sales data, offer codes, and user information via API calls, and it's configured using Node.js and a Gumroad access token.",
    "command": "npx",
    "args": [
      "-y",
      "gumroad-mcp@latest"
    ],
    "env": {
      "GUMROAD_ACCESS_TOKEN": "<YOUR_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:10.158Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:15:54.960Z"
  },
  "tags": [
    "gumroad"
  ]
},
{
  "_id": {
    "$oid": "682896e2a6f8dc721ceb415a"
  },
  "seq": {
    "$numberLong": "171"
  },
  "type": "STDIO",
  "url": "https://github.com/JovanHsu/mcp-neo4j-memory-server",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "graph-memory",
    "description": "This MCP server implementation leverages Neo4j to store and retrieve knowledge graphs representing AI assistant interactions using CRUD operations over entities, relationships, and observations; it is compatible with the Model Context Protocol (MCP) and integrates with Claude via MCP Inspector and custom directives.",
    "command": "npx",
    "args": [
      "-y",
      "@izumisy/mcp-neo4j-memory-server"
    ],
    "env": {
      "NEO4J_USER": "neo4j",
      "NEO4J_DATABASE": "memory",
      "NEO4J_PASSWORD": "password",
      "NEO4J_URI": "neo4j://localhost:7687"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:10.832Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:16:45.546Z"
  },
  "tags": [
    "graph memory",
    "graph",
    "memory"
  ]
},
{
  "_id": {
    "$oid": "682896e3a6f8dc721ceb415c"
  },
  "seq": {
    "$numberLong": "172"
  },
  "type": "STDIO",
  "url": "https://github.com/turlockmike/chess-mcp",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "chess",
    "description": "This MCP server implements a chess analysis assistant for Claude, enabling position evaluation, visual board representation, move analysis, and master database lookups through integration with Stockfish and Node.js, communicating via a configured Claude Desktop client.",
    "command": "npx",
    "args": [
      "chess-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:11.806Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:16:48.603Z"
  },
  "tags": [
    "chess"
  ]
},
{
  "_id": {
    "$oid": "682896e5a6f8dc721ceb415e"
  },
  "seq": {
    "$numberLong": "173"
  },
  "type": "STDIO",
  "url": "https://github.com/pinkpixel-dev/mindbridge-mcp",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mindbridge",
    "description": "MindBridge is a Model Context Protocol (MCP) server that orchestrates Large Language Models (LLMs) from providers such as OpenAI, Anthropic, Google, DeepSeek, OpenRouter, and Ollama, offering an OpenAI-compatible API layer and intelligent routing to facilitate tasks like reasoning and second opinions via tools like `getSecondOpinion`, `listProviders`, and `listReasoningModels`.",
    "command": "npx",
    "args": [
      "-y",
      "@pinkpixel/mindbridge"
    ],
    "env": {
      "DEEPSEEK_API_KEY": "DEEPSEEK_API_KEY_HERE",
      "OPENAI_API_KEY": "OPENAI_API_KEY_HERE",
      "OPENROUTER_API_KEY": "OPENROUTER_API_KEY_HERE",
      "GOOGLE_API_KEY": "GOOGLE_API_KEY_HERE",
      "ANTHROPIC_API_KEY": "ANTHROPIC_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:13.064Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:16:52.360Z"
  },
  "tags": [
    "mindbridge",
    "mind",
    "bridge"
  ]
},
{
  "_id": {
    "$oid": "682896e5a6f8dc721ceb4160"
  },
  "seq": {
    "$numberLong": "174"
  },
  "type": "STDIO",
  "url": "https://github.com/JavaProgrammerLB/zoom-mcp-server",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "zoom-mcp-server",
    "description": "This MCP server implementation manages Zoom meetings through conversational commands; it uses the Zoom API with Server-to-Server OAuth authentication and integrates with tools like VS Code for configuration.",
    "command": "npx",
    "args": [
      "-y",
      "@yitianyigexiangfa/zoom-mcp-server@latest"
    ],
    "env": {
      "ZOOM_ACCOUNT_ID": "${ZOOM_ACCOUNT_ID}",
      "ZOOM_CLIENT_SECRET": "${ZOOM_CLIENT_SECRET}",
      "ZOOM_CLIENT_ID": "${ZOOM_CLIENT_ID}"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:13.989Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:16:53.874Z"
  },
  "tags": [
    "zoom",
    "zoom"
  ]
},
{
  "_id": {
    "$oid": "682896e7a6f8dc721ceb4162"
  },
  "seq": {
    "$numberLong": "175"
  },
  "type": "STDIO",
  "url": "https://github.com/kadykov/mcp-openapi-schema-explorer",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "My API Spec (npx)",
    "description": "This MCP server provides token-efficient exploration of OpenAPI (v3.0) and Swagger (v2.0, converted to v3.0) specifications via MCP Resources, accessible through local file paths or HTTP/HTTPS URLs, and supports output in JSON, YAML, or minified JSON.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-openapi-schema-explorer@latest",
      "<path-or-url-to-spec>",
      "--output-format",
      "yaml"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:15.944Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:16:56.608Z"
  },
  "tags": [
    "my api spec (npx)",
    "my",
    "api",
    "spec",
    "npx"
  ]
},
{
  "_id": {
    "$oid": "682896e8a6f8dc721ceb4164"
  },
  "seq": {
    "$numberLong": "176"
  },
  "type": "STDIO",
  "url": "https://github.com/kw510/strava-mcp",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "strava",
    "description": "This MCP server, deployed on Cloudflare Workers, integrates with Strava OAuth to authenticate users for remote MCP connections; it leverages the `workers-oauth-provider` library for OAuth 2.1 and uses Server-Sent Events (SSE) for communication between the client and server.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "https://mcp-strava-oauth.<your-subdomain>.workers.dev/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:16.614Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:17:47.158Z"
  },
  "tags": [
    "strava"
  ]
},
{
  "_id": {
    "$oid": "682896eba6f8dc721ceb4166"
  },
  "seq": {
    "$numberLong": "177"
  },
  "type": "STDIO",
  "url": "https://github.com/zueai/vercel-api-mcp",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "vercel",
    "description": "This MCP server implements a Vercel API client, offering tools to manage deployments, DNS records, domains, projects, and environment variables via npx. It integrates with Cursor and Windsurf to provide Vercel functionality within those IDEs.",
    "command": "npx",
    "args": [
      "vercel-mcp VERCEL_API_KEY=<YOUR_API_KEY>"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:19.023Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:17:50.146Z"
  },
  "tags": [
    "vercel"
  ]
},
{
  "_id": {
    "$oid": "682896eca6f8dc721ceb4168"
  },
  "seq": {
    "$numberLong": "178"
  },
  "type": "STDIO",
  "url": "https://github.com/orellazri/coda-mcp",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "coda",
    "description": "This MCP server implements a bridge for AI clients to interact with the Coda API over standard input/output, enabling actions such as listing, creating, reading, updating, duplicating, and renaming pages within a specified Coda document using markdown content; it utilizes environment variables for API key and document ID configuration.",
    "command": "npx",
    "args": [
      "-y",
      "coda-mcp@latest"
    ],
    "env": {
      "DOC_ID": "...",
      "API_KEY": "..."
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:20.056Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:17:54.046Z"
  },
  "tags": [
    "coda"
  ]
},
{
  "_id": {
    "$oid": "682896efa6f8dc721ceb416a"
  },
  "seq": {
    "$numberLong": "179"
  },
  "type": "STDIO",
  "url": "https://github.com/awesimon/elasticsearch-mcp",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "elasticsearch-mcp",
    "description": "This Elasticsearch MCP server implementation connects MCP Clients to Elasticsearch clusters using the Model Context Protocol, enabling natural language interaction with Elasticsearch data; it provides features such as cluster management, index and mapping operations, search, and template management, utilizing the Elasticsearch API for data interaction.",
    "command": "npx",
    "args": [
      "-y",
      "@awesome-ai/elasticsearch-mcp"
    ],
    "env": {
      "ES_HOST": "your-elasticsearch-host",
      "ES_API_KEY": "your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:23.787Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:17:55.595Z"
  },
  "tags": [
    "elasticsearch",
    "elastic search",
    "elastic",
    "search"
  ]
},
{
  "_id": {
    "$oid": "682896f1a6f8dc721ceb416c"
  },
  "seq": {
    "$numberLong": "180"
  },
  "type": "STDIO",
  "url": "https://github.com/Nazruden/clickup-mcp-server",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "clickup",
    "description": "This MCP server enables AI assistants to interact with ClickUp by exposing tools for managing tasks, teams, boards, spaces, folders, custom fields, docs, and views through the ClickUp API using Stdio for communication with the MCP client, authenticating using a personal API token.",
    "command": "npx",
    "args": [
      "@nazruden/clickup-server"
    ],
    "env": {
      "CLICKUP_PERSONAL_TOKEN": "your_personal_api_token_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:25.070Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:17:58.206Z"
  },
  "tags": [
    "clickup"
  ]
},
{
  "_id": {
    "$oid": "682896f2a6f8dc721ceb416e"
  },
  "seq": {
    "$numberLong": "181"
  },
  "type": "STDIO",
  "url": "https://github.com/amir-bengherbi/shopify-mcp-server",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "shopify",
    "description": "This MCP server implements a Shopify API interface, enabling management of products, customers, and orders through a GraphQL API integration; it leverages the `@modelcontextprotocol/sdk` for MCP compliance, `graphql-request` for Shopify interaction, and `zod` for data validation.",
    "command": "npx",
    "args": [
      "-y",
      "shopify-mcp-server"
    ],
    "env": {
      "MYSHOPIFY_DOMAIN": "<YOUR_SHOP>.myshopify.com",
      "SHOPIFY_ACCESS_TOKEN": "<YOUR_ACCESS_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:26.281Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:18:48.578Z"
  },
  "tags": [
    "shopify"
  ]
},
{
  "_id": {
    "$oid": "682896f2a6f8dc721ceb4170"
  },
  "seq": {
    "$numberLong": "182"
  },
  "type": "STDIO",
  "url": "https://github.com/nsxdavid/clickup-mcp-server",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "clickup",
    "description": "This MCP server implementation provides a standardized interface for AI assistants to interact with the ClickUp API using the Model Context Protocol; it leverages Node.js and the ClickUp API to manage workspaces, spaces, tasks, docs, lists, folders, comments and checklists within ClickUp.",
    "command": "npx",
    "args": [
      "-y",
      "clickup-mcp-server"
    ],
    "env": {
      "CLICKUP_API_TOKEN": "YOUR_API_TOKEN_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:26.937Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:18:51.660Z"
  },
  "tags": [
    "clickup"
  ]
},
{
  "_id": {
    "$oid": "682896f3a6f8dc721ceb4172"
  },
  "seq": {
    "$numberLong": "183"
  },
  "type": "STDIO",
  "url": "https://github.com/magarcia/mcp-server-giphy",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "giphy",
    "description": "The MCP Server Giphy provides an interface for AI models to access the Giphy API using HTTP requests, enabling search, random GIF retrieval, and trending GIF retrieval with content filtering and comprehensive metadata; it integrates with Claude Desktop via Smithery and requires a Giphy API key for operation.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-giphy"
    ],
    "env": {
      "GIPHY_API_KEY": "<YOUR_API_KEY>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:27.548Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:18:55.704Z"
  },
  "tags": [
    "giphy"
  ]
},
{
  "_id": {
    "$oid": "682896f4a6f8dc721ceb4174"
  },
  "seq": {
    "$numberLong": "184"
  },
  "type": "STDIO",
  "url": "https://github.com/QiYuOr2/anitabi-mcp-server",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "anitabi-mcp-server",
    "description": "The anitabi-mcp-server implements a Media Control Protocol (MCP) server. It integrates with the anitabi platform, likely providing media control functionalities for its services using Node.js.",
    "command": "npx",
    "args": [
      "-y",
      "@qiyuor2/anitabi-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:28.536Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:18:57.104Z"
  },
  "tags": [
    "anitabi",
    "anitabi mcp server"
  ]
},
{
  "_id": {
    "$oid": "682896f6a6f8dc721ceb4176"
  },
  "seq": {
    "$numberLong": "185"
  },
  "type": "STDIO",
  "url": "https://github.com/ryanmac/agent-twitter-client-mcp",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "agent-twitter-client-mcp",
    "description": "This Model Context Protocol (MCP) server enables AI models to interact with Twitter via the `agent-twitter-client` package, supporting operations like fetching tweets, posting content, managing user profiles, and integrating with Grok AI; it authenticates using cookies, username/password, or Twitter API credentials and communicates over HTTP.",
    "command": "npx",
    "args": [
      "-y",
      "agent-twitter-client-mcp"
    ],
    "env": {
      "TWITTER_COOKIES": "[\"auth_token=YOUR_AUTH_TOKEN; Domain=.twitter.com\", \"ct0=YOUR_CT0_VALUE; Domain=.twitter.com\", \"twid=u%3DYOUR_USER_ID; Domain=.twitter.com\"]",
      "AUTH_METHOD": "cookies"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:30.085Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:19:00.437Z"
  },
  "tags": [
    "agent",
    "twitter",
    "client",
    "agent twitter client",
    "twitter client"
  ]
},
{
  "_id": {
    "$oid": "682896f7a6f8dc721ceb4178"
  },
  "seq": {
    "$numberLong": "186"
  },
  "type": "STDIO",
  "url": "https://github.com/microsoft/clarity-mcp-server",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "@microsoft/clarity-mcp-server",
    "description": "This MCP server implements the Microsoft Clarity data export API, enabling users to retrieve Clarity analytics data through MCP-compatible clients like Claude for Desktop; it filters data by up to three dimensions and retrieves specified metrics using a provided Clarity API token.",
    "command": "npx",
    "args": [
      "@microsoft/clarity-mcp-server",
      "--clarity_api_token=your-api-token-here"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:31.036Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:19:50.297Z"
  },
  "tags": [
    "microsoft",
    "clarity",
    "microsoft clarity"
  ]
},
{
  "_id": {
    "$oid": "682896f8a6f8dc721ceb417a"
  },
  "seq": {
    "$numberLong": "187"
  },
  "type": "STDIO",
  "url": "https://github.com/f-inc/containerinc-mcp",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "@container-inc/mcp",
    "description": "This MCP server implementation deploys applications to Container Inc. by creating a repository (if needed), publishing a Docker image to ghcr.io after building from a Dockerfile, and authenticating users via GitHub for code access.",
    "command": "npx",
    "args": [
      "@container-inc/mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:32.265Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:19:53.428Z"
  },
  "tags": [
    "container inc",
    "container",
    "inc",
    "container-inc"
  ]
},
{
  "_id": {
    "$oid": "682896f9a6f8dc721ceb417c"
  },
  "seq": {
    "$numberLong": "188"
  },
  "type": "STDIO",
  "url": "https://github.com/cuongtl1992/unleash-mcp",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "unleash",
    "description": "This Unleash MCP server implements the Model Context Protocol, allowing LLM applications to interact with the Unleash feature toggle system via HTTP/SSE and STDIO; it enables checking, creating, updating, and listing feature flags and projects, communicating with the Unleash API.",
    "command": "npx",
    "args": [
      "-y",
      "unleash-mcp"
    ],
    "env": {
      "UNLEASH_API_TOKEN": "YOUR_UNLEASH_API_TOKEN",
      "UNLEASH_URL": "YOUR_UNLEASH_END_POINT",
      "MCP_TRANSPORT": "stdio"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:33.550Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:19:57.204Z"
  },
  "tags": [
    "unleash"
  ]
},
{
  "_id": {
    "$oid": "682896fba6f8dc721ceb417e"
  },
  "seq": {
    "$numberLong": "189"
  },
  "type": "STDIO",
  "url": "https://github.com/alexbakers/mcp-ipfs",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ipfs",
    "description": "This Node.js server implements the Model Context Protocol (MCP) to enable interaction with storacha.network using the `@web3-storage/w3cli` command-line interface; it exposes MCP tools that wrap `w3` commands for managing spaces, uploading data, handling delegations, and performing other tasks on the network.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-ipfs"
    ],
    "env": {
      "W3_LOGIN_EMAIL": "your-email@example.com"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:35.097Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:19:58.841Z"
  },
  "tags": [
    "ipfs"
  ]
},
{
  "_id": {
    "$oid": "682896fba6f8dc721ceb4180"
  },
  "seq": {
    "$numberLong": "190"
  },
  "type": "STDIO",
  "url": "https://github.com/j3k0/mcp-google-workspace",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-google-workspace",
    "description": "This MCP server implements tools using Node.js to interact with Google Workspace, including Gmail and Google Calendar, via the Model Context Protocol, supporting features like email querying, calendar event management, and multiple Google account integration through OAuth 2.0 authentication.",
    "command": "npx",
    "args": [
      "mcp-google-workspace"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:35.763Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:20:01.967Z"
  },
  "tags": [
    "google workspace",
    "google",
    "workspace"
  ]
},
{
  "_id": {
    "$oid": "682896fda6f8dc721ceb4182"
  },
  "seq": {
    "$numberLong": "191"
  },
  "type": "STDIO",
  "url": "https://github.com/Saml1211/PRD-MCP-Server",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "prd-creator",
    "description": "This MCP server implements the Model Context Protocol to generate and validate Product Requirements Documents using AI providers like OpenAI, Google Gemini, and Anthropic Claude, as well as template-based generation; it supports dynamic provider configuration updates and integrates with tools like Claude Desktop, Glama.ai, Cursor, Roo Code, and Cline.",
    "command": "npx",
    "args": [
      "-y",
      "prd-creator-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:37.214Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:20:51.873Z"
  },
  "tags": [
    "prd creator",
    "prd",
    "creator"
  ]
},
{
  "_id": {
    "$oid": "682896fda6f8dc721ceb4184"
  },
  "seq": {
    "$numberLong": "192"
  },
  "type": "STDIO",
  "url": "https://github.com/suhail-ak-s/mcp-typesense-server",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "typesense",
    "description": "This Typesense MCP server implementation enables Large Language Models to discover, search, and analyze data within Typesense collections via the Model Context Protocol, providing tools for querying, retrieving documents, and analyzing collection statistics, accessible through `typesense://` URIs.",
    "command": "npx",
    "args": [
      "-y",
      "typesense-mcp-server",
      "--host",
      "your-typesense-host",
      "--port",
      "8108",
      "--protocol",
      "http",
      "--api-key",
      "your-api-key"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:37.854Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:20:54.974Z"
  },
  "tags": [
    "typesense"
  ]
},
{
  "_id": {
    "$oid": "682896ffa6f8dc721ceb4186"
  },
  "seq": {
    "$numberLong": "193"
  },
  "type": "STDIO",
  "url": "https://github.com/samuraikun/aws-s3-mcp",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "s3",
    "description": "This Amazon S3 Model Context Protocol (MCP) server, built with TypeScript and the MCP SDK, enables Large Language Models like Claude to interact with AWS S3 by listing buckets, listing objects within buckets, and retrieving object contents using the AWS SDK for JavaScript.",
    "command": "npx",
    "args": [
      "aws-s3-mcp"
    ],
    "env": {
      "S3_BUCKETS": "bucket1,bucket2,bucket3",
      "S3_MAX_BUCKETS": "5",
      "AWS_REGION": "us-east-1",
      "AWS_ACCESS_KEY_ID": "your-access-key",
      "AWS_SECRET_ACCESS_KEY": "your-secret-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:39.207Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:20:58.754Z"
  },
  "tags": [
    "s3"
  ]
},
{
  "_id": {
    "$oid": "68289701a6f8dc721ceb4188"
  },
  "seq": {
    "$numberLong": "194"
  },
  "type": "STDIO",
  "url": "https://github.com/lmcc-dev/mult-fetch-mcp-server",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mult-fetch-mcp-server",
    "description": "This MCP server implementation, built with TypeScript and utilizing the Model Context Protocol SDK, provides web scraping functionalities via Stdio transport and offers tools to fetch HTML, JSON, text, and Markdown content; it intelligently switches between standard requests and browser-based fetching, manages content size through chunking, and supports proxy configurations and internationalization.",
    "command": "npx",
    "args": [
      "@lmcc-dev/mult-fetch-mcp-server"
    ],
    "env": {
      "MCP_LANG": "en"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:41.420Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:21:00.750Z"
  },
  "tags": [
    "mult fetch",
    "mult",
    "fetch"
  ]
},
{
  "_id": {
    "$oid": "68289702a6f8dc721ceb418a"
  },
  "seq": {
    "$numberLong": "195"
  },
  "type": "STDIO",
  "url": "https://github.com/xiaok/etherscan-mcp",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "my-mcp-server",
    "description": "This MCP server acts as a dynamic interface to Etherscan's API, enabling interaction with blockchain data and services using the Model Context Protocol (MCP). It supports various Ethereum-based chains, querying endpoints defined in the Etherscan API documentation.",
    "command": "npx",
    "args": [
      "tsx",
      "/PATH/TO/YOUR_PROJECT/src/index.ts"
    ],
    "env": {
      "ETHERSCAN_API_KEY": "********"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:42.085Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:21:03.475Z"
  },
  "tags": [
    "my",
    "my mcp server"
  ]
},
{
  "_id": {
    "$oid": "68289702a6f8dc721ceb418c"
  },
  "seq": {
    "$numberLong": "196"
  },
  "type": "STDIO",
  "url": "https://github.com/tadasant/mcp-server-ssh-rails-runner",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ssh-rails-runner",
    "description": "This MCP server implements a secure SSH-based interface for executing Rails console commands remotely, utilizing a prepare-and-execute workflow with tools for read-only operations and controlled mutations, leveraging SSH for secure communication and file URIs for code snippet management.",
    "command": "npx",
    "args": [
      "mcp-server-ssh-rails-runner"
    ],
    "env": {
      "SSH_USER": "your_ssh_user",
      "PROJECT_NAME_AS_CONTEXT": "Name that shows up in tool descriptions to help the LLM describe what kind of Rails project we're working with.",
      "SSH_PRIVATE_KEY_PATH": "your_SSH_PRIVATE_KEY_PATH",
      "RAILS_WORKING_DIR": "/path/to/rails/app/root",
      "CODE_SNIPPET_FILE_DIRECTORY": "/path/to/store/code/snippets/locally",
      "SSH_HOST": "your.remote.host"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:42.707Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:21:53.759Z"
  },
  "tags": [
    "ssh",
    "rails",
    "runner",
    "ssh rails runner",
    "rails runner"
  ]
},
{
  "_id": {
    "$oid": "68289703a6f8dc721ceb418e"
  },
  "seq": {
    "$numberLong": "197"
  },
  "type": "STDIO",
  "url": "https://github.com/buhe/mcp_rss",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "The MCP RSS server fetches and manages content from RSS feeds based on user-defined subscriptions from OPML files, exposing this content through a Model Context Protocol (MCP) API; it utilizes Node.js and a MySQL database to provide functionalities for retrieving, filtering, and favoriting articles via stdio communication.",
    "command": "npx",
    "args": [
      "mcp_rss"
    ],
    "env": {
      "OPML_FILE_PATH": "/Users/guyanhua/feeds.opml"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:43.382Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:21:56.538Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "68289705a6f8dc721ceb4190"
  },
  "seq": {
    "$numberLong": "198"
  },
  "type": "STDIO",
  "url": "https://github.com/gabrielmaialva33/mcp-filesystem",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "filesystem",
    "description": "The MCP Filesystem Server, built with TypeScript and Node.js, provides secure, validated filesystem access within predefined directories using the Model Context Protocol and its TypeScript SDK; it supports operations like file manipulation, directory management, and system command execution, and can be deployed via Docker.",
    "command": "npx",
    "args": [
      "-y",
      "@gabrielmaialva33/mcp-filesystem",
      "/Users/username/Desktop",
      "/path/to/other/allowed/dir"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:45.347Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:22:09.578Z"
  },
  "tags": [
    "filesystem",
    "file system",
    "file",
    "system"
  ]
},
{
  "_id": {
    "$oid": "68289708a6f8dc721ceb4192"
  },
  "seq": {
    "$numberLong": "199"
  },
  "type": "STDIO",
  "url": "https://github.com/EyevinnOSC/mcp-server",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "local-mcp-osc",
    "description": "This MCP server provides local MCP tools for the Eyevinn Open Source Cloud, enabling file uploads to MinIO storage buckets within OSC; it integrates with Claude Desktop using `npx` and interacts with the OSC using a personal access token for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@osaas/mcp-server"
    ],
    "env": {
      "OSC_ACCESS_TOKEN": "<YOUR_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:48.772Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:22:11.137Z"
  },
  "tags": [
    "local",
    "osc",
    "local osc"
  ]
},
{
  "_id": {
    "$oid": "68289709a6f8dc721ceb4194"
  },
  "seq": {
    "$numberLong": "200"
  },
  "type": "STDIO",
  "url": "https://github.com/Vizioz/Teamwork-MCP",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "This MCP server implementation connects to the Teamwork API via RESTful endpoints, enabling retrieval and manipulation of Teamwork projects, tasks, companies, people, time entries, and reports using Node.js and integrates with applications like Cursor through standard input/output.",
    "command": "npx",
    "args": [
      "-y",
      "@vizioz/teamwork-mcp",
      "--domain",
      "yourdomain",
      "--user",
      "youruser@yourdomain.com",
      "--pass",
      "yourPassword"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:02:49.885Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:22:12.712Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "6828970aa6f8dc721ceb4196"
  },
  "seq": {
    "$numberLong": "201"
  },
  "type": "STDIO",
  "url": "https://github.com/morinokami/mcp-server-bluesky",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "bluesky",
    "description": "This MCP server implementation facilitates interaction with the Bluesky social network via command-line tools; it uses the AT Protocol to provide functionalities such as retrieving user profiles and timelines, managing follows and posts, searching, liking, and reposting content.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-bluesky"
    ],
    "env": {
      "BLUESKY_USERNAME": "username",
      "BLUESKY_PASSWORD": "password",
      "BLUESKY_PDS_URL": "https://bsky.social"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:50.546Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:22:55.392Z"
  },
  "tags": [
    "bluesky",
    "blue sky"
  ]
},
{
  "_id": {
    "$oid": "6828970ba6f8dc721ceb4198"
  },
  "seq": {
    "$numberLong": "202"
  },
  "type": "STDIO",
  "url": "https://github.com/ivelin-web/tempo-mcp-server",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "Jira_Tempo",
    "description": "This MCP server manages Tempo worklogs within Jira by providing tools to create, retrieve, edit, and delete worklogs through Tempo's API; it integrates with MCP-compatible clients such as Claude and Cursor, leveraging Node.js and requiring Jira and Tempo API tokens for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@ivelin-web/tempo-mcp-server"
    ],
    "env": {
      "JIRA_BASE_URL": "https://your-org.atlassian.net",
      "JIRA_API_TOKEN": "your_jira_api_token_here",
      "JIRA_EMAIL": "your_email@example.com",
      "TEMPO_API_TOKEN": "your_tempo_api_token_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:51.272Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:22:58.094Z"
  },
  "tags": [
    "jira tempo",
    "jira",
    "tempo"
  ]
},
{
  "_id": {
    "$oid": "6828970da6f8dc721ceb419a"
  },
  "seq": {
    "$numberLong": "203"
  },
  "type": "STDIO",
  "url": "https://github.com/Shawyeok/mcp-dingding-bot",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gitlab",
    "description": "This MCP server implements a DingDing Bot API, enabling users to send text or markdown messages to DingDing groups using the DingTalk protocol; it integrates with Claude Desktop and can be deployed via Docker or NPX, utilizing environment variables for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-dingding-bot"
    ],
    "env": {
      "DINGTALK_BOT_SECRET": "<YOUR_SECRET>",
      "DINGTALK_BOT_ACCESS_TOKEN": "<YOUR_ACCESS_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:53.238Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:23:10.985Z"
  },
  "tags": [
    "gitlab"
  ]
},
{
  "_id": {
    "$oid": "6828970ea6f8dc721ceb419c"
  },
  "seq": {
    "$numberLong": "204"
  },
  "type": "STDIO",
  "url": "https://github.com/bun913/mcp-testrail",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "testrail",
    "description": "This MCP server implements the TestRail API, allowing MCP clients like Claude AI and Cursor to manage TestRail projects, suites, cases, runs, tests, results, plans, milestones, and shared steps via HTTP requests; it uses environment variables for authentication and configuration.",
    "command": "npx",
    "args": [
      "@bun913/mcp-testrail@latest"
    ],
    "env": {
      "TESTRAIL_URL": "https://your-instance.testrail.io",
      "TESTRAIL_USERNAME": "your-email@example.com",
      "TESTRAIL_API_KEY": "YOUR_API_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:02:54.794Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:23:12.534Z"
  },
  "tags": [
    "testrail",
    "test rail",
    "test",
    "rail"
  ]
},
{
  "_id": {
    "$oid": "68289715a6f8dc721ceb419e"
  },
  "seq": {
    "$numberLong": "205"
  },
  "type": "STDIO",
  "url": "https://github.com/iamsrikanthnani/mcp-boilerplate",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server",
    "description": "This MCP server implementation provides a boilerplate for connecting AI models to data sources and tools using the Model Context Protocol with Server-Sent Events (SSE); it features API key authentication, session management, logging, and includes an example calculator tool.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "http://localhost:4005/sse?API_KEY={{your_api_key_here}}"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:03:01.318Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:23:14.224Z"
  },
  "tags": [
    "mcp-server"
  ]
},
{
  "_id": {
    "$oid": "68289716a6f8dc721ceb41a0"
  },
  "seq": {
    "$numberLong": "206"
  },
  "type": "STDIO",
  "url": "https://github.com/normal-coder/gitee-mcp-server",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "Gitee",
    "description": "The Gitee MCP server implementation allows AI agents to interact with Gitee repositories, issues, and pull requests using the Model Context Protocol (MCP); it leverages the Gitee API and requires a personal access token for authentication, and can be run via NPX or Docker.",
    "command": "npx",
    "args": [
      "-y",
      "gitee-mcp-server"
    ],
    "env": {
      "GITEE_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:02.588Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:23:57.136Z"
  },
  "tags": [
    "gitee"
  ]
},
{
  "_id": {
    "$oid": "68289719a6f8dc721ceb41a2"
  },
  "seq": {
    "$numberLong": "207"
  },
  "type": "STDIO",
  "url": "https://github.com/spences10/mcp-turso-cloud",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-turso-cloud",
    "description": "This MCP server enables LLMs to interact with Turso databases using a two-level authentication system, supporting organization-level operations like database creation and deletion, and database-level operations such as executing SQL queries (including vector search via SQLite extensions) through distinct `execute_read_only_query` and `execute_query` endpoints.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-turso-cloud"
    ],
    "env": {
      "TURSO_ORGANIZATION": "your-organization-name",
      "TURSO_DEFAULT_DATABASE": "optional-default-database",
      "TURSO_API_TOKEN": "your-turso-api-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:05.138Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:23:59.878Z"
  },
  "tags": [
    "turso cloud",
    "turso",
    "cloud"
  ]
},
{
  "_id": {
    "$oid": "6828971aa6f8dc721ceb41a4"
  },
  "seq": {
    "$numberLong": "208"
  },
  "type": "STDIO",
  "url": "https://github.com/directus/mcp",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "directus",
    "description": "The Directus Content MCP Server implements the Model Context Protocol to connect Directus CMS with AI tools like Claude and Cursor, enabling users to interact with Directus content using natural language; it communicates using HTTP and supports authentication via Directus tokens or email/password credentials.",
    "command": "npx",
    "args": [
      "@directus/content-mcp@latest"
    ],
    "env": {
      "DIRECTUS_URL": "https://your-directus-url.com",
      "DIRECTUS_TOKEN": "your-directus-token>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:06.512Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:24:12.857Z"
  },
  "tags": [
    "directus"
  ]
},
{
  "_id": {
    "$oid": "6828971ba6f8dc721ceb41a6"
  },
  "seq": {
    "$numberLong": "209"
  },
  "type": "STDIO",
  "url": "https://github.com/flight505/mcp-think-tank",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "think-tank",
    "description": "MCP Think Tank is an MCP server that enhances AI assistants by providing structured reasoning via a 'think' tool, persistent memory using a knowledge graph, and intelligent tool orchestration with safeguards; it integrates with Exa for web research and supports clients like Cursor and Claude @Web, communicating over streamable HTTP or TCP and leveraging environment variables for configuration.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-think-tank@2.0.7"
    ],
    "env": {
      "CACHE_CONTENT": "true",
      "EXA_API_KEY": "your-exa-api-key-here",
      "MEMORY_PATH": "./project-memory.jsonl",
      "AUTO_LINK": "true",
      "CONTENT_CACHE_SIZE": "100",
      "TOOL_LIMIT": "50",
      "MCP_DEBUG": "false"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:07.279Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:24:15.174Z"
  },
  "tags": [
    "think tank",
    "think",
    "tank"
  ]
},
{
  "_id": {
    "$oid": "6828971ea6f8dc721ceb41a8"
  },
  "seq": {
    "$numberLong": "210"
  },
  "type": "STDIO",
  "url": "https://github.com/noboru-i/nature-remo-mcp-server",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "github",
    "description": "This MCP server implements the Model Context Protocol to interface with the Nature Remo API, enabling management and automation of Nature Remo devices through tools for listing devices/appliances and operating TVs and air conditioners; it is configured via command-line execution using `npx` and relies on an `ACCESS_TOKEN` environment variable for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "noboru-i/nature-remo-mcp-server"
    ],
    "env": {
      "ACCESS_TOKEN": "<YOUR_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:10.603Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:24:16.742Z"
  },
  "tags": [
    "github"
  ]
},
{
  "_id": {
    "$oid": "68289722a6f8dc721ceb41aa"
  },
  "seq": {
    "$numberLong": "211"
  },
  "type": "STDIO",
  "url": "https://github.com/twodoorsdev/react-native-debugger-mcp",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "react-native-debugger-mcp",
    "description": "This MCP server implementation retrieves console logs from a React Native application by integrating with the Metro bundler, and it is designed to be configured within Claude Desktop or Cursor using a specified command and arguments.",
    "command": "npx",
    "args": [
      "-y",
      "@twodoorsdev/react-native-debugger-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:03:14.248Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:24:58.735Z"
  },
  "tags": [
    "react native debugger",
    "react",
    "native",
    "debugger",
    "react-native-debugger"
  ]
},
{
  "_id": {
    "$oid": "68289724a6f8dc721ceb41ac"
  },
  "seq": {
    "$numberLong": "212"
  },
  "type": "STDIO",
  "url": "https://github.com/kiwamizamurai/mcp-kibela-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "kibela",
    "description": "This MCP server implements an integration with the Kibela API, enabling Large Language Models to interact with Kibela content via search, content retrieval, and management features like liking notes and managing groups using HTTP protocol and JSON data format.",
    "command": "npx",
    "args": [
      "-y",
      "@kiwamizamurai/mcp-kibela-server"
    ],
    "env": {
      "KIBELA_TOKEN": "YOUR_TOKEN",
      "KIBELA_TEAM": "YOUR_TEAM_NAME"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:16.832Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:42:06.013Z"
  },
  "tags": [
    "kibela"
  ]
},
{
  "_id": {
    "$oid": "68289725a6f8dc721ceb41ae"
  },
  "seq": {
    "$numberLong": "213"
  },
  "type": "STDIO",
  "url": "https://github.com/binalyze/air-mcp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "air-mcp",
    "description": "This Node.js server implements the Model Context Protocol (MCP) to enable natural language interaction with Binalyze AIR, providing access to digital forensics and incident response capabilities, and it integrates with various platforms like Claude, Cursor, Smithery, and VSCode to manage assets, tasks, acquisitions, cases, policies, and repositories.",
    "command": "npx",
    "args": [
      "-y",
      "@binalyze/air-mcp"
    ],
    "env": {
      "AIR_HOST": "your-api-host.com",
      "AIR_API_TOKEN": "your-api-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:17.886Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:25:14.591Z"
  },
  "tags": [
    "air",
    "air"
  ]
},
{
  "_id": {
    "$oid": "68289726a6f8dc721ceb41b0"
  },
  "seq": {
    "$numberLong": "214"
  },
  "type": "STDIO",
  "url": "https://github.com/gregce/adwords-mcp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "adwords",
    "description": "Adwords MCP is a Model Context Protocol (MCP) server that injects advertisements into LLM responses via STDIO or HTTP/SSE transport, using naive keyword extraction to target ads and supporting configurable options and tool aliases for easy invocation with clients like Cursor and Claude.",
    "command": "npx",
    "args": [
      "adwords-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:03:18.533Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:25:16.842Z"
  },
  "tags": [
    "adwords"
  ]
},
{
  "_id": {
    "$oid": "68289727a6f8dc721ceb41b2"
  },
  "seq": {
    "$numberLong": "215"
  },
  "type": "STDIO",
  "url": "https://github.com/srobbin/opengov-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "opengov",
    "description": "This MCP server provides Claude Desktop with access to Socrata Open Data APIs, enabling search, retrieval, and analysis of public datasets using the `get_data` tool and SQL-like queries; it supports configuration via the DATA_PORTAL_URL environment variable and leverages HTTP for communication with Socrata data portals.",
    "command": "npx",
    "args": [
      "-y",
      "opengov-mcp-server@latest"
    ],
    "env": {
      "DATA_PORTAL_URL": "https://data.cityofchicago.org"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:19.466Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:25:18.637Z"
  },
  "tags": [
    "opengov",
    "open gov",
    "open",
    "gov"
  ]
},
{
  "_id": {
    "$oid": "68289728a6f8dc721ceb41b4"
  },
  "seq": {
    "$numberLong": "216"
  },
  "type": "STDIO",
  "url": "https://github.com/bitrefill/bitrefill-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "bitrefill",
    "description": "This MCP server, written in TypeScript, provides access to Bitrefill services by implementing the Model Context Protocol over stdio; it uses the Bitrefill API to enable AI assistants to search for products, retrieve product details, and create invoices using tools such as `search`, `detail`, and `create_invoice`.",
    "command": "npx",
    "args": [
      "-y",
      "bitrefill-mcp-server"
    ],
    "env": {
      "BITREFILL_API_SECRET": "your_api_key_here",
      "BITREFILL_API_ID": "your_api_id_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:20.249Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:26:00.295Z"
  },
  "tags": [
    "bitrefill"
  ]
},
{
  "_id": {
    "$oid": "6828972aa6f8dc721ceb41b6"
  },
  "seq": {
    "$numberLong": "217"
  },
  "type": "STDIO",
  "url": "https://github.com/serkan-ozal/jaeger-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "jaeger-mcp-server",
    "description": "The Jaeger MCP Server provides an implementation that communicates with a Jaeger instance via its HTTP or gRPC API to retrieve services, operations, and traces; it then exposes these capabilities to MCP clients like VS Code using the STDIO transport protocol and supporting tools such as `get-operations`, `get-services`, `get-trace`, and `find-traces`.",
    "command": "npx",
    "args": [
      "-y",
      "jaeger-mcp-server"
    ],
    "env": {
      "JAEGER_URL": "<YOUR_JAEGER_HTTP_OR_GRPC_API_URL>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:22.821Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:26:03.464Z"
  },
  "tags": [
    "jaeger",
    "jaeger"
  ]
},
{
  "_id": {
    "$oid": "6828972ba6f8dc721ceb41b8"
  },
  "seq": {
    "$numberLong": "218"
  },
  "type": "STDIO",
  "url": "https://github.com/doitintl/doit-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "doit_mcp_server",
    "description": "The DoiT MCP Server enables LLMs such as Claude and Cursor to access the DoiT API using the Model Context Protocol (MCP) to retrieve cloud incidents, anomalies, reports, and other cloud analytics data; it utilizes Node.js and requires a DoiT API key for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@doitintl/doit-mcp-server@latest"
    ],
    "env": {
      "DOIT_API_KEY": "your_doit_api_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:23.600Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:26:16.241Z"
  },
  "tags": [
    "doit",
    "doit"
  ]
},
{
  "_id": {
    "$oid": "6828972da6f8dc721ceb41ba"
  },
  "seq": {
    "$numberLong": "219"
  },
  "type": "STDIO",
  "url": "https://github.com/r-huijts/mcp-server-tester",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "filesystem",
    "description": "The MCP Server Tester automates the validation and benchmarking of Model Context Protocol (MCP) servers by leveraging Claude AI to generate test cases and executes them to validate server responses, supporting configurable server connections and reporting in console, JSON, or HTML formats.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-filesystem",
      "./"
    ],
    "env": {
      "DEBUG": "true"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:25.318Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:26:18.369Z"
  },
  "tags": [
    "filesystem",
    "file system",
    "file",
    "system"
  ]
},
{
  "_id": {
    "$oid": "6828972ea6f8dc721ceb41bc"
  },
  "seq": {
    "$numberLong": "220"
  },
  "type": "STDIO",
  "url": "https://github.com/covalenthq/goldrush-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "goldrush",
    "description": "This MCP server exposes Covalent's GoldRush APIs as MCP resources and tools, enabling LLM clients to interact with blockchain data; it is implemented in TypeScript using the Model Context Protocol SDK and the Covalent Client SDK, supporting interactions with tools for fetching balances, transactions, and other blockchain information.",
    "command": "npx",
    "args": [
      "-y",
      "@covalenthq/goldrush-mcp-server@latest"
    ],
    "env": {
      "GOLDRUSH_API_KEY": "YOUR_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:26.382Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:26:20.506Z"
  },
  "tags": [
    "goldrush",
    "gold rush"
  ]
},
{
  "_id": {
    "$oid": "68289731a6f8dc721ceb41be"
  },
  "seq": {
    "$numberLong": "221"
  },
  "type": "STDIO",
  "url": "https://github.com/Taewoong1378/notion-readonly-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "notionApi",
    "description": "This server provides an optimized, read-only interface to the Notion API for AI assistants, utilizing asynchronous parallel processing and exposing only 6 essential API tools, including a novel \"get-one-pager\" function, to enhance performance and stay within tool count limitations when integrated with AI tools like Cursor and Claude.",
    "command": "npx",
    "args": [
      "-y",
      "notion-readonly-mcp-server"
    ],
    "env": {
      "OPENAPI_MCP_HEADERS": "{\"Authorization\": \"Bearer ntn_****\", \"Notion-Version\": \"2022-06-28\" }"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:29.868Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:27:02.575Z"
  },
  "tags": [
    "notionapi",
    "notion api",
    "notion",
    "api"
  ]
},
{
  "_id": {
    "$oid": "68289732a6f8dc721ceb41c0"
  },
  "seq": {
    "$numberLong": "222"
  },
  "type": "STDIO",
  "url": "https://github.com/GoneTone/mcp-server-taiwan-weather",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "taiwan-weather",
    "description": "This MCP server implements the Model Context Protocol to provide 36-hour weather forecasts for Taiwanese cities, retrieving data from the Central Weather Administration API using a provided API key. It integrates with applications like Claude Desktop and can be tested with MCP Inspector.",
    "command": "npx",
    "args": [
      "-y",
      "@gonetone/mcp-server-taiwan-weather"
    ],
    "env": {
      "CWA_API_KEY": "<您的中央氣象署 API 授權碼>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:30.732Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:27:04.947Z"
  },
  "tags": [
    "taiwan",
    "weather",
    "taiwan weather"
  ]
},
{
  "_id": {
    "$oid": "68289734a6f8dc721ceb41c2"
  },
  "seq": {
    "$numberLong": "223"
  },
  "type": "STDIO",
  "url": "https://github.com/talzach/mcp-angular-cli",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "angular-cli",
    "description": "This MCP server implements Angular CLI automation capabilities by exposing functionalities like generating components/services, adding packages, creating workspaces, updating dependencies, and running architect targets; it communicates using the Model Context Protocol for integration with LLMs and agents.",
    "command": "npx",
    "args": [
      "-y",
      "@talzach/mcp-angular-cli"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:03:32.027Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:27:17.866Z"
  },
  "tags": [
    "angular cli",
    "angular",
    "cli"
  ]
},
{
  "_id": {
    "$oid": "68289735a6f8dc721ceb41c4"
  },
  "seq": {
    "$numberLong": "224"
  },
  "type": "STDIO",
  "url": "https://github.com/tuvia-r/openai-to-mcp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "my-api",
    "description": "The OpenAPI to MCP server converts OpenAPI specifications (Swagger) into MCP-compatible tools, enabling Large Language Models to interact with REST APIs through a standardized interface using HTTP(S) and various authentication methods, and supports configurations for clients like Claude, Cursor, Windsurf and VS Code.",
    "command": "npx",
    "args": [
      "-y",
      "openapi-to-mcp"
    ],
    "env": {
      "OPENAPI_SPEC_URL": "path/to/your/swagger.yml",
      "OPENAPI_SPEC_BASE_URL": "http://api.example.com"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:33.971Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:27:20.176Z"
  },
  "tags": [
    "my api",
    "my",
    "api"
  ]
},
{
  "_id": {
    "$oid": "68289736a6f8dc721ceb41c6"
  },
  "seq": {
    "$numberLong": "225"
  },
  "type": "STDIO",
  "url": "https://github.com/sylweriusz/mcp-neo4j-memory-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "graph-memory",
    "description": "This MCP server implementation uses Neo4j as a backend to store and retrieve knowledge graphs via Cypher queries, incorporating Fuse.js for fuzzy searching, and provides database management commands for project-specific knowledge graphs, accessible through the MCP protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@sylweriusz/mcp-neo4j-memory-server"
    ],
    "env": {
      "NEO4J_DATABASE": "neo4j",
      "NEO4J_PASSWORD": "your-password",
      "NEO4J_URI": "bolt://localhost:7687",
      "NEO4J_USERNAME": "neo4j"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:34.618Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:27:22.237Z"
  },
  "tags": [
    "graph memory",
    "graph",
    "memory"
  ]
},
{
  "_id": {
    "$oid": "68289737a6f8dc721ceb41c8"
  },
  "seq": {
    "$numberLong": "226"
  },
  "type": "STDIO",
  "url": "https://github.com/sylphxltd/filesystem-mcp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "filesystem-mcp",
    "description": "The Filesystem MCP Server is a Node.js implementation of the Model Context Protocol that provides AI agents with secure and efficient access to filesystem tools within a defined project root, using batch operations to save tokens and latency; it can be deployed via npx, bunx, or Docker and integrates with tools like Cline/Claude.",
    "command": "npx",
    "args": [
      "@sylphlab/filesystem-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:03:35.979Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:28:04.223Z"
  },
  "tags": [
    "filesystem",
    "file system"
  ]
},
{
  "_id": {
    "$oid": "68289738a6f8dc721ceb41ca"
  },
  "seq": {
    "$numberLong": "227"
  },
  "type": "STDIO",
  "url": "https://github.com/StrawHatAI/claude-dev-tools",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "desktop-commander",
    "description": "This server empowers the Claude desktop app to execute terminal commands, manage processes, and perform file system operations via the Model Context Protocol (MCP); it extends the MCP Filesystem Server to provide surgical text replacements and full file rewrites using a search/replace block format.",
    "command": "npx",
    "args": [
      "-y",
      "@wonderwhy-er/desktop-commander"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:03:36.919Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:28:06.545Z"
  },
  "tags": [
    "desktop commander",
    "desktop",
    "commander"
  ]
},
{
  "_id": {
    "$oid": "6828973aa6f8dc721ceb41cc"
  },
  "seq": {
    "$numberLong": "228"
  },
  "type": "STDIO",
  "url": "https://github.com/HubbleVision/hubble-ai-mcp",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "hubble-tool",
    "description": "The Hubble MCP server implementation provides AI-powered analytics for the Solana blockchain, enabling users to query transaction data and generate visualizations using natural language. It integrates with AI assistants to deliver real-time insights and visual representations of blockchain data.",
    "command": "npx",
    "args": [
      "-y",
      "hubble-mcp-tool"
    ],
    "env": {
      "HUBBLE_API_KEY": "your_api_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:38.255Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:28:19.479Z"
  },
  "tags": [
    "hubble tool",
    "hubble",
    "tool"
  ]
},
{
  "_id": {
    "$oid": "6828973aa6f8dc721ceb41ce"
  },
  "seq": {
    "$numberLong": "229"
  },
  "type": "STDIO",
  "url": "https://github.com/dcSpark/mcp-server-defillama",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-defillama",
    "description": "This MCP server provides Claude with access to DeFi data by interfacing with the DefiLlama API to retrieve information on protocols, chains, tokens, and stablecoins via tools exposed through the Model Context Protocol, leveraging Node.js and accessible via `npx` or local installation.",
    "command": "npx",
    "args": [
      "@mcp-dockmaster/mcp-server-defillama"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:03:38.974Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:28:21.761Z"
  },
  "tags": [
    "defillama",
    "defi llama",
    "defi",
    "llama"
  ]
},
{
  "_id": {
    "$oid": "6828973ba6f8dc721ceb41d0"
  },
  "seq": {
    "$numberLong": "230"
  },
  "type": "STDIO",
  "url": "https://github.com/identimoji/mcp-server-emojikey",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "emojikey",
    "description": "This MCP server implementation persists LLM relationship context using emoji-based keys, enabling Claude to maintain consistent interaction styles across conversations; it integrates with Claude Desktop using an API key to store and retrieve these emojikeys, including functionality to create 'superkeys' for compressed context, and utilizes `npx` to execute the server.",
    "command": "npx",
    "args": [
      "@identimoji/mcp-server-emojikey"
    ],
    "env": {
      "MODEL_ID": "Claude-3-5-Sonnet-20241022",
      "EMOJIKEYIO_API_KEY": "your-api-key-from-emojikey.io"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:39.670Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:28:23.821Z"
  },
  "tags": [
    "emojikey",
    "emoji",
    "key"
  ]
},
{
  "_id": {
    "$oid": "6828973ca6f8dc721ceb41d2"
  },
  "seq": {
    "$numberLong": "231"
  },
  "type": "STDIO",
  "url": "https://github.com/calebl/ynab-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ynab-mcp-server",
    "description": "This MCP server, built with mcp-framework, enables AI interaction with YNAB budgets via the YNAB API, using tools for listing budgets, summarizing budget status, retrieving and approving transactions, and creating new transactions; it leverages the Model Context Protocol for integration with clients like Claude Desktop.",
    "command": "npx",
    "args": [
      "ynab-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:03:40.318Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:29:05.794Z"
  },
  "tags": [
    "ynab",
    "ynab"
  ]
},
{
  "_id": {
    "$oid": "6828973da6f8dc721ceb41d4"
  },
  "seq": {
    "$numberLong": "232"
  },
  "type": "STDIO",
  "url": "https://github.com/hiyorineko/mcp-rollbar-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "rollbar-mcp",
    "description": "This MCP server implementation provides an interface for LLMs to interact with Rollbar, enabling them to access and manage error tracking data via the Rollbar API using either a project or account access token; it supports functionalities like listing/filtering errors and deployments, retrieving error details and occurrences, and accessing project/user information.",
    "command": "npx",
    "args": [
      "-y",
      "@hiyorineko/mcp-rollbar-server"
    ],
    "env": {
      "ROLLBAR_PROJECT_ID": "YOUR_PROJECT_ID",
      "ROLLBAR_PROJECT_TOKEN": "YOUR_PROJECT_ACCESS_TOKEN",
      "ROLLBAR_PROJECT_NAME": "YOUR_PROJECT_NAME",
      "ROLLBAR_ACCOUNT_TOKEN": "YOUR_ACCOUNT_ACCESS_TOKEN"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:41.006Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:29:08.191Z"
  },
  "tags": [
    "rollbar",
    "roll bar"
  ]
},
{
  "_id": {
    "$oid": "6828973da6f8dc721ceb41d6"
  },
  "seq": {
    "$numberLong": "233"
  },
  "type": "STDIO",
  "url": "https://github.com/fleagne/backlog-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "backlog",
    "description": "This MCP server implementation provides access to the Backlog API, enabling the retrieval, creation, updating, and deletion of projects, issues, and wikis using specified IDs, keys, or data; it uses environment variables for configuration and can be integrated with Claude Desktop via NPX or Docker.",
    "command": "npx",
    "args": [
      "-y",
      "backlog-mcp-server"
    ],
    "env": {
      "BACKLOG_API_KEY": "YOUR_API_KEY_HERE",
      "BACKLOG_SPACE_ID": "YOUR_SPACE_ID_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:41.661Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:29:21.130Z"
  },
  "tags": [
    "backlog"
  ]
},
{
  "_id": {
    "$oid": "6828973ea6f8dc721ceb41d8"
  },
  "seq": {
    "$numberLong": "234"
  },
  "type": "STDIO",
  "url": "https://github.com/tuberrabbit/mcp-server-notifier",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "notifier",
    "description": "The MCP Server Notifier sends webhook notifications using the Model Context Protocol (MCP) when AI agents complete tasks, supporting Discord, Slack, Microsoft Teams, Feishu, Ntfy, and custom webhooks via HTTP requests, and optionally uploads images to Imgur.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-notifier"
    ],
    "env": {
      "WEBHOOK_URL": "https://ntfy.sh/webhook-url-example",
      "WEBHOOK_TYPE": "ntfy"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:42.360Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:29:23.579Z"
  },
  "tags": [
    "notifier"
  ]
},
{
  "_id": {
    "$oid": "6828973fa6f8dc721ceb41da"
  },
  "seq": {
    "$numberLong": "235"
  },
  "type": "STDIO",
  "url": "https://github.com/mcpdotdirect/starknet-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "starknet-mcp-server",
    "description": "The Starknet MCP Server empowers AI agents to interact with the Starknet blockchain by providing tools and resources that leverage the Model Context Protocol (MCP); it utilizes Starknet.js to query blockchain data, manage wallets, interact with Cairo smart contracts, resolve StarknetIDs, and execute transactions on Mainnet and Sepolia test networks via stdio or HTTP transport.",
    "command": "npx",
    "args": [
      "@mcpdotdirect/starknet-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:03:42.998Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:29:25.701Z"
  },
  "tags": [
    "starknet",
    "stark net",
    "starknet mcp"
  ]
},
{
  "_id": {
    "$oid": "68289741a6f8dc721ceb41dc"
  },
  "seq": {
    "$numberLong": "236"
  },
  "type": "STDIO",
  "url": "https://github.com/jorgeraad/mcp4gql",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp4gql",
    "description": "This Node.js server implements the Model Context Protocol (MCP) over stdio using `@modelcontextprotocol/sdk`, enabling clients like Cursor to interact with a GraphQL API; it uses `axios` to execute GraphQL queries and introspect the schema, requiring a GraphQL endpoint and optional authentication token via environment variables.",
    "command": "npx",
    "args": [
      "-y",
      "mcp4gql"
    ],
    "env": {
      "AUTH_TOKEN": "YOUR_OPTIONAL_AUTH_TOKEN",
      "GRAPHQL_ENDPOINT": "YOUR_GRAPHQL_ENDPOINT_URL"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:45.255Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:30:07.306Z"
  },
  "tags": [
    "gql"
  ]
},
{
  "_id": {
    "$oid": "68289744a6f8dc721ceb41de"
  },
  "seq": {
    "$numberLong": "237"
  },
  "type": "STDIO",
  "url": "https://github.com/Magic-Pod/magicpod-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "magicpod-mcp-server",
    "description": "This MCP server enables AI agents like Cursor and Claude to interact with MagicPod by implementing the Model Context Protocol; it uses npx to execute and integrates with MagicPod via an API token for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "magicpod-mcp-server",
      "--api-token=YOUR-API-TOKEN"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:03:48.958Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:30:09.742Z"
  },
  "tags": [
    "magicpod",
    "magic pod"
  ]
},
{
  "_id": {
    "$oid": "68289748a6f8dc721ceb41e0"
  },
  "seq": {
    "$numberLong": "238"
  },
  "type": "STDIO",
  "url": "https://github.com/kwanLeeFrmVi/mcp-rag-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "rag",
    "description": "This MCP server implements Retrieval Augmented Generation by indexing documents using specified embedding models (e.g., Nomic, OpenAI) and a local SQLite vector store, serving relevant context to LLMs via MCP tools and resources accessible over stdio.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-rag-server"
    ],
    "env": {
      "BASE_LLM_API": "http://localhost:11434/v1",
      "VECTOR_STORE_PATH": "./vector_store",
      "EMBEDDING_MODEL": "nomic-embed-text",
      "CHUNK_SIZE": "500"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:03:52.078Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:30:22.477Z"
  },
  "tags": [
    "rag"
  ]
},
{
  "_id": {
    "$oid": "6828974da6f8dc721ceb41e2"
  },
  "seq": {
    "$numberLong": "239"
  },
  "type": "STDIO",
  "url": "https://github.com/firstorderai/authenticator_mcp",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "Authenticator App MCP",
    "description": "This MCP server implements the Model Context Protocol to securely enable AI agents to retrieve 2FA codes and passwords from the Authenticator App via an access token; it uses `npx` to execute and integrates with AI clients through a configuration file.",
    "command": "npx",
    "args": [
      "-y",
      "authenticator-mcp",
      "--access-token=YOUR-KEY"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:03:57.821Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:30:25.125Z"
  },
  "tags": [
    "authenticator app",
    "authenticator",
    "app"
  ]
},
{
  "_id": {
    "$oid": "68289753a6f8dc721ceb41e4"
  },
  "seq": {
    "$numberLong": "240"
  },
  "type": "STDIO",
  "url": "https://github.com/LaubPlusCo/mcp-webdav-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "webdav",
    "description": "This MCP server implements CRUD operations on a WebDAV endpoint, allowing MCP clients like Claude Desktop to interact with WebDAV file systems through natural language; it supports both stdio and HTTP/SSE transports, optional basic authentication for both WebDAV and the MCP server using bcrypt for the MCP server password, and utilizes Zod for configuration validation.",
    "command": "npx",
    "args": [
      "-y",
      "webdav-mcp-server"
    ],
    "env": {
      "WEBDAV_USERNAME": "<WEBDAV_USERNAME>",
      "WEBDAV_AUTH_ENABLED": "true|false",
      "WEBDAV_ROOT_PATH": "<WEBDAV_ROOT_PATH>",
      "WEBDAV_ROOT_URL": "<WEBDAV_ROOT_URL>",
      "WEBDAV_PASSWORD": "<WEBDAV_PASSWORD>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:03.096Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:30:27.637Z"
  },
  "tags": [
    "webdav"
  ]
},
{
  "_id": {
    "$oid": "68289753a6f8dc721ceb41e6"
  },
  "seq": {
    "$numberLong": "241"
  },
  "type": "STDIO",
  "url": "https://github.com/terryso/tv-recommender-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "TVRecommender",
    "description": "This MCP server implements a TV show recommendation engine by communicating with LLM clients via standard input/output using the Model Context Protocol (MCP) and fetching data from the TMDb API, enabling recommendations by genre, similar show retrieval, and detailed show information lookups, as well as querying actors and user reviews.",
    "command": "npx",
    "args": [
      "tv-recommender-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:04:03.734Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:31:09.289Z"
  },
  "tags": [
    "tvrecommender",
    "tv recommender",
    "tv",
    "recommender"
  ]
},
{
  "_id": {
    "$oid": "68289754a6f8dc721ceb41e8"
  },
  "seq": {
    "$numberLong": "242"
  },
  "type": "STDIO",
  "url": "https://github.com/chatmcp/mcp-server-router",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "fetch",
    "description": "The mcprouter MCP server implementation acts as a proxy for remote MCP servers using stdio, enabling integration with MCP clients like Claude Desktop. It leverages a server key obtained from MCP.so for authentication and supports debugging with the MCP Inspector.",
    "command": "npx",
    "args": [
      "-y",
      "mcprouter"
    ],
    "env": {
      "SERVER_KEY": "xxx"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:04.438Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:31:11.338Z"
  },
  "tags": [
    "fetch"
  ]
},
{
  "_id": {
    "$oid": "68289755a6f8dc721ceb41ea"
  },
  "seq": {
    "$numberLong": "243"
  },
  "type": "STDIO",
  "url": "https://github.com/aiamblichus/mcp-chat-adapter",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "chat-adapter",
    "description": "This MCP server, built with FastMCP, provides a chat completion interface for LLMs by translating MCP requests to OpenAI or OpenAI-compatible API calls, managing conversation state with local storage, and using tools to create, chat, list, get, and delete conversations.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-chat-adapter"
    ],
    "env": {
      "DEFAULT_MODEL": "qwen/qwq-32b",
      "OPENAI_API_KEY": "xoxoxo",
      "OPENAI_API_BASE": "https://openrouter.ai/api/v1",
      "CONVERSATION_DIR": "/Users/aiamblichus/mcp-convos"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:05.783Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:31:23.949Z"
  },
  "tags": [
    "chat adapter",
    "chat",
    "adapter"
  ]
},
{
  "_id": {
    "$oid": "68289756a6f8dc721ceb41ec"
  },
  "seq": {
    "$numberLong": "244"
  },
  "type": "STDIO",
  "url": "https://github.com/Nekzus/npm-sentinel-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "npmAnalyzer",
    "description": "The NPM Sentinel MCP server analyzes NPM packages by integrating with AI models like Claude and Anthropic AI via the Model Context Protocol (MCP) to provide real-time intelligence on security, dependencies, performance, and other metrics; it uses Zod for schema validation and supports integration with VS Code, Docker, and Claude Desktop.",
    "command": "npx",
    "args": [
      "-y",
      "@nekzus/mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:04:06.737Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:31:27.546Z"
  },
  "tags": [
    "npmanalyzer",
    "npm analyzer",
    "npm",
    "analyzer"
  ]
},
{
  "_id": {
    "$oid": "68289757a6f8dc721ceb41ee"
  },
  "seq": {
    "$numberLong": "245"
  },
  "type": "STDIO",
  "url": "https://github.com/fakepixels/base-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "base",
    "description": "This MCP server enables LLMs to interact with the Base blockchain network, supporting operations such as wallet management, balance checks, and transaction execution through natural language commands via tools like `process_command`, `create_wallet`, `check_balance`, and `list_wallets`; it integrates with clients like Claude Desktop and supports programmatic connections using the Model Context Protocol SDK with stdio and SSE transports.",
    "command": "npx",
    "args": [
      "-y",
      "base-network-mcp-server"
    ],
    "env": {
      "BASE_PROVIDER_URL": "https://api.developer.coinbase.com/rpc/v1/base/YOUR_API_KEY",
      "WALLET_PRIVATE_KEY": "your_private_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:07.746Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:31:29.297Z"
  },
  "tags": [
    "base"
  ]
},
{
  "_id": {
    "$oid": "68289758a6f8dc721ceb41f0"
  },
  "seq": {
    "$numberLong": "246"
  },
  "type": "STDIO",
  "url": "https://github.com/tbreeding/jira-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "JiraMCP_Published",
    "description": "The Jira MCP server implements a Model Context Protocol interface to Jira, providing tools to fetch and analyze issues via the Jira API and JQL, as well as a guided wizard for creating and updating issues using a unified workflow and state management.",
    "command": "npx",
    "args": [
      "@timbreeding/jira-mcp-server@latest",
      "--jira-base-url=https://example.atlassian.net",
      "--jira-username=someJiraUserEmail@domain.com",
      "--jira-api-token=<your jira token>"
    ],
    "env": {
      "LOG_FILE_PATH": "",
      "DEBUG": "true"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:08.722Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:32:10.831Z"
  },
  "tags": [
    "jira",
    "published",
    "jira published"
  ]
},
{
  "_id": {
    "$oid": "68289759a6f8dc721ceb41f2"
  },
  "seq": {
    "$numberLong": "247"
  },
  "type": "STDIO",
  "url": "https://github.com/Asphere-xyz/aapi-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "aapi",
    "description": "This MCP server implements the Model Context Protocol to provide AI models with access to Ankr's Advanced APIs, enabling fetching of blockchain data like token balances and prices via `getAccountBalance` and `getTokenPrice` using an Ankr API key and supporting blockchains such as Ethereum, BSC, and Polygon.",
    "command": "npx",
    "args": [
      "-y",
      "@asphere/aapi-mcp-server"
    ],
    "env": {
      "ANKR_API_KEY": "<YOUR_KEY>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:09.928Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:42:07.517Z"
  },
  "tags": [
    "aapi"
  ]
},
{
  "_id": {
    "$oid": "6828975ba6f8dc721ceb41f4"
  },
  "seq": {
    "$numberLong": "248"
  },
  "type": "STDIO",
  "url": "https://github.com/Noveum/api-market-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "api-market",
    "description": "This MCP server exposes API-Market's APIs, defined by OpenAPI specifications, as MCP resources, enabling Large Language Models to discover and interact with them via the MCP protocol using `npx` to run `@noveum-ai/mcp-server` and supporting configuration through JSON files for integration with tools like Claude Desktop and Cursor.",
    "command": "npx",
    "args": [
      "-y",
      "@noveum-ai/mcp-server"
    ],
    "env": {
      "API_HEADERS": "x-magicapi-key:your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:11.621Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:32:26.003Z"
  },
  "tags": [
    "api market",
    "api",
    "market"
  ]
},
{
  "_id": {
    "$oid": "68289761a6f8dc721ceb41f6"
  },
  "seq": {
    "$numberLong": "249"
  },
  "type": "STDIO",
  "url": "https://github.com/ParasSolanki/jira-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "jira",
    "description": "This MCP server provides integration with Jira using the Jira REST API, enabling Large Language Models to retrieve projects, boards, sprints, and issues, as well as create task issues, via the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@parassolanki/jira-mcp-server@latest"
    ],
    "env": {
      "JIRA_PERSONAL_ACCESS_TOKEN": "email@example.com:your_personal_jira_access_token",
      "JIRA_BASE_URL": "jira_base_url"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:17.503Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:32:29.191Z"
  },
  "tags": [
    "jira"
  ]
},
{
  "_id": {
    "$oid": "68289763a6f8dc721ceb41f8"
  },
  "seq": {
    "$numberLong": "250"
  },
  "type": "STDIO",
  "url": "https://github.com/jeasonstudio/zan-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "zan",
    "description": "The ZAN MCP server implements the Model Context Protocol, providing AI assistants with access to blockchain data and functionality through a standard MCP interface; it supports multiple EVM-compatible chains via ZAN.top's node service and offers blockchain query tools accessible through Web3 APIs.",
    "command": "npx",
    "args": [
      "-y",
      "zan-mcp-server",
      "--stdio",
      "--api-key",
      "<zan_api_key>"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:04:19.466Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:32:30.989Z"
  },
  "tags": [
    "zan"
  ]
},
{
  "_id": {
    "$oid": "68289764a6f8dc721ceb41fa"
  },
  "seq": {
    "$numberLong": "251"
  },
  "type": "STDIO",
  "url": "https://github.com/christopher-czaban/motion-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "motion",
    "description": "This open-source MCP server enables AI assistants to interact with the Motion API, providing intelligent task and project management capabilities using natural language. It leverages MCP tools to expose Motion API endpoints, incorporates rate limiting with persistent state using SQLite, and optimizes data retrieval for AI efficiency.",
    "command": "npx",
    "args": [
      "tsx",
      "/path/to/your/motion_mcp_server/main.ts"
    ],
    "env": {
      "MOTION_API_KEY": "YOUR_MOTION_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:20.129Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:33:12.854Z"
  },
  "tags": [
    "motion"
  ]
},
{
  "_id": {
    "$oid": "68289764a6f8dc721ceb41fc"
  },
  "seq": {
    "$numberLong": "252"
  },
  "type": "STDIO",
  "url": "https://github.com/mkusaka/mcp-shell-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "shell",
    "description": "The MCP Shell Server provides a bridge for AI agents to securely execute shell commands using the Model Context Protocol (MCP), supporting various shells and offering detailed error handling, resource access to system information, and integrations with tools like Cursor and Cline.",
    "command": "npx",
    "args": [
      "-y",
      "@mkusaka/mcp-shell-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:04:20.833Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:33:14.441Z"
  },
  "tags": [
    "shell"
  ]
},
{
  "_id": {
    "$oid": "68289765a6f8dc721ceb41fe"
  },
  "seq": {
    "$numberLong": "253"
  },
  "type": "STDIO",
  "url": "https://github.com/yutakobayashidev/webforai-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "webforaiExtractor",
    "description": "This MCP server, deployed on Cloudflare Workers, uses WebforAI to extract and format plain text from web pages into Markdown, serving it via a simple API endpoint and integrating with MCP clients like Cloudflare AI Playground and Claude Desktop using the Model Context Protocol.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "http://localhost:8787/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:04:21.523Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:33:27.786Z"
  },
  "tags": [
    "webforai extractor",
    "webforai",
    "extractor",
    "web for ai extractor",
    "web",
    "for",
    "ai"
  ]
},
{
  "_id": {
    "$oid": "68289766a6f8dc721ceb4200"
  },
  "seq": {
    "$numberLong": "254"
  },
  "type": "STDIO",
  "url": "https://github.com/fugle-dev/fugle-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "@fugle/mcp-server",
    "description": "The Fugle MCP server implementation enables interaction with Fugle's trading system using the Model Context Protocol (MCP), providing real-time stock quote and historical data retrieval, and optional trading functionalities; it supports deployment via Docker and NPM, utilizing SDKs for 'masterlink' (元富) and 'fubon' (富邦) with environment variables for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@fugle/mcp-server"
    ],
    "env": {
      "CERT_PATH": "/path/to/your/cert.p12",
      "ACCOUNT": "指定使用帳戶號碼",
      "NATIONAL_ID": "您的身分證字號",
      "SDK_TYPE": "masterlink|fubon",
      "CERT_PASS": "您的憑證密碼",
      "ACCOUNT_PASS": "您的帳戶密碼",
      "ENABLE_ORDER": "false"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:22.608Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:33:31.059Z"
  },
  "tags": [
    "fugle",
    "fugle"
  ]
},
{
  "_id": {
    "$oid": "68289767a6f8dc721ceb4202"
  },
  "seq": {
    "$numberLong": "255"
  },
  "type": "STDIO",
  "url": "https://github.com/ZephyrDeng/mcp-server-gitlab",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "@zephyr-mcp/gitlab",
    "description": "This MCP server integrates with GitLab using the GitLab RESTful API to provide tools for searching users and projects, managing merge requests, and executing arbitrary API calls; it supports integration with platforms like Claude and Smithery, and relies on environment variables for GitLab API URL and authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@zephyr-mcp/gitlab"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:04:23.600Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:33:42.241Z"
  },
  "tags": [
    "zephyr gitlab",
    "zephyr",
    "gitlab"
  ]
},
{
  "_id": {
    "$oid": "68289768a6f8dc721ceb4204"
  },
  "seq": {
    "$numberLong": "256"
  },
  "type": "STDIO",
  "url": "https://github.com/vib3ai/monad-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "monad-mcp-server",
    "description": "The Monad MCP Server enables AI assistants to interact with the Monad blockchain by facilitating DApp interaction via the Monad RPC URL and a specified wallet's private key; it uses npx to execute and allows for configuration via environment variables.",
    "command": "npx",
    "args": [
      "-y",
      "@vib3ai/monad-mcp-server"
    ],
    "env": {
      "APPDATA": "YOUR_APPDATA_PATH",
      "WALLET_PRIVATE_KEY": "YOUR_PRIVATE_KEY_HERE",
      "MONAD_RPC_URL": "https://testnet-rpc.monad.xyz/"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:24.306Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:34:14.490Z"
  },
  "tags": [
    "monad",
    "monad"
  ]
},
{
  "_id": {
    "$oid": "6828976ba6f8dc721ceb4206"
  },
  "seq": {
    "$numberLong": "257"
  },
  "type": "STDIO",
  "url": "https://github.com/PSPDFKit/nutrient-dws-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "nutrient-dws",
    "description": "The Nutrient DWS MCP server implements the Model Context Protocol to provide AI assistants with access to the Nutrient DWS Processor API for PDF processing, including digital signing, document editing, OCR, and format conversion; it integrates with Claude Desktop and uses Node.js to interact with a sandboxed file system via the Nutrient DWS API.",
    "command": "npx",
    "args": [
      "-y",
      "@nutrient-sdk/dws-mcp-server",
      "--sandbox",
      "/your/sandbox/directory"
    ],
    "env": {
      "NUTRIENT_DWS_API_KEY": "YOUR_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:27.057Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:34:16.197Z"
  },
  "tags": [
    "nutrient dws",
    "nutrient",
    "dws"
  ]
},
{
  "_id": {
    "$oid": "6828976da6f8dc721ceb4208"
  },
  "seq": {
    "$numberLong": "258"
  },
  "type": "STDIO",
  "url": "https://github.com/JannikWempe/mcp-lexware-office",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-lexware-office",
    "description": "This MCP server implementation integrates with the Lexware Office API to provide read-only access to business operations, such as retrieving invoices and contacts using filtering capabilities; it communicates using the Model Context Protocol and is configured via JSON, utilizing either Docker or NPX for deployment.",
    "command": "npx",
    "args": [
      "-y",
      "JannikWempe/mcp-lexware-office"
    ],
    "env": {
      "LEXWARE_OFFICE_API_KEY": "YOUR_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:29.173Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:34:29.636Z"
  },
  "tags": [
    "lexware office",
    "lexware",
    "office"
  ]
},
{
  "_id": {
    "$oid": "6828976ea6f8dc721ceb420a"
  },
  "seq": {
    "$numberLong": "259"
  },
  "type": "STDIO",
  "url": "https://github.com/xinlei413/MCP-DOC-Server-OpenRouter",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "docs-mcp-server",
    "description": "This MCP server fetches and indexes documentation from various sources like websites and package repositories, then serves it through a Model Context Protocol API using OpenAI's API to provide a versatile and seamless user experience that can be deployed either via Docker or directly using npm.",
    "command": "npx",
    "args": [
      "-y",
      "--package=@arabold/docs-mcp-server",
      "docs-server"
    ],
    "env": {
      "OPENAI_API_KEY": "sk-proj-..."
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:30.523Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:34:33.584Z"
  },
  "tags": [
    "docs",
    "docs"
  ]
},
{
  "_id": {
    "$oid": "68289770a6f8dc721ceb420c"
  },
  "seq": {
    "$numberLong": "260"
  },
  "type": "STDIO",
  "url": "https://github.com/Moe03/mcp-express-adapter",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "localMcpServer",
    "description": "This MCP (Model Context Protocol) Express adapter enables the creation of MCP servers using Express.js, offering features like SSE support, header-based authorization, and TypeScript tool implementation; it integrates with tools defined using JSON schema and supports connections with Langchain via the `@langchain/mcp-adapters` package.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-express-adapter",
      "--host",
      "http://localhost:3000/mcp/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:04:32.546Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:34:44.396Z"
  },
  "tags": [
    "local mcpserver",
    "local"
  ]
},
{
  "_id": {
    "$oid": "68289772a6f8dc721ceb420e"
  },
  "seq": {
    "$numberLong": "261"
  },
  "type": "STDIO",
  "url": "https://github.com/qvkare/linea-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "linea",
    "description": "The Linea MCP server enables AI applications to interact with the Linea blockchain, an Ethereum Layer 2, by providing tools for wallet management, token operations, smart contract interactions, NFT management, bridge operations, DeFi integrations, Verax attestation verification, and Linea ENS management using the Model Context Protocol.",
    "command": "npx",
    "args": [
      "linea-mcp@latest"
    ],
    "env": {
      "INFURA_API_KEY": "your_infura_key",
      "ALCHEMY_API_KEY": "your_alchemy_key",
      "PORT": "3000",
      "ETHEREUM_TESTNET_RPC_URL": "https://sepolia.infura.io/v3/your_infura_key",
      "LINEA_TESTNET_RPC_URL": "https://rpc.sepolia.linea.build",
      "WALLET_PRIVATE_KEY": "your_wallet_private_key_or_mnemonic",
      "NODE_ENV": "development",
      "PRIVATE_KEY_ENCRYPTION_KEY": "your_encryption_key_please_change",
      "ETHEREUM_RPC_URL": "https://mainnet.infura.io/v3/your_infura_key",
      "LINEA_MAINNET_RPC_URL": "https://rpc.linea.build"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:34.847Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:35:16.236Z"
  },
  "tags": [
    "linea"
  ]
},
{
  "_id": {
    "$oid": "68289773a6f8dc721ceb4210"
  },
  "seq": {
    "$numberLong": "262"
  },
  "type": "STDIO",
  "url": "https://github.com/jschuller/perplexity-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "perplexity-mcp",
    "description": "This MCP server enables Claude Desktop and other MCP clients to utilize the Perplexity AI API for web searches, offering fine-grained control over search parameters like recency, temperature, and model selection via a Perplexity API key, and supports features such as citations and response streaming.",
    "command": "npx",
    "args": [
      "-y",
      "@jschuller/perplexity-mcp"
    ],
    "env": {
      "PERPLEXITY_MODEL": "sonar-large-online",
      "PERPLEXITY_API_KEY": "your_perplexity_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:35.539Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:35:17.688Z"
  },
  "tags": [
    "perplexity"
  ]
},
{
  "_id": {
    "$oid": "68289776a6f8dc721ceb4212"
  },
  "seq": {
    "$numberLong": "263"
  },
  "type": "STDIO",
  "url": "https://github.com/cablate/mcp-google-gmail",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gmail",
    "description": "The Gmail MCP Server integrates with the Gmail API to read, search, filter, and process email content and attachments, and it communicates using the Model Context Protocol (MCP) to facilitate LLM processing. It is installable via npm and configurable for use with Dive Desktop.",
    "command": "npx",
    "args": [
      "-y",
      "@cablate/mcp-gmail"
    ],
    "env": {
      "GMAIL_CLIENT_SECRET": "your_client_secret",
      "GMAIL_CLIENT_ID": "your_client_id",
      "GMAIL_REFRESH_TOKEN": "your_refresh_token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:38.090Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:35:31.393Z"
  },
  "tags": [
    "gmail"
  ]
},
{
  "_id": {
    "$oid": "68289778a6f8dc721ceb4214"
  },
  "seq": {
    "$numberLong": "264"
  },
  "type": "STDIO",
  "url": "https://github.com/Mistizz/mcp-JapaneseTextAnalyzer",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "JapaneseTextAnalyzer",
    "description": "This MCP server analyzes Japanese text using morphological analysis via kuromoji.js to count characters and words, and analyze linguistic features such as average sentence length, part-of-speech ratios, and vocabulary diversity; it supports both direct text input and file path input, resolving file paths flexibly.",
    "command": "npx",
    "args": [
      "-y",
      "github:Mistizz/mcp-JapaneseTextAnalyzer"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:04:40.030Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:35:35.586Z"
  },
  "tags": [
    "japanesetextanalyzer",
    "japanese text analyzer",
    "japanese",
    "text",
    "analyzer",
    "japanese text",
    "text analyzer"
  ]
},
{
  "_id": {
    "$oid": "68289779a6f8dc721ceb4216"
  },
  "seq": {
    "$numberLong": "265"
  },
  "type": "STDIO",
  "url": "https://github.com/ibraheem4/clover-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "clover",
    "description": "This MCP server facilitates interaction with the Clover API by providing access to merchant data, inventory, and orders via OAuth authentication; it integrates with Claude AI and utilizes the Model Context Protocol for communication.",
    "command": "npx",
    "args": [
      "-y",
      "@ibraheem4/clover-mcp"
    ],
    "env": {
      "CLOVER_CLIENT_SECRET": "your-clover-client-secret",
      "CLOVER_CLIENT_ID": "your-clover-client-id",
      "CLOVER_BASE_URL": "https://apisandbox.dev.clover.com"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:41.068Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:35:45.800Z"
  },
  "tags": [
    "clover"
  ]
},
{
  "_id": {
    "$oid": "68289779a6f8dc721ceb4218"
  },
  "seq": {
    "$numberLong": "266"
  },
  "type": "STDIO",
  "url": "https://github.com/PostHog/mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "posthog",
    "description": "This MCP server implementation acts as a bridge between desktop clients and PostHog, enabling them to leverage PostHog's features; it communicates via Server-Sent Events (SSE) using a PostHog API key for authentication and authorization.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "http://localhost:8787/sse?token={YOUR_POSTHOG_API_KEY}"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:04:41.838Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:36:17.607Z"
  },
  "tags": [
    "posthog"
  ]
},
{
  "_id": {
    "$oid": "6828977aa6f8dc721ceb421a"
  },
  "seq": {
    "$numberLong": "267"
  },
  "type": "STDIO",
  "url": "https://github.com/weekitmo/mcp-sentry",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "sentry-server",
    "description": "The MCP Sentry Server, implemented in Node.js and TypeScript, integrates with the Sentry API to retrieve error reports and stacktraces via the Model Context Protocol, supporting both standard MCP over stdin/stdout and SSE (Server-Sent Events) transport.",
    "command": "npx",
    "args": [
      "-y",
      "@weekit/mcp-sentry@1.0.9"
    ],
    "env": {
      "SENTRY_TOKEN": "your_sentry_auth_token_here",
      "SENTRY_API_BASE": "https://your_sentry_api_base_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:42.480Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:36:19.412Z"
  },
  "tags": [
    "sentry",
    "sentry"
  ]
},
{
  "_id": {
    "$oid": "6828977ba6f8dc721ceb421c"
  },
  "seq": {
    "$numberLong": "268"
  },
  "type": "STDIO",
  "url": "https://github.com/goofun/volcengine-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "volcengine",
    "description": "The Volcengine MCP Server exposes Volcengine services as MCP tools, allowing integration with agents like Claude via NodeJS by leveraging OpenAPI and passing service-specific environment variables such as access keys and desired actions.",
    "command": "npx",
    "args": [
      "-y",
      "volcengine-mcp-server"
    ],
    "env": {
      "VOLC_SERVICE": "<use which service>",
      "VOLC_ACTION": "<use which action of version>",
      "VOLC_ACCESSKEY": "<your access key>",
      "VOLC_SECRETKEY": "<your secret key>",
      "VOLC_VERSION": "<use which version of service>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:43.161Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:36:32.974Z"
  },
  "tags": [
    "volcengine"
  ]
},
{
  "_id": {
    "$oid": "6828977ba6f8dc721ceb421e"
  },
  "seq": {
    "$numberLong": "269"
  },
  "type": "STDIO",
  "url": "https://github.com/MissionSquad/mcp-github",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "github",
    "description": "This MCP server implements a subset of the GitHub API, providing tools to create/update files, manage repositories, search code/issues/users, create branches/issues/pull requests, and manage pull request reviews using the GitHub API and optionally a GitHub Personal Access Token.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-github"
    ],
    "env": {
      "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:43.863Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:36:37.107Z"
  },
  "tags": [
    "github"
  ]
},
{
  "_id": {
    "$oid": "6828977ea6f8dc721ceb4220"
  },
  "seq": {
    "$numberLong": "270"
  },
  "type": "STDIO",
  "url": "https://github.com/Apillon/mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "apillon-mcp-server",
    "description": "The Apillon MCP server implements the Model Context Protocol to provide Storage, Hosting, and NFT modules accessible to Large Language Models like Claude via a standardized interface; it leverages Node.js and TypeScript and integrates with services like IPFS, IPNS, EVM, Substrate, and Unique chains.",
    "command": "npx",
    "args": [
      "-y",
      "@apillon/mcp-server"
    ],
    "env": {
      "APILLON_API_KEY": "<APILLON_API_KEY>",
      "APILLON_API_SECRET": "<APILLON_API_SECRET>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:46.950Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:36:47.306Z"
  },
  "tags": [
    "apillon",
    "apillon mcp"
  ]
},
{
  "_id": {
    "$oid": "6828977fa6f8dc721ceb4222"
  },
  "seq": {
    "$numberLong": "271"
  },
  "type": "STDIO",
  "url": "https://github.com/Yangbin-v/mcp-client-helper",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "github",
    "description": "This MCP server manager provides an interface for managing multiple MCP server instances via a configuration file, using Node.js and TypeScript; it supports starting, stopping, and restarting servers, monitoring their status, and handling their logs and errors through event-driven mechanisms by leveraging configurable command-line arguments and environment variables.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-github"
    ],
    "env": {
      "GITHUB_PERSONAL_ACCESS_TOKEN": "your-token-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:47.922Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:37:19.207Z"
  },
  "tags": [
    "github"
  ]
},
{
  "_id": {
    "$oid": "68289780a6f8dc721ceb4224"
  },
  "seq": {
    "$numberLong": "272"
  },
  "type": "STDIO",
  "url": "https://github.com/wangshunnn/bilibili-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "bilibili",
    "description": "This MCP server implementation provides an interface to the bilibili.com API, allowing users to fetch user information by ID and search for videos using either a BVID or keywords; it integrates with the Model Context Protocol and is intended for use with applications like Claude Desktop, communicating over HTTP.",
    "command": "npx",
    "args": [
      "-y",
      "@wangshunnn/bilibili-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:04:48.913Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:37:21.201Z"
  },
  "tags": [
    "bilibili"
  ]
},
{
  "_id": {
    "$oid": "68289781a6f8dc721ceb4226"
  },
  "seq": {
    "$numberLong": "273"
  },
  "type": "STDIO",
  "url": "https://github.com/theo-nash/twitter-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "agent-twitter-client-mcp",
    "description": "This MCP server acts as a bridge between AI models and Twitter, enabling interaction via HTTP using cookie, credential, or API-based authentication and the `agent-twitter-client` package; it supports operations such as fetching and sending tweets, managing user profiles, and integrates with Grok AI for real-time Twitter data analysis and conversation.",
    "command": "npx",
    "args": [
      "-y",
      "agent-twitter-client-mcp"
    ],
    "env": {
      "TWITTER_COOKIES": "[\"auth_token=YOUR_AUTH_TOKEN; Domain=.twitter.com\", \"ct0=YOUR_CT0_VALUE; Domain=.twitter.com\", \"twid=u%3DYOUR_USER_ID; Domain=.twitter.com\"]",
      "AUTH_METHOD": "cookies"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:49.912Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:37:34.755Z"
  },
  "tags": [
    "agent twitter client",
    "agent",
    "twitter",
    "client",
    "twitter client"
  ]
},
{
  "_id": {
    "$oid": "68289786a6f8dc721ceb4228"
  },
  "seq": {
    "$numberLong": "274"
  },
  "type": "STDIO",
  "url": "https://github.com/mackenly/mcp-fathom-analytics",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "fathom-analytics",
    "description": "This MCP server provides an interface for AI assistants to access Fathom Analytics data using the Model Context Protocol and the Fathom Analytics API, enabling retrieval of account information, site details, event lists, aggregated analytics reports, and current visitor data. It uses the `@mackenly/fathom-api` SDK to interact with Fathom Analytics endpoints.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-fathom-analytics"
    ],
    "env": {
      "FATHOM_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:54.245Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:37:38.765Z"
  },
  "tags": [
    "fathom analytics",
    "fathom",
    "analytics"
  ]
},
{
  "_id": {
    "$oid": "68289787a6f8dc721ceb422a"
  },
  "seq": {
    "$numberLong": "275"
  },
  "type": "STDIO",
  "url": "https://github.com/Prathamesh0901/zoom-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "zoom",
    "description": "This MCP server manages Zoom meetings by providing create, retrieve, update, and delete operations through a standardized Model Context Protocol interface; it integrates with AI tools like Claude and Cursor and utilizes Zod for parameter validation when interacting with the Zoom API.",
    "command": "npx",
    "args": [
      "-y",
      "@prathamesh0901/zoom-mcp-server"
    ],
    "env": {
      "ZOOM_ACCOUNT_ID": "Your Zoom Account ID",
      "ZOOM_CLIENT_SECRET": "Your Zoom Client Secret",
      "ZOOM_CLIENT_ID": "Your Zoom Client ID"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:55.540Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:37:48.827Z"
  },
  "tags": [
    "zoom"
  ]
},
{
  "_id": {
    "$oid": "6828978ba6f8dc721ceb422c"
  },
  "seq": {
    "$numberLong": "276"
  },
  "type": "STDIO",
  "url": "https://github.com/zhaoxin34/mcp-server-mysql",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp_server_mysql",
    "description": "This NodeJS-based MCP server provides read-only access to MySQL databases, enabling LLMs to inspect schemas and execute queries using SQL; it leverages prepared statements, query timeouts, and result pagination while supporting secure parameter handling and comprehensive database information retrieval.",
    "command": "npx",
    "args": [
      "-y",
      "@benborla29/mcp-server-mysql"
    ],
    "env": {
      "MYSQL_PORT": "3306",
      "MYSQL_PASS": "",
      "MYSQL_USER": "root",
      "MYSQL_DB": "db_name",
      "MYSQL_HOST": "127.0.0.1"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:04:59.019Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:38:20.958Z"
  },
  "tags": [
    "mysql"
  ]
},
{
  "_id": {
    "$oid": "6828978ca6f8dc721ceb422e"
  },
  "seq": {
    "$numberLong": "277"
  },
  "type": "STDIO",
  "url": "https://github.com/pinkpixel-dev/prysm-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "prysm-scraper",
    "description": "The Prysm MCP Server scrapes web content for AI assistants using Puppeteer, providing configurable scraping modes, image extraction, and smart scrolling; it formats the results into markdown, HTML, or JSON and supports integrations with various MCP-compatible applications via the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@pinkpixel/prysm-mcp"
    ],
    "env": {
      "PRYSM_IMAGE_OUTPUT_DIR": "${workspaceFolder}/scrape_results/images",
      "PRYSM_OUTPUT_DIR": "${workspaceFolder}/scrape_results"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:05:00.056Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:38:22.894Z"
  },
  "tags": [
    "prysm scraper",
    "prysm",
    "scraper"
  ]
},
{
  "_id": {
    "$oid": "68289790a6f8dc721ceb4230"
  },
  "seq": {
    "$numberLong": "278"
  },
  "type": "STDIO",
  "url": "https://github.com/andyciggy/xero-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "xero",
    "description": "This Xero MCP server implements the Model Context Protocol to provide standardized access to Xero's API for managing contacts, chart of accounts, and invoices, utilizing Xero OAuth2 for authentication and supporting custom connections and bearer tokens.",
    "command": "npx",
    "args": [
      "-y",
      "@xeroapi/xero-mcp-server@latest"
    ],
    "env": {
      "XERO_CLIENT_ID": "your_client_id_here",
      "XERO_CLIENT_SECRET": "your_client_secret_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:05:04.447Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:38:36.506Z"
  },
  "tags": [
    "xero"
  ]
},
{
  "_id": {
    "$oid": "68289791a6f8dc721ceb4232"
  },
  "seq": {
    "$numberLong": "279"
  },
  "type": "STDIO",
  "url": "https://github.com/jwaxman19/qlik-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "qlik",
    "description": "This MCP server acts as an intermediary, providing Claude with the ability to interact with the Qlik Cloud API to retrieve applications, sheets, and extract data from visualizations; it utilizes API keys for authentication and supports rate limiting.",
    "command": "npx",
    "args": [
      "tsx",
      "src/index.ts"
    ],
    "env": {
      "QLIK_BASE_URL": "your_tenant_url",
      "QLIK_APP_ID": "your_default_app_id",
      "QLIK_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:05:05.728Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:38:40.205Z"
  },
  "tags": [
    "qlik"
  ]
},
{
  "_id": {
    "$oid": "68289793a6f8dc721ceb4234"
  },
  "seq": {
    "$numberLong": "280"
  },
  "type": "STDIO",
  "url": "https://github.com/TerraCo89/mcp-server-github-projects",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "github-projects",
    "description": "This MCP server implementation provides an interface for managing GitHub Projects via the GitHub Projects API, offering operations to handle views, priorities, dependencies, and metrics; it integrates with Claude Desktop and can be used as a library or CLI application.",
    "command": "npx",
    "args": [
      "-y",
      "@terraco89/mcp-server-github-projects"
    ],
    "env": {
      "GITHUB_TOKEN": "YOUR_TOKEN_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:05:07.431Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:38:50.270Z"
  },
  "tags": [
    "github projects",
    "github",
    "projects",
    "github-projects"
  ]
},
{
  "_id": {
    "$oid": "68289796a6f8dc721ceb4236"
  },
  "seq": {
    "$numberLong": "281"
  },
  "type": "STDIO",
  "url": "https://github.com/smhnkmr/realtime-crypto-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "realtime-crypto",
    "description": "This MCP server implementation provides real-time cryptocurrency data by integrating with the CoinCap API to fetch exchange details and current rates using tools like `getExchangeDetailsTool` and `getRatesTool`; it uses TypeScript, includes rate limiting, and is compatible with the MCP server SDK.",
    "command": "npx",
    "args": [
      "realtime-crypto-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:10.653Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:39:22.638Z"
  },
  "tags": [
    "realtime crypto",
    "realtime",
    "crypto"
  ]
},
{
  "_id": {
    "$oid": "68289797a6f8dc721ceb4238"
  },
  "seq": {
    "$numberLong": "282"
  },
  "type": "STDIO",
  "url": "https://github.com/DappierAI/dappier-mcp-server-remote",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "dappier",
    "description": "The Dappier MCP Remote Server provides real-time web search and access to premium data through the Model Context Protocol (MCP) using Server-Sent Events (SSE), enabling integration with AI agents and tools such as the MCP Inspector and Claude Desktop, and it is deployable to Cloudflare Workers.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "http://localhost:8787/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:11.364Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:39:24.384Z"
  },
  "tags": [
    "dappier"
  ]
},
{
  "_id": {
    "$oid": "68289799a6f8dc721ceb423a"
  },
  "seq": {
    "$numberLong": "283"
  },
  "type": "STDIO",
  "url": "https://github.com/MCP-Mirror/domdomegg_airtable-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "airtable",
    "description": "This Model Context Protocol (MCP) server provides read and write access to Airtable databases using Airtable's API and personal access tokens; it enables LLMs to inspect schemas, list and search records, and manage data, tables, and fields within Airtable.",
    "command": "npx",
    "args": [
      "-y",
      "airtable-mcp-server",
      "pat123.abc123"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:13.094Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:39:48.855Z"
  },
  "tags": [
    "airtable"
  ]
},
{
  "_id": {
    "$oid": "68289799a6f8dc721ceb423c"
  },
  "seq": {
    "$numberLong": "284"
  },
  "type": "STDIO",
  "url": "https://github.com/AzureDevOpsAPI/Azure-DevOps",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "azureDevOps",
    "description": "This Azure DevOps MCP server implements the Model Context Protocol, enabling AI assistants to interact with Azure DevOps via its APIs; it supports operations on projects, work items, repositories, pipelines, and wikis, and it integrates with authentication methods such as Personal Access Tokens, Azure Identity, and Azure CLI.",
    "command": "npx",
    "args": [
      "-y",
      "@tiberriver256/mcp-server-azure-devops"
    ],
    "env": {
      "AZURE_DEVOPS_ORG_URL": "https://dev.azure.com/your-organization",
      "AZURE_DEVOPS_DEFAULT_PROJECT": "your-project-name",
      "AZURE_DEVOPS_AUTH_METHOD": "azure-identity"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:05:13.706Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:39:50.690Z"
  },
  "tags": [
    "azuredevops",
    "azure devops",
    "azure",
    "devops"
  ]
},
{
  "_id": {
    "$oid": "6828979ea6f8dc721ceb423e"
  },
  "seq": {
    "$numberLong": "285"
  },
  "type": "STDIO",
  "url": "https://github.com/MCP-Mirror/rezapex_shopify-mcp-server-main",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "shopify",
    "description": "This MCP server interacts with the Shopify API using GraphQL to manage products, customers, and orders, providing tools for searching, filtering, and tagging data; creating draft orders and discount codes; and managing webhooks using the @modelcontextprotocol/sdk.",
    "command": "npx",
    "args": [
      "-y",
      "shopify-mcp-server"
    ],
    "env": {
      "MYSHOPIFY_DOMAIN": "<YOUR_SHOP>.myshopify.com",
      "SHOPIFY_ACCESS_TOKEN": "<YOUR_ACCESS_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:05:18.202Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:39:52.083Z"
  },
  "tags": [
    "shopify"
  ]
},
{
  "_id": {
    "$oid": "6828979fa6f8dc721ceb4240"
  },
  "seq": {
    "$numberLong": "286"
  },
  "type": "STDIO",
  "url": "https://github.com/cablate/mcp-google-calendar",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "calendar",
    "description": "This MCP server implementation provides calendar management capabilities such as creating, listing, updating, and deleting events using the Model Context Protocol (MCP). It integrates with Google Calendar via a service account and can be used with Dive Desktop.",
    "command": "npx",
    "args": [
      "-y",
      "@cablate/mcp-google-calendar"
    ],
    "env": {
      "GOOGLE_CREDENTIALS_PATH": "your_credentials_path",
      "GOOGLE_CALENDAR_ID": "your_calendar_id",
      "GOOGLE_TIME_ZONE": "your_time_zone"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:05:19.183Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:40:24.195Z"
  },
  "tags": [
    "calendar"
  ]
},
{
  "_id": {
    "$oid": "682897a0a6f8dc721ceb4242"
  },
  "seq": {
    "$numberLong": "287"
  },
  "type": "STDIO",
  "url": "https://github.com/iuill/mcp_sse_sample",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "sse-sample",
    "description": "This MCP server implementation demonstrates the MCP protocol over Server-Sent Events (SSE) and provides several tools, including echoing messages, adding numbers, running long operations with progress notifications, sampling with an LLM, retrieving a tiny image, and printing environment variables; it also supports annotated messages and sends random-leveled log messages for debugging and configuration using technologies like Node.js and tools like npm.",
    "command": "npx",
    "args": [
      "-y",
      "mcp_sse_sample"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:20.590Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:40:26.181Z"
  },
  "tags": [
    "sse sample",
    "sse",
    "sample"
  ]
},
{
  "_id": {
    "$oid": "682897a1a6f8dc721ceb4244"
  },
  "seq": {
    "$numberLong": "288"
  },
  "type": "STDIO",
  "url": "https://github.com/johannesPettersson80/codesys-mcp-toolkit",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "codesys_local",
    "description": "This MCP server implementation, the `@codesys/mcp-toolkit`, facilitates communication between MCP clients and CODESYS V3 using the CODESYS Scripting Engine, enabling programmatic project management, POU manipulation, and code compilation via CODESYS, and it requires the user to provide the path to the CODESYS executable and the CODESYS profile name for proper configuration.",
    "command": "npx",
    "args": [
      "-y",
      "@codesys/mcp-toolkit",
      "--codesys-path",
      "C:\\Program Files\\Path\\To\\Your\\CODESYS\\Common\\CODESYS.exe",
      "--codesys-profile",
      "Your CODESYS Profile Name"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:21.250Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:40:50.630Z"
  },
  "tags": [
    "codesys local",
    "codesys",
    "local"
  ]
},
{
  "_id": {
    "$oid": "682897a6a6f8dc721ceb4246"
  },
  "seq": {
    "$numberLong": "289"
  },
  "type": "STDIO",
  "url": "https://github.com/plapinski/PHPocalypse-MCP",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "phpocalypse-mcp",
    "description": "This MCP server, implemented using Node, TSX, and NPM, executes predefined static analysis and testing tools, such as PHP-CS-Fixer, PHPStan, and PHPUnit, defined in a YAML configuration file for PHP projects, allowing integration with IDEs like Cursor by specifying command-line instructions.",
    "command": "npx",
    "args": [
      "tsx",
      "/Absolute/Path/To/PHPocalypse-MCP/src/index.ts",
      "--config",
      "/Absolute/Path/To/Your/PHP/Based/Project/phpocalypse-mcp.yaml"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:26.372Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:40:52.284Z"
  },
  "tags": [
    "phpocalypse",
    "php"
  ]
},
{
  "_id": {
    "$oid": "682897a7a6f8dc721ceb4248"
  },
  "seq": {
    "$numberLong": "290"
  },
  "type": "STDIO",
  "url": "https://github.com/slow-groovin/unstorage-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "unstorage",
    "description": "This MCP server implementation provides Key-Value storage functionality using unjs/unstorage and supports drivers such as memory, filesystem, Redis, HTTP, and MongoDB, communicating through environment variables for configuration and offering tools for item and metadata management.",
    "command": "npx",
    "args": [
      "/y",
      "@slow-groovin/unstorage-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:27.339Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:40:53.941Z"
  },
  "tags": [
    "unstorage",
    "un storage"
  ]
},
{
  "_id": {
    "$oid": "682897a8a6f8dc721ceb424a"
  },
  "seq": {
    "$numberLong": "291"
  },
  "type": "STDIO",
  "url": "https://github.com/MCP-Mirror/SimonB97_win-cli-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "windows-cli",
    "description": "This MCP server implementation facilitates secure, controlled command execution on Windows via PowerShell, CMD, and Git Bash shells, as well as on remote systems using SSH, and integrates with applications such as Claude Desktop via configurable JSON settings, offering features like command blocking, path restrictions, and argument validation.",
    "command": "npx",
    "args": [
      "-y",
      "@simonb97/server-win-cli"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:28.052Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:41:25.955Z"
  },
  "tags": [
    "windows cli",
    "windows",
    "cli",
    "command line interface",
    "command line"
  ]
},
{
  "_id": {
    "$oid": "682897a8a6f8dc721ceb424c"
  },
  "seq": {
    "$numberLong": "292"
  },
  "type": "STDIO",
  "url": "https://github.com/distantorigin/mcp-telnet",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "telnet",
    "description": "MCP-Telnet acts as a bridge between LLMs and telnet services, implementing the telnet protocol with MTTS identification and providing features like automatic reconnection, command timing, and session logging; it integrates with MCP and can be used via Claude Desktop for interacting with MUDs, legacy systems, and other text-based interfaces.",
    "command": "npx",
    "args": [
      "-y",
      "github:distantorigin/mcp-telnet"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:28.751Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:41:27.944Z"
  },
  "tags": [
    "telnet"
  ]
},
{
  "_id": {
    "$oid": "682897a9a6f8dc721ceb424e"
  },
  "seq": {
    "$numberLong": "293"
  },
  "type": "STDIO",
  "url": "https://github.com/gpaul-faldin/MCP_puppeteer_extra",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "puppeteer",
    "description": "This Model Context Protocol (MCP) server leverages Puppeteer-Extra with the Stealth Plugin to provide enhanced, human-like browser automation for Large Language Models (LLMs), enabling interactions such as navigation, screenshot capture, element clicking/filling/selection, and JavaScript execution, accessible through console logs and screenshot resources.",
    "command": "npx",
    "args": [
      "-y",
      "MCP_puppeteer_extra"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:29.427Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:41:52.213Z"
  },
  "tags": [
    "puppeteer"
  ]
},
{
  "_id": {
    "$oid": "682897aaa6f8dc721ceb4250"
  },
  "seq": {
    "$numberLong": "294"
  },
  "type": "STDIO",
  "url": "https://github.com/ibraheem4/github-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "github-ibraheem4",
    "description": "This MCP server enhances GitHub pull request management by providing structured PR templates, rich media attachments, and automated quality checklists using the Model Context Protocol; it integrates with tools like Claude Desktop and VSCode via the Cline extension, requiring a GitHub Personal Access Token.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-github"
    ],
    "env": {
      "GITHUB_TOKEN": "your_github_personal_access_token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:05:30.038Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:41:53.798Z"
  },
  "tags": [
    "github ibraheem4",
    "github",
    "ibraheem4"
  ]
},
{
  "_id": {
    "$oid": "682897aba6f8dc721ceb4252"
  },
  "seq": {
    "$numberLong": "295"
  },
  "type": "STDIO",
  "url": "https://github.com/dandeliongold/mcp-decent-sampler-drums",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "decent-sampler-drums",
    "description": "This MCP server, built with TypeScript, provides specialized tools for creating Decent Sampler drum kit presets by analyzing WAV files, generating XML configurations, and integrating with Claude Desktop via the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@dandeliongold/mcp-decent-sampler-drums"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:31.911Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:41:55.555Z"
  },
  "tags": [
    "decent sampler drums",
    "decent",
    "sampler",
    "drums"
  ]
},
{
  "_id": {
    "$oid": "682897aea6f8dc721ceb4254"
  },
  "seq": {
    "$numberLong": "296"
  },
  "type": "STDIO",
  "url": "https://github.com/upgrade-solutions/mcp-api-wrapper",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-api-wrapper",
    "description": "This MCP server implementation wraps an existing API, exposing its functionalities as tools using the Model Context Protocol over HTTP; it leverages StreamableHTTPServerTransport to handle requests and integrates with Claude by defining the server in the claude_desktop_config.json file.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "http://localhost:4000/mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:34.827Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:42:27.658Z"
  },
  "tags": [
    "api wrapper",
    "api",
    "wrapper"
  ]
},
{
  "_id": {
    "$oid": "682897b0a6f8dc721ceb4256"
  },
  "seq": {
    "$numberLong": "297"
  },
  "type": "STDIO",
  "url": "https://github.com/ngyngcphu/payload-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "@ngyngcphu/payload-mcp",
    "description": "The Payload MCP server implements the Model Context Protocol, providing AI assistants with tools to generate Payload CMS code, validate configurations, scaffold projects, and execute specialized queries, utilizing technologies like Node.js and interacting with Payload CMS through its APIs.",
    "command": "npx",
    "args": [
      "@ngyngcphu/payload-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:36.150Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:42:29.660Z"
  },
  "tags": [
    "ngyngcphu",
    "payload",
    "payload mcp"
  ]
},
{
  "_id": {
    "$oid": "682897b1a6f8dc721ceb4258"
  },
  "seq": {
    "$numberLong": "298"
  },
  "type": "STDIO",
  "url": "https://github.com/crunchloop/mcp-teamtailor",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "teamtailor",
    "description": "The MCP Teamtailor server implements the Model Context Protocol to integrate with the Teamtailor API and provides tools for listing and filtering candidates, as well as retrieving individual candidate details using HTTP over stdio transport.",
    "command": "npx",
    "args": [
      "-y",
      "@crunchloop/mcp-teamtailor"
    ],
    "env": {
      "TEAMTAILOR_URL": "https://api.teamtailor.com/v1",
      "TEAMTAILOR_API_KEY": "XXXX"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:05:37.223Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:42:53.812Z"
  },
  "tags": [
    "teamtailor",
    "team",
    "tailor"
  ]
},
{
  "_id": {
    "$oid": "682897b6a6f8dc721ceb425a"
  },
  "seq": {
    "$numberLong": "299"
  },
  "type": "STDIO",
  "url": "https://github.com/instructa/nowledge",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-deepwiki",
    "description": "This MCP server implementation fetches content from Deepwiki URLs using HTTP requests, sanitizes and converts it to Markdown, and returns either a single aggregated document or a structured list of pages via MCP; it is configured through environment variables and integrates with MCP-compatible clients through a `deepwiki_fetch` tool, using JSON for requests and responses.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-deepwiki@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:05:42.250Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:42:55.559Z"
  },
  "tags": [
    "deepwiki",
    "deep wiki",
    "deep",
    "wiki"
  ]
},
{
  "_id": {
    "$oid": "682898a6a6f8dc721ceb425c"
  },
  "seq": {
    "$numberLong": "300"
  },
  "type": "STDIO",
  "url": "https://github.com/microsoft/playwright-mcp",
  "stars": 10088,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "playwright",
    "description": "The Playwright MCP server enables LLMs to automate web browser interactions by leveraging Playwright's accessibility tree to provide structured snapshots, supporting integrations with tools like VS Code and utilizing the Model Context Protocol (MCP) via technologies like SSE for communication.",
    "command": "npx",
    "args": [
      "@playwright/mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:09:42.142Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:42:57.721Z"
  },
  "tags": [
    "playwright"
  ]
},
{
  "_id": {
    "$oid": "682898a6a6f8dc721ceb425e"
  },
  "seq": {
    "$numberLong": "301"
  },
  "type": "STDIO",
  "url": "https://github.com/idosal/git-mcp",
  "stars": 2458,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gitmcp",
    "description": "GitMCP serves as a Model Context Protocol (MCP) server, enabling AI tools like Cursor to access up-to-date documentation and code from public GitHub repositories and GitHub Pages; it uses the MCP protocol to allow AI assistants to fetch documentation, search content, and search code directly from the repository or documentation site.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "https://gitmcp.io/{owner}/{repo}"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:09:42.806Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:43:29.487Z"
  },
  "tags": [
    "git"
  ]
},
{
  "_id": {
    "$oid": "682898a7a6f8dc721ceb4260"
  },
  "seq": {
    "$numberLong": "302"
  },
  "type": "STDIO",
  "url": "https://github.com/cloudflare/mcp-server-cloudflare",
  "stars": 2114,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "cloudflare-observability",
    "description": "This repository provides a collection of Cloudflare Model Context Protocol (MCP) servers that enable MCP clients to interact with Cloudflare services using natural language and the standardized MCP protocol, allowing them to read configurations, process data, and manage services such as Workers, Radar, and AI Gateway via SSE protocol.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "https://observability.mcp.cloudflare.com/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:09:43.534Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:43:31.488Z"
  },
  "tags": [
    "cloudflare observability",
    "cloudflare",
    "observability"
  ]
},
{
  "_id": {
    "$oid": "682898a9a6f8dc721ceb4262"
  },
  "seq": {
    "$numberLong": "303"
  },
  "type": "STDIO",
  "url": "https://github.com/mobile-next/mobile-mcp",
  "stars": 625,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mobile-mcp",
    "description": "This MCP server implements the Model Context Protocol, enabling mobile automation and development across iOS and Android emulators, simulators, and physical devices through accessibility snapshots or screenshot-based coordinate taps; it leverages native accessibility trees and integrates with LLMs and agent frameworks for tasks such as native app automation and data extraction.",
    "command": "npx",
    "args": [
      "-y",
      "@mobilenext/mobile-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:09:45.447Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:43:55.584Z"
  },
  "tags": [
    "mobile",
    "mobile"
  ]
},
{
  "_id": {
    "$oid": "682898aaa6f8dc721ceb4264"
  },
  "seq": {
    "$numberLong": "304"
  },
  "type": "STDIO",
  "url": "https://github.com/samanhappy/mcphub",
  "stars": 273,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "amap",
    "description": "MCPHub aggregates multiple Model Context Protocol (MCP) servers into separate Streamable HTTP and SSE endpoints, managed via a centralized web dashboard; it supports protocols like stdio and SSE, secures access using JWT and bcrypt, and integrates with popular servers such as `amap-maps`, `playwright`, `fetch`, and `slack`.",
    "command": "npx",
    "args": [
      "-y",
      "@amap/amap-maps-mcp-server"
    ],
    "env": {
      "AMAP_MAPS_API_KEY": "your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:09:46.354Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:43:57.130Z"
  },
  "tags": [
    "amap"
  ]
},
{
  "_id": {
    "$oid": "682898aba6f8dc721ceb4266"
  },
  "seq": {
    "$numberLong": "305"
  },
  "type": "STDIO",
  "url": "https://github.com/apify/actors-mcp-server",
  "stars": 199,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "actors-mcp-server",
    "description": "The Apify MCP server enables AI agents to utilize Apify Actors as tools for tasks like data extraction and web scraping, supporting both Server-Sent Events (SSE) and standard input/output (stdio) protocols, and integrates with platforms like Claude Desktop, VS Code and LibreChat, enabling interaction with Apify Actors using the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@apify/actors-mcp-server"
    ],
    "env": {
      "APIFY_TOKEN": "your-apify-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:09:47.354Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:43:59.234Z"
  },
  "tags": [
    "actors",
    "actors"
  ]
},
{
  "_id": {
    "$oid": "682898aca6f8dc721ceb4268"
  },
  "seq": {
    "$numberLong": "306"
  },
  "type": "STDIO",
  "url": "https://github.com/mongodb-js/mongodb-mcp-server",
  "stars": 128,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "MongoDB",
    "description": "The MongoDB MCP server implements the Model Context Protocol, enabling interaction with MongoDB databases and MongoDB Atlas by providing a range of tools accessed through command-line arguments or environment variables; it uses either a MongoDB connection string or Atlas API credentials for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "mongodb-mcp-server",
      "--connectionString",
      "mongodb://localhost:27017/myDatabase"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:09:48.736Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:44:31.880Z"
  },
  "tags": [
    "mongodb",
    "mongo",
    "db"
  ]
},
{
  "_id": {
    "$oid": "682898ada6f8dc721ceb426a"
  },
  "seq": {
    "$numberLong": "307"
  },
  "type": "STDIO",
  "url": "https://github.com/metatool-ai/mcp-server-metamcp",
  "stars": 107,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "MetaMCP",
    "description": "The MetaMCP MCP Server acts as a proxy, aggregating and routing tool, prompt, and resource requests across multiple underlying MCP servers based on configurations fetched from the MetaMCP App, supporting stdio and SSE transports, and offering Docker compatibility with URL transformation.",
    "command": "npx",
    "args": [
      "-y",
      "@metamcp/mcp-server-metamcp@latest"
    ],
    "env": {
      "METAMCP_API_KEY": "<your api key>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:09:49.461Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:44:33.582Z"
  },
  "tags": [
    "meta",
    "metamcp"
  ]
},
{
  "_id": {
    "$oid": "682898aea6f8dc721ceb426c"
  },
  "seq": {
    "$numberLong": "308"
  },
  "type": "STDIO",
  "url": "https://github.com/akuity/argocd-mcp",
  "stars": 86,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "argocd-mcp",
    "description": "The Argo CD MCP server enables AI assistants to interact with Argo CD applications through natural language, integrating with MCP clients like Visual Studio Code via stdio and Server-Sent Events (SSE) protocols and providing access to Argo CD resources and operations.",
    "command": "npx",
    "args": [
      "argocd-mcp@latest",
      "stdio"
    ],
    "env": {
      "ARGOCD_API_TOKEN": "<argocd_token>",
      "ARGOCD_BASE_URL": "<argocd_url>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:09:50.466Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:44:57.174Z"
  },
  "tags": [
    "argocd",
    "argo cd"
  ]
},
{
  "_id": {
    "$oid": "682898afa6f8dc721ceb426e"
  },
  "seq": {
    "$numberLong": "309"
  },
  "type": "STDIO",
  "url": "https://github.com/yuniko-software/minecraft-mcp-server",
  "stars": 71,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "minecraft",
    "description": "This MCP server implements a Minecraft bot controlled by large language models through the Model Context Protocol (MCP), utilizing the Mineflayer API to enable Claude and other supported models to perform actions within the game, such as movement, block interaction, and communication.",
    "command": "npx",
    "args": [
      "-y",
      "github:yuniko-software/minecraft-mcp-server",
      "--host",
      "localhost",
      "--port",
      "25565",
      "--username",
      "ClaudeBot"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:09:51.474Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:44:58.637Z"
  },
  "tags": [
    "minecraft"
  ]
},
{
  "_id": {
    "$oid": "682898b0a6f8dc721ceb4270"
  },
  "seq": {
    "$numberLong": "310"
  },
  "type": "STDIO",
  "url": "https://github.com/winor30/mcp-server-datadog",
  "stars": 62,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "github",
    "description": "This MCP server integrates with the Datadog API to provide observability tools, such as retrieving incidents, monitors, logs, dashboards, metrics, APM traces, and RUM data, using HTTP requests with API and application keys for authentication. It leverages JSON for data exchange and supports integration with Claude Desktop via standard input/output communication.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-github"
    ],
    "env": {
      "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:09:52.372Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:45:10.724Z"
  },
  "tags": [
    "github"
  ]
},
{
  "_id": {
    "$oid": "682898b1a6f8dc721ceb4272"
  },
  "seq": {
    "$numberLong": "311"
  },
  "type": "STDIO",
  "url": "https://github.com/square/square-mcp-server",
  "stars": 54,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp_square_api",
    "description": "This MCP server implementation enables AI assistants to interact with Square's Connect API using the Model Context Protocol over SSE, supporting both local and remote operation with OAuth authentication, and integrates with tools like Goose and Claude Desktop using `npx` for streamlined configuration.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "https://mcp.squareup.com/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:09:53.477Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:45:33.708Z"
  },
  "tags": [
    "square api",
    "square",
    "api"
  ]
},
{
  "_id": {
    "$oid": "682898b2a6f8dc721ceb4274"
  },
  "seq": {
    "$numberLong": "312"
  },
  "type": "STDIO",
  "url": "https://github.com/heroku/heroku-mcp-server",
  "stars": 41,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "heroku",
    "description": "The Heroku Platform MCP Server provides a Model Context Protocol (MCP) implementation that enables large language models to interact with Heroku Platform resources through the Heroku API, utilizing tools exposed via `npx @heroku/mcp-server` and secured with Heroku authorization tokens for application, process, add-on, pipeline, team, space, and PostgreSQL database management.",
    "command": "npx",
    "args": [
      "-y",
      "@heroku/mcp-server"
    ],
    "env": {
      "HEROKU_API_KEY": "<YOUR_HEROKU_AUTH_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:09:54.709Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:45:35.673Z"
  },
  "tags": [
    "heroku"
  ]
},
{
  "_id": {
    "$oid": "682898b3a6f8dc721ceb4276"
  },
  "seq": {
    "$numberLong": "313"
  },
  "type": "STDIO",
  "url": "https://github.com/heltonteixeira/openrouterai",
  "stars": 40,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "openrouterai",
    "description": "This MCP server, built with TypeScript, provides a type-safe interface to access OpenRouter.ai's AI models via their API, offering features such as model validation, caching, rate limiting, and a unified ToolResult response format for streamlined integration into MCP-compatible applications.",
    "command": "npx",
    "args": [
      "@mcpservers/openrouterai"
    ],
    "env": {
      "OPENROUTER_DEFAULT_MODEL": "optional-default-model",
      "OPENROUTER_API_KEY": "your-api-key-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:09:55.340Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:45:58.980Z"
  },
  "tags": [
    "openrouterai",
    "openrouter ai",
    "openrouter",
    "ai"
  ]
},
{
  "_id": {
    "$oid": "682898b4a6f8dc721ceb4278"
  },
  "seq": {
    "$numberLong": "314"
  },
  "type": "STDIO",
  "url": "https://github.com/CircleCI-Public/mcp-server-circleci",
  "stars": 36,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "circleci-mcp-server",
    "description": "The CircleCI MCP Server implements the Model Context Protocol (MCP) to enable natural language interaction with CircleCI through IDEs like Cursor and VS Code, as well as other MCP-supported clients like Claude and Windsurf; it leverages the CircleCI API to provide tools for retrieving build logs, finding flaky tests, obtaining pipeline status, managing test results, validating configurations, generating prompt templates, listing followed projects, and running pipelines.",
    "command": "npx",
    "args": [
      "-y",
      "@circleci/mcp-server-circleci"
    ],
    "env": {
      "CIRCLECI_TOKEN": "your-circleci-token",
      "CIRCLECI_BASE_URL": "https://circleci.com"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:09:56.381Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:46:01.131Z"
  },
  "tags": [
    "circleci",
    "circle ci"
  ]
},
{
  "_id": {
    "$oid": "682898b6a6f8dc721ceb427a"
  },
  "seq": {
    "$numberLong": "315"
  },
  "type": "STDIO",
  "url": "https://github.com/pulumi/mcp-server",
  "stars": 22,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "pulumi",
    "description": "This MCP server implements the Model Context Protocol to enable programmatic Pulumi operations, such as previews, deployments, and output retrieval, via the Pulumi Automation API and Pulumi Cloud API; it exposes handlers for executing Pulumi commands like `preview`, `up`, `stack-output`, `get-resource`, and `list-resources` using MCP requests.",
    "command": "npx",
    "args": [
      "@pulumi/mcp-server@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:09:58.641Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:46:12.183Z"
  },
  "tags": [
    "pulumi"
  ]
},
{
  "_id": {
    "$oid": "682898b7a6f8dc721ceb427c"
  },
  "seq": {
    "$numberLong": "316"
  },
  "type": "STDIO",
  "url": "https://github.com/datastax/astra-db-mcp",
  "stars": 22,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "astra-db-mcp",
    "description": "This MCP server enables Large Language Models to interact with Astra DB using the Model Context Protocol, providing tools to manage collections and records through the Astra DB API with capabilities such as creating, updating, deleting, listing, and finding data.",
    "command": "npx",
    "args": [
      "-y",
      "@datastax/astra-db-mcp"
    ],
    "env": {
      "ASTRA_DB_APPLICATION_TOKEN": "your_astra_db_token",
      "ASTRA_DB_API_ENDPOINT": "your_astra_db_endpoint"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:09:59.352Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:46:35.200Z"
  },
  "tags": [
    "astra db",
    "astra",
    "db"
  ]
},
{
  "_id": {
    "$oid": "682898b8a6f8dc721ceb427e"
  },
  "seq": {
    "$numberLong": "317"
  },
  "type": "STDIO",
  "url": "https://github.com/api7/apisix-mcp",
  "stars": 22,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "apisix-mcp",
    "description": "The APISIX Model Context Protocol (MCP) server acts as a bridge between large language models (LLMs) and the APISIX Admin API, enabling natural language interaction for managing APISIX resources via the MCP protocol; it supports operations on routes, services, upstreams, plugins, SSL certificates, consumers, and other API resources by translating natural language requests into APISIX Admin API calls.",
    "command": "npx",
    "args": [
      "-y",
      "apisix-mcp"
    ],
    "env": {
      "APISIX_SERVER_HOST": "your-apisix-server-host",
      "APISIX_SERVER_PORT": "your-apisix-server-port",
      "APISIX_ADMIN_API_PREFIX": "your-apisix-admin-api-prefix",
      "APISIX_ADMIN_API_PORT": "your-apisix-admin-api-port",
      "APISIX_ADMIN_KEY": "your-apisix-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:10:00.039Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:46:37.513Z"
  },
  "tags": [
    "apisix",
    "api six"
  ]
},
{
  "_id": {
    "$oid": "682898b9a6f8dc721ceb4280"
  },
  "seq": {
    "$numberLong": "318"
  },
  "type": "STDIO",
  "url": "https://github.com/winterjung/mcp-korean-spell",
  "stars": 19,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "korean-spell-checker",
    "description": "The mcp-korean-spell server implements a Korean spell checker using the Model Context Protocol (MCP) to integrate with client applications, utilizing the NAVER Korean Spell Checker API to analyze and correct Korean text for spelling and grammar errors.",
    "command": "npx",
    "args": [
      "-y",
      "@winterjung/mcp-korean-spell"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:10:01.006Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:47:00.688Z"
  },
  "tags": [
    "korean spell checker",
    "korean",
    "spell",
    "checker",
    "korean-spell-checker"
  ]
},
{
  "_id": {
    "$oid": "682898baa6f8dc721ceb4282"
  },
  "seq": {
    "$numberLong": "319"
  },
  "type": "STDIO",
  "url": "https://github.com/jango-blockchained/advanced-homeassistant-mcp",
  "stars": 17,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "homeassistant-mcp",
    "description": "The Model Context Protocol (MCP) server provides a bridge between AI models and Home Assistant, enabling smart home control and information retrieval via a typed and extensible interface using technologies such as HTTP/REST API with Server-Sent Events for streaming, standard I/O for CLI integration, and parameter validation with Zod schemas, and integrates with AI assistants like Claude and Cursor.",
    "command": "npx",
    "args": [
      "homeassistant-mcp"
    ],
    "env": {
      "HASS_HOST": "http://your_home_assistant_host:8123",
      "HASS_TOKEN": "your_home_assistant_token_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:10:02.251Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:47:03.447Z"
  },
  "tags": [
    "homeassistant",
    "home assistant",
    "home",
    "assistant"
  ]
},
{
  "_id": {
    "$oid": "682898baa6f8dc721ceb4284"
  },
  "seq": {
    "$numberLong": "320"
  },
  "type": "STDIO",
  "url": "https://github.com/aliyun/alibabacloud-dataworks-mcp-server",
  "stars": 15,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "alibabacloud-dataworks-mcp-server",
    "description": "This MCP server enables AI agents to interact with Aliyun DataWorks by implementing the Model Context Protocol and utilizing the DataWorks Open API; it manages DataWorks resources and provides standardized cloud resource interactions through technologies like Node.js and dependencies such as @alicloud/dataworks-public20240518.",
    "command": "npx",
    "args": [
      "alibabacloud-dataworks-mcp-server"
    ],
    "env": {
      "TOOL_NAMES": "optional_your_tool_names_here_ex_ListProjects",
      "TOOL_CATEGORIES": "optional_your_tool_categories_here_ex_UTILS",
      "ALIBABA_CLOUD_ACCESS_KEY_ID": "your_alibaba_cloud_access_key_id",
      "ALIBABA_CLOUD_ACCESS_KEY_SECRET": "your_alibaba_cloud_access_key_secret",
      "REGION": "your_dataworks_open_api_region_id_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:10:02.958Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:47:13.938Z"
  },
  "tags": [
    "alibabacloud dataworks",
    "alibabacloud",
    "dataworks",
    "alibaba cloud dataworks",
    "alibaba",
    "cloud"
  ]
},
{
  "_id": {
    "$oid": "682898bca6f8dc721ceb4286"
  },
  "seq": {
    "$numberLong": "321"
  },
  "type": "STDIO",
  "url": "https://github.com/PaddleHQ/paddle-mcp-server",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "paddle",
    "description": "This MCP server implements the Model Context Protocol to provide access to the Paddle Billing API, enabling listing and creation of products, prices, customers, transactions, and subscriptions, as well as custom financial reports. It integrates with Paddle Billing using API keys and supports both sandbox and production environments.",
    "command": "npx",
    "args": [
      "-y",
      "@paddle/paddle-mcp",
      "--api-key=PADDLE_API_KEY",
      "--environment=(sandbox|production)"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:10:04.020Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:47:36.980Z"
  },
  "tags": [
    "paddle"
  ]
},
{
  "_id": {
    "$oid": "682898bca6f8dc721ceb4288"
  },
  "seq": {
    "$numberLong": "322"
  },
  "type": "STDIO",
  "url": "https://github.com/1mcp-app/agent",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "web-server",
    "description": "The 1MCP server acts as a unified Model Context Protocol (MCP) server by aggregating multiple MCP servers into a single interface, communicating with AI assistants over HTTP using Server-Sent Events (SSE) and with backend MCP servers via HTTP or stdio; it supports dynamic configuration reloading and server filtering based on tags.",
    "command": "uvx",
    "args": [
      "mcp-server-fetch"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:10:04.726Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:47:39.265Z"
  },
  "tags": [
    "web",
    "web server"
  ]
},
{
  "_id": {
    "$oid": "682898bfa6f8dc721ceb428a"
  },
  "seq": {
    "$numberLong": "323"
  },
  "type": "STDIO",
  "url": "https://github.com/ramidecodes/mcp-server-notion",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "Notion",
    "description": "This Model Context Protocol (MCP) server integrates with Notion using the official Notion SDK, enabling AI models to search, query databases, manage pages and blocks, and handle users and comments within Notion workspaces; it configures through command-line arguments, environment variables, or JSON, and supports tools like Claude Desktop, Cursor AI, and Claude.ai.",
    "command": "npx",
    "args": [
      "@ramidecodes/mcp-server-notion@latest",
      "-y",
      "--api-key=your-notion-integration-key"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:10:07.072Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:48:02.417Z"
  },
  "tags": [
    "notion"
  ]
},
{
  "_id": {
    "$oid": "682898c1a6f8dc721ceb428c"
  },
  "seq": {
    "$numberLong": "324"
  },
  "type": "STDIO",
  "url": "https://github.com/noditlabs/nodit-mcp-server",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "nodit",
    "description": "The Nodit MCP server connects AI agents and developers to multi-chain blockchain data through JSON-RPC over stdio, leveraging Nodit's Web3 infrastructure to provide access to normalized data via Node APIs, Web3 Data APIs, and GraphQL Indexer APIs for networks like Ethereum, Aptos, and Bitcoin.",
    "command": "npx",
    "args": [
      "@noditlabs/nodit-mcp-server@latest"
    ],
    "env": {
      "NODIT_API_KEY": "****"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:10:09.769Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:48:05.086Z"
  },
  "tags": [
    "nodit"
  ]
},
{
  "_id": {
    "$oid": "682898c4a6f8dc721ceb428e"
  },
  "seq": {
    "$numberLong": "325"
  },
  "type": "STDIO",
  "url": "https://github.com/gentoro-GT/mcp-nodejs-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gentoro",
    "description": "The Gentoro MCP Server enables agents like Claude to interact with Gentoro bridges and their underlying tools and data sources by exposing Gentoro's functionalities through an MCP interface, configurable via environment variables such as `GENTORO_API_KEY`, `GENTORO_BRIDGE_UID`, and `GENTORO_BASE_URL` or a combined `GENTORO_KEY` using a NodeJS implementation invoked by `npx`.",
    "command": "npx",
    "args": [
      "-y",
      "@gentoro/mcp-nodejs-server"
    ],
    "env": {
      "GENTORO_BRIDGE_UID": "<your bridge uid>",
      "GENTORO_BASE_URL": "<url where gentoro is hosted>",
      "GENTORO_API_KEY": "<your api key>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:10:12.317Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:40:32.315Z"
  },
  "tags": [
    "gentoro"
  ]
},
{
  "_id": {
    "$oid": "682898c5a6f8dc721ceb4290"
  },
  "seq": {
    "$numberLong": "326"
  },
  "type": "STDIO",
  "url": "https://github.com/aliyun/alibabacloud-devops-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "yunxiao",
    "description": "The Yunxiao MCP server enables AI assistants to interact with the Yunxiao platform via its API, providing capabilities for code repository management, file operations, code review, project management, pipeline management, and package management, and integrating with tools for organization, code, project, and pipeline tasks via a Personal Access Token.",
    "command": "npx",
    "args": [
      "-y",
      "alibabacloud-devops-mcp-server"
    ],
    "env": {
      "YUNXIAO_ACCESS_TOKEN": "<YOUR_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:10:13.049Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:48:38.642Z"
  },
  "tags": [
    "yunxiao"
  ]
},
{
  "_id": {
    "$oid": "682898c6a6f8dc721ceb4292"
  },
  "seq": {
    "$numberLong": "327"
  },
  "type": "STDIO",
  "url": "https://github.com/goperigon/perigon-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "perigon_news_api",
    "description": "The Perigon MCP server implementation provides access to the Perigon news API, enabling users to fetch trending news headlines and search news articles through the `get_top_headlines` and `read_news_articles` tools by connecting via the MCP protocol using a remote proxy and an API key for authorization.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "https://mcp.perigon.io/v1/sse",
      "--header",
      "Authorization: Bearer ${PERIGON_API_KEY}"
    ],
    "env": {
      "PERIGON_API_KEY": "..."
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:10:14.710Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:48:40.999Z"
  },
  "tags": [
    "perigon news api",
    "perigon",
    "news",
    "api",
    "news api"
  ]
},
{
  "_id": {
    "$oid": "682898c7a6f8dc721ceb4294"
  },
  "seq": {
    "$numberLong": "328"
  },
  "type": "STDIO",
  "url": "https://github.com/mjpitz/mcp-rfc",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "rfc-server",
    "description": "This MCP server fetches, parses, and caches RFC documents from ietf.org, exposing tools to retrieve RFCs by number, search by keyword, and extract specific sections, using both HTML and TXT formats and communicating via the MCP protocol.",
    "command": "npx",
    "args": [
      "@mjpitz/mcp-rfc"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:10:15.387Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:49:04.013Z"
  },
  "tags": [
    "rfc",
    "rfc"
  ]
},
{
  "_id": {
    "$oid": "682898c9a6f8dc721ceb4296"
  },
  "seq": {
    "$numberLong": "329"
  },
  "type": "STDIO",
  "url": "https://github.com/datafe/quick-chart-mcp",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "quick-chart-mcp",
    "description": "This MCP server implements the Model Context Protocol to provide chart tools that interact with the Quick Chart service, allowing users to generate chart image links and install the Quick Chart service locally; it uses Node.js and supports installation via npm or Smithery.",
    "command": "npx",
    "args": [
      "quick-chart-mcp@1.0.13"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:10:17.667Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:49:06.617Z"
  },
  "tags": [
    "quick chart",
    "quick",
    "chart",
    "quick-chart"
  ]
},
{
  "_id": {
    "$oid": "682898cda6f8dc721ceb4298"
  },
  "seq": {
    "$numberLong": "330"
  },
  "type": "STDIO",
  "url": "https://github.com/AzBuilder/mcp-server-terrakube",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "terrakube",
    "description": "The Terrakube MCP server implements a Model Context Protocol interface using TypeScript, offering comprehensive integration with the Terrakube API to manage workspaces, variables, modules, and organizations. It facilitates CRUD operations via API calls and uses environment variables for configuration.",
    "command": "npx",
    "args": [
      "-y",
      "@terrakube/mcp-server"
    ],
    "env": {
      "TERRAKUBE_PAT_TOKEN": "<YOUR_PAT_TOKEN>",
      "TERRAKUBE_API_URL": "<YOUR_API_URL>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:10:21.925Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:49:17.185Z"
  },
  "tags": [
    "terrakube",
    "terra",
    "kube"
  ]
},
{
  "_id": {
    "$oid": "682898cea6f8dc721ceb429a"
  },
  "seq": {
    "$numberLong": "331"
  },
  "type": "STDIO",
  "url": "https://github.com/rgarcia/mcp-server-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "fetch",
    "description": "This MCP server implementation wraps existing stdio MCP servers and exposes them over a websocket, enabling programmatic interaction via the Model Context Protocol SDK's WebSocketClientTransport; it facilitates easier management and deployment of MCP servers, including generating Dockerfiles for specific configurations.",
    "command": "uvx",
    "args": [
      "mcp-server-fetch"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:10:22.903Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:49:40.229Z"
  },
  "tags": [
    "fetch"
  ]
},
{
  "_id": {
    "$oid": "682898cfa6f8dc721ceb429c"
  },
  "seq": {
    "$numberLong": "332"
  },
  "type": "STDIO",
  "url": "https://github.com/ONLYOFFICE/docspace-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "onlyoffice-docspace",
    "description": "This MCP server implements the Model Context Protocol for ONLYOFFICE DocSpace and provides tools for managing files and folders, retrieving document information, handling room security, and accessing portal settings via the DocSpace API.",
    "command": "npx",
    "args": [
      "--yes",
      "@onlyoffice/docspace-mcp"
    ],
    "env": {
      "DOCSPACE_API_KEY": "your-api-key",
      "DOCSPACE_BASE_URL": "https://your-instance.onlyoffice.com"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:10:23.665Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:49:42.803Z"
  },
  "tags": [
    "onlyoffice docspace",
    "onlyoffice",
    "docspace"
  ]
},
{
  "_id": {
    "$oid": "682898d4a6f8dc721ceb429e"
  },
  "seq": {
    "$numberLong": "333"
  },
  "type": "STDIO",
  "url": "https://github.com/MCP-Mirror/metatool-ai_mcp-server-metamcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "MetaMCP",
    "description": "The MetaMCP MCP Server acts as a proxy, aggregating multiple MCP servers into one unified interface by fetching configurations from the MetaMCP App via API calls and routing requests to the appropriate underlying server; it supports any MCP client and can be installed using Smithery or manually via npm.",
    "command": "npx",
    "args": [
      "-y",
      "@metamcp/mcp-server-metamcp@latest"
    ],
    "env": {
      "METAMCP_API_KEY": "<your api key>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:10:28.430Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:50:05.898Z"
  },
  "tags": [
    "meta"
  ]
},
{
  "_id": {
    "$oid": "682898d5a6f8dc721ceb42a0"
  },
  "seq": {
    "$numberLong": "334"
  },
  "type": "STDIO",
  "url": "https://github.com/weerofun/kaiafun-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "puppeteer",
    "description": "This MCP server implementation, built with TypeScript, provides token listing, trading, and Kaia blockchain interaction capabilities for the KaiaFun protocol using the Model Context Protocol; it integrates with Claude Desktop through configuration and leverages a TypeScript SDK for core functionality, including token management and KAIA transactions.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-puppeteer"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:10:29.500Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:50:08.251Z"
  },
  "tags": [
    "puppeteer"
  ]
},
{
  "_id": {
    "$oid": "682898f6a6f8dc721ceb42a2"
  },
  "seq": {
    "$numberLong": "335"
  },
  "type": "STDIO",
  "url": "https://github.com/moiri-gamboni/image-reader-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "imageReader",
    "description": "This MCP server, implemented using FastMCP, lists image files in a specified directory and reads image file content, returning it as base64 encoded data. It supports common image formats and integrates with MCP clients via a JSON configuration, communicating using string parameters and returns.",
    "command": "npx",
    "args": [
      "image-reader-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:02.703Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:50:18.772Z"
  },
  "tags": [
    "imagereader",
    "image reader",
    "image",
    "reader"
  ]
},
{
  "_id": {
    "$oid": "682898faa6f8dc721ceb42a4"
  },
  "seq": {
    "$numberLong": "336"
  },
  "type": "STDIO",
  "url": "https://github.com/upstash/context7",
  "stars": 8009,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "context7",
    "description": "Context7 MCP fetches up-to-date code examples and documentation directly from source code repositories and integrates them into prompts for Large Language Models via the Model Context Protocol (MCP). It utilizes tools like `resolve-library-id` and `get-library-docs` accessible through command-line interfaces and integrates with editors like Cursor, VS Code, and Zed using technologies like npx, bunx, and deno.",
    "command": "npx",
    "args": [
      "-y",
      "@upstash/context7-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:06.389Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:50:42.026Z"
  },
  "tags": [
    "context7",
    "context"
  ]
},
{
  "_id": {
    "$oid": "682898fba6f8dc721ceb42a6"
  },
  "seq": {
    "$numberLong": "337"
  },
  "type": "STDIO",
  "url": "https://github.com/mendableai/firecrawl-mcp-server",
  "stars": 3109,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "firecrawl-mcp",
    "description": "The Firecrawl MCP server provides web scraping, crawling, content extraction, and deep research capabilities using the Model Context Protocol, integrating with Firecrawl's API via its API key or a self-hosted instance, and supports formats such as markdown and HTML.",
    "command": "npx",
    "args": [
      "-y",
      "firecrawl-mcp"
    ],
    "env": {
      "FIRECRAWL_API_KEY": "YOUR-API-KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:07.077Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:50:44.813Z"
  },
  "tags": [
    "firecrawl",
    "fire crawl",
    "fire",
    "crawl"
  ]
},
{
  "_id": {
    "$oid": "682898fba6f8dc721ceb42a8"
  },
  "seq": {
    "$numberLong": "338"
  },
  "type": "STDIO",
  "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
  "stars": 2834,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "desktop-commander",
    "description": "Desktop Commander MCP extends the Model Context Protocol (MCP) Filesystem Server to provide Claude Desktop with the ability to execute terminal commands, manage processes, perform filesystem operations, and edit code using search/replace blocks; it communicates using command execution, file system read/write operations, and server configuration settings via MCP.",
    "command": "npx",
    "args": [
      "-y",
      "@wonderwhy-er/desktop-commander"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:07.670Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:51:08.053Z"
  },
  "tags": [
    "desktop commander",
    "desktop",
    "commander"
  ]
},
{
  "_id": {
    "$oid": "682898fca6f8dc721ceb42aa"
  },
  "seq": {
    "$numberLong": "339"
  },
  "type": "STDIO",
  "url": "https://github.com/ppl-ai/modelcontextprotocol",
  "stars": 1122,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "perplexity-ask",
    "description": "This MCP server implementation provides Claude and other applications with real-time, web-wide research capabilities by integrating with the Perplexity Sonar API, allowing these applications to leverage live web searches based on conversation messages using the Model Context Protocol (MCP).",
    "command": "npx",
    "args": [
      "-y",
      "server-perplexity-ask"
    ],
    "env": {
      "PERPLEXITY_API_KEY": "YOUR_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:08.361Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:51:09.663Z"
  },
  "tags": [
    "perplexity ask",
    "perplexity",
    "ask"
  ]
},
{
  "_id": {
    "$oid": "682898fea6f8dc721ceb42ac"
  },
  "seq": {
    "$numberLong": "340"
  },
  "type": "STDIO",
  "url": "https://github.com/joshuayoes/ios-simulator-mcp",
  "stars": 336,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ios-simulator",
    "description": "This MCP server enables interaction with iOS simulators through the Model Context Protocol by providing tools to query UI elements, simulate user interactions such as taps and swipes, input text, and capture screenshots; it leverages Node.js, Xcode, and Facebook IDB, and integrates with AI assistants via tools like Cursor and Claude Code.",
    "command": "npx",
    "args": [
      "-y",
      "ios-simulator-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:10.199Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:51:20.471Z"
  },
  "tags": [
    "ios simulator",
    "ios",
    "simulator"
  ]
},
{
  "_id": {
    "$oid": "682898fea6f8dc721ceb42ae"
  },
  "seq": {
    "$numberLong": "341"
  },
  "type": "STDIO",
  "url": "https://github.com/jerhadf/linear-mcp-server",
  "stars": 299,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "linear",
    "description": "This MCP server provides integration with the Linear issue tracking system, enabling LLMs to create, update, search, and comment on Linear issues using the Model Context Protocol over HTTP; it leverages the Linear API and offers tools for issue management, along with resources for viewing issue details, team issues, user assignments, and organization information.",
    "command": "npx",
    "args": [
      "-y",
      "linear-mcp-server"
    ],
    "env": {
      "LINEAR_API_KEY": "your_linear_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:10.824Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:51:53.569Z"
  },
  "tags": [
    "linear"
  ]
},
{
  "_id": {
    "$oid": "682898ffa6f8dc721ceb42b0"
  },
  "seq": {
    "$numberLong": "342"
  },
  "type": "STDIO",
  "url": "https://github.com/GongRzhe/Gmail-MCP-Server",
  "stars": 292,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gmail",
    "description": "This MCP server implementation provides Gmail integration for AI assistants via Claude Desktop, enabling them to manage emails, labels, and attachments through natural language by utilizing the Gmail API and OAuth2 for secure authentication, including auto browser launch and global credential storage.",
    "command": "npx",
    "args": [
      "@gongrzhe/server-gmail-autoauth-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:11.458Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:51:55.189Z"
  },
  "tags": [
    "gmail"
  ]
},
{
  "_id": {
    "$oid": "68289900a6f8dc721ceb42b2"
  },
  "seq": {
    "$numberLong": "343"
  },
  "type": "STDIO",
  "url": "https://github.com/mzxrai/mcp-webresearch",
  "stars": 250,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "webresearch",
    "description": "This MCP server provides web research capabilities to Claude by integrating with Google Search, extracting content from webpages, and capturing screenshots using Node.js and Playwright; it communicates with Claude Desktop via the Model Context Protocol (MCP) to enable real-time information retrieval and research session tracking.",
    "command": "npx",
    "args": [
      "-y",
      "@mzxrai/mcp-webresearch@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:12.092Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:52:09.604Z"
  },
  "tags": [
    "webresearch",
    "web research",
    "web",
    "research"
  ]
},
{
  "_id": {
    "$oid": "68289900a6f8dc721ceb42b4"
  },
  "seq": {
    "$numberLong": "344"
  },
  "type": "STDIO",
  "url": "https://github.com/DMontgomery40/deepseek-mcp-server",
  "stars": 231,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "deepseek",
    "description": "The DeepSeek MCP server enables integration of DeepSeek language models with Model Context Protocol-compatible applications such as Claude Desktop, communicating through standard input/output streams and using a configuration file; it also provides dynamic adjustment of parameters like temperature and model selection through natural language requests while supporting automatic model fallback and multi-turn conversations.",
    "command": "npx",
    "args": [
      "-y",
      "deepseek-mcp-server"
    ],
    "env": {
      "DEEPSEEK_API_KEY": "your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:12.733Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:52:11.325Z"
  },
  "tags": [
    "deepseek"
  ]
},
{
  "_id": {
    "$oid": "68289901a6f8dc721ceb42b6"
  },
  "seq": {
    "$numberLong": "345"
  },
  "type": "STDIO",
  "url": "https://github.com/kimtaeyoon83/mcp-server-youtube-transcript",
  "stars": 200,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "youtube-transcript",
    "description": "This MCP server retrieves YouTube video transcripts using the Model Context Protocol, providing access to captions and subtitles via the `get_transcript` tool, and it integrates with tools like Smithery and `mcp-get` for installation and Claude Desktop for configuration.",
    "command": "npx",
    "args": [
      "-y",
      "@kimtaeyoon83/mcp-server-youtube-transcript"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:13.701Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:52:21.925Z"
  },
  "tags": [
    "youtube transcript",
    "youtube",
    "transcript"
  ]
},
{
  "_id": {
    "$oid": "68289902a6f8dc721ceb42b8"
  },
  "seq": {
    "$numberLong": "346"
  },
  "type": "STDIO",
  "url": "https://github.com/abhiz123/todoist-mcp-server",
  "stars": 199,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "todoist",
    "description": "This MCP server implementation integrates Claude with Todoist using the Model Context Protocol to provide natural language task management, enabling users to create, retrieve, update, complete, and delete tasks via the Todoist API.",
    "command": "npx",
    "args": [
      "-y",
      "@abhiz123/todoist-mcp-server"
    ],
    "env": {
      "TODOIST_API_TOKEN": "your_api_token_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:14.662Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:52:55.027Z"
  },
  "tags": [
    "todoist"
  ]
},
{
  "_id": {
    "$oid": "68289903a6f8dc721ceb42ba"
  },
  "seq": {
    "$numberLong": "347"
  },
  "type": "STDIO",
  "url": "https://github.com/DaInfernalCoder/perplexity-mcp",
  "stars": 186,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "perplexity",
    "description": "This MCP server implements an intelligent research assistant that leverages Perplexity AI models to provide search, reasoning, and deep research capabilities; it uses automatic query complexity detection to route requests to the appropriate Sonar Pro, Sonar Reasoning Pro, or Sonar Deep Research model and integrates via a Perplexity API key.",
    "command": "npx",
    "args": [
      "-y",
      "perplexity-mcp"
    ],
    "env": {
      "PERPLEXITY_API_KEY": "your_api_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:15.564Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:52:56.553Z"
  },
  "tags": [
    "perplexity"
  ]
},
{
  "_id": {
    "$oid": "68289904a6f8dc721ceb42bc"
  },
  "seq": {
    "$numberLong": "348"
  },
  "type": "STDIO",
  "url": "https://github.com/Automata-Labs-team/MCP-Server-Playwright",
  "stars": 181,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "playwright",
    "description": "This MCP server implements browser automation using Playwright, enabling LLMs to interact with web pages by navigating URLs, taking screenshots, clicking elements, filling forms, and executing JavaScript; it exposes browser console logs and screenshot images via the `console://` and `screenshot://` protocols respectively.",
    "command": "npx",
    "args": [
      "-y",
      "@automatalabs/mcp-server-playwright"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:16.247Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:53:11.282Z"
  },
  "tags": [
    "playwright"
  ]
},
{
  "_id": {
    "$oid": "68289904a6f8dc721ceb42be"
  },
  "seq": {
    "$numberLong": "349"
  },
  "type": "STDIO",
  "url": "https://github.com/SimonB97/win-cli-mcp-server",
  "stars": 173,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "windows-cli",
    "description": "This MCP server implements the Model Context Protocol, enabling secure command-line interactions on Windows systems by providing controlled access to PowerShell, CMD, and Git Bash shells; it also supports remote system access via SSH, allowing clients like Claude Desktop to execute commands and manage resources with configurable security constraints like command blocking and directory restrictions.",
    "command": "npx",
    "args": [
      "-y",
      "@simonb97/server-win-cli"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:16.859Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:53:13.169Z"
  },
  "tags": [
    "windows cli",
    "windows",
    "cli"
  ]
},
{
  "_id": {
    "$oid": "68289905a6f8dc721ceb42c0"
  },
  "seq": {
    "$numberLong": "350"
  },
  "type": "STDIO",
  "url": "https://github.com/openbnb-org/mcp-server-airbnb",
  "stars": 153,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "airbnb",
    "description": "This MCP server implementation enables searching for Airbnb listings and retrieving their details by scraping Airbnb's website; it uses cheerio for HTML parsing and returns structured JSON data without requiring an API key, while respecting robots.txt or allowing it to be ignored.",
    "command": "npx",
    "args": [
      "-y",
      "@openbnb/mcp-server-airbnb"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:17.837Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:53:23.478Z"
  },
  "tags": [
    "airbnb"
  ]
},
{
  "_id": {
    "$oid": "68289906a6f8dc721ceb42c2"
  },
  "seq": {
    "$numberLong": "351"
  },
  "type": "STDIO",
  "url": "https://github.com/luminati-io/brightdata-mcp",
  "stars": 153,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "Bright Data",
    "description": "The Bright Data MCP server facilitates real-time web data access for LLMs and AI agents, using Bright Data's proxy infrastructure to bypass geo-restrictions and bot detection; it integrates seamlessly with MCP clients via API token authentication and supports optional browser automation capabilities.",
    "command": "npx",
    "args": [
      "@brightdata/mcp"
    ],
    "env": {
      "BROWSER_AUTH": "<optional if you want to enable remote browser control tools>",
      "API_TOKEN": "<insert-your-api-token-here>",
      "WEB_UNLOCKER_ZONE": "<optional if you want to override the default mcp_unlocker zone name>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:18.531Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:53:56.510Z"
  },
  "tags": [
    "bright data",
    "bright",
    "data"
  ]
},
{
  "_id": {
    "$oid": "68289908a6f8dc721ceb42c4"
  },
  "seq": {
    "$numberLong": "352"
  },
  "type": "STDIO",
  "url": "https://github.com/pyroprompts/any-chat-completions-mcp",
  "stars": 114,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "chat-openai",
    "description": "This TypeScript-based MCP server implements the Model Context Protocol to integrate AI chat providers like OpenAI, Perplexity, Groq, and others that are compatible with the OpenAI SDK into applications like Claude Desktop and LibreChat, using a `chat` tool to relay questions via the configured AI Chat Provider's API.",
    "command": "npx",
    "args": [
      "@pyroprompts/any-chat-completions-mcp"
    ],
    "env": {
      "AI_CHAT_NAME": "OpenAI",
      "AI_CHAT_MODEL": "gpt-4o",
      "AI_CHAT_KEY": "OPENAI_KEY",
      "AI_CHAT_BASE_URL": "https://api.openai.com/v1"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:20.502Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:53:58.145Z"
  },
  "tags": [
    "chat openai",
    "chat",
    "openai"
  ]
},
{
  "_id": {
    "$oid": "68289909a6f8dc721ceb42c6"
  },
  "seq": {
    "$numberLong": "353"
  },
  "type": "STDIO",
  "url": "https://github.com/magicuidesign/mcp",
  "stars": 100,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "@magicuidesign/mcp",
    "description": "The Magic UI ModelContextProtocol (MCP) server provides implementation details for Magic UI components across categories like UI components, layout, media, and effects, exposing these details as callable tools via the MCP protocol, and is installed via the `npx` command.",
    "command": "npx",
    "args": [
      "-y",
      "@magicuidesign/mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:21.709Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:54:12.937Z"
  },
  "tags": [
    "magicuidesign",
    "magic ui design",
    "magic",
    "ui",
    "design"
  ]
},
{
  "_id": {
    "$oid": "6828990aa6f8dc721ceb42c8"
  },
  "seq": {
    "$numberLong": "354"
  },
  "type": "STDIO",
  "url": "https://github.com/liuyoshio/mcp-compass",
  "stars": 96,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-compass",
    "description": "MCP Compass is a discovery and recommendation service that helps AI assistants locate Model Context Protocol servers using natural language queries; it provides a catalog of services with rich metadata and integrates with any MCP-compatible AI assistant through configuration updates using JSON.",
    "command": "npx",
    "args": [
      "-y",
      "@liuyoshio/mcp-compass"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:22.703Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:54:14.677Z"
  },
  "tags": [
    "compass"
  ]
},
{
  "_id": {
    "$oid": "6828990ba6f8dc721ceb42ca"
  },
  "seq": {
    "$numberLong": "355"
  },
  "type": "STDIO",
  "url": "https://github.com/ihor-sokoliuk/mcp-searxng",
  "stars": 93,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "searxng",
    "description": "This MCP server implements the Model Context Protocol and provides web search capabilities by integrating the SearXNG API, supporting features like pagination, time filtering, language selection, and safe search; it can be deployed using NPX, NPM, or Docker.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-searxng"
    ],
    "env": {
      "SEARXNG_URL": "YOUR_SEARXNG_INSTANCE_URL"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:23.349Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:54:25.074Z"
  },
  "tags": [
    "searxng",
    "searx",
    "ng"
  ]
},
{
  "_id": {
    "$oid": "6828990ba6f8dc721ceb42cc"
  },
  "seq": {
    "$numberLong": "356"
  },
  "type": "STDIO",
  "url": "https://github.com/GongRzhe/Quickchart-MCP-Server",
  "stars": 92,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "quickchart-server",
    "description": "This MCP server utilizes QuickChart.io to generate charts from Chart.js configurations, providing tools to create chart URLs and download chart images, accessible via MCP-compatible tools like Claude and Smithery.",
    "command": "npx",
    "args": [
      "-y",
      "@gongrzhe/quickchart-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:23.953Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:42:10.334Z"
  },
  "tags": [
    "quickchart",
    "chart",
    "quick chart"
  ]
},
{
  "_id": {
    "$oid": "6828990da6f8dc721ceb42ce"
  },
  "seq": {
    "$numberLong": "357"
  },
  "type": "STDIO",
  "url": "https://github.com/run-llama/mcp-server-llamacloud",
  "stars": 75,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "llamacloud",
    "description": "The LlamaCloud MCP Server provides tools to query managed indexes hosted on LlamaCloud, exposing each index as a distinct tool with a query parameter. This TypeScript server uses command-line arguments to define each tool and interacts with LlamaCloud via its API using a project name and API key.",
    "command": "npx",
    "args": [
      "-y",
      "@llamaindex/mcp-server-llamacloud",
      "--index",
      "10k-SEC-Tesla",
      "--description",
      "10k SEC documents from 2023 for Tesla",
      "--index",
      "10k-SEC-Apple",
      "--description",
      "10k SEC documents from 2023 for Apple"
    ],
    "env": {
      "LLAMA_CLOUD_API_KEY": "<YOUR_API_KEY>",
      "LLAMA_CLOUD_PROJECT_NAME": "<YOUR_PROJECT_NAME>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:25.024Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:54:59.813Z"
  },
  "tags": [
    "llamacloud",
    "llama",
    "cloud"
  ]
},
{
  "_id": {
    "$oid": "6828990da6f8dc721ceb42d0"
  },
  "seq": {
    "$numberLong": "358"
  },
  "type": "STDIO",
  "url": "https://github.com/ergut/mcp-bigquery-server",
  "stars": 75,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "bigquery",
    "description": "This MCP server implementation enables Large Language Models, specifically Claude, to query data from Google BigQuery using natural language; it leverages the Model Context Protocol (MCP) to translate natural language questions into SQL queries, supporting access to tables and materialized views within BigQuery datasets and authenticates via Google Cloud CLI or service account keys.",
    "command": "npx",
    "args": [
      "-y",
      "@ergut/mcp-bigquery-server",
      "--project-id",
      "your-project-id",
      "--location",
      "us-central1"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:25.938Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:55:14.550Z"
  },
  "tags": [
    "bigquery"
  ]
},
{
  "_id": {
    "$oid": "6828990ea6f8dc721ceb42d2"
  },
  "seq": {
    "$numberLong": "359"
  },
  "type": "STDIO",
  "url": "https://github.com/f4ww4z/mcp-mysql-server",
  "stars": 66,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mysql",
    "description": "This MCP server implementation allows AI models to interact with MySQL databases by providing tools to connect, query, execute SQL commands, list tables, and describe table structure, utilizing a standardized interface with features such as prepared statements and secure connection handling. It integrates with MCP via command-line execution and supports configuration through environment variables.",
    "command": "npx",
    "args": [
      "-y",
      "@f4ww4z/mcp-mysql-server"
    ],
    "env": {
      "MYSQL_DATABASE": "your_database",
      "MYSQL_PASSWORD": "your_password",
      "MYSQL_USER": "your_user",
      "MYSQL_HOST": "your_host"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:26.881Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:55:16.167Z"
  },
  "tags": [
    "mysql"
  ]
},
{
  "_id": {
    "$oid": "6828990fa6f8dc721ceb42d4"
  },
  "seq": {
    "$numberLong": "360"
  },
  "type": "STDIO",
  "url": "https://github.com/its-dart/dart-mcp-server",
  "stars": 65,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "dart",
    "description": "The Dart MCP server implements the Model Context Protocol (MCP) to integrate Dart project management features with AI assistants, providing prompts, resource templates, and tools for task and document management accessible via `npx` or Docker, and uses a Dart token for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "dart-mcp-server"
    ],
    "env": {
      "DART_TOKEN": "dsa_..."
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:27.587Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:55:26.537Z"
  },
  "tags": [
    "dart"
  ]
},
{
  "_id": {
    "$oid": "68289910a6f8dc721ceb42d6"
  },
  "seq": {
    "$numberLong": "361"
  },
  "type": "STDIO",
  "url": "https://github.com/tinyfish-io/agentql-mcp",
  "stars": 63,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "agentql",
    "description": "This MCP server implements the Model Context Protocol and leverages AgentQL's data extraction tool to extract structured data from web pages, using a prompt for field definition; it integrates with applications like Claude, Cursor, and Windsurf via command-line execution and environment variable configuration.",
    "command": "npx",
    "args": [
      "-y",
      "agentql-mcp"
    ],
    "env": {
      "AGENTQL_API_KEY": "YOUR_API_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:28.897Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:55:59.477Z"
  },
  "tags": [
    "agentql",
    "agent ql",
    "agent",
    "ql"
  ]
},
{
  "_id": {
    "$oid": "68289912a6f8dc721ceb42d8"
  },
  "seq": {
    "$numberLong": "362"
  },
  "type": "STDIO",
  "url": "https://github.com/vectorize-io/vectorize-mcp-server",
  "stars": 55,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "vectorize",
    "description": "This MCP server implementation provides text extraction and vector retrieval capabilities by integrating with Vectorize, utilizing its APIs for document processing, chunking, and vector search, and operates using technologies like npx and configuration through JSON.",
    "command": "npx",
    "args": [
      "-y",
      "@vectorize-io/vectorize-mcp-server@latest"
    ],
    "env": {
      "VECTORIZE_ORG_ID": "your-org-id",
      "VECTORIZE_TOKEN": "your-token",
      "VECTORIZE_PIPELINE_ID": "your-pipeline-id"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:30.240Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:56:01.301Z"
  },
  "tags": [
    "vectorize"
  ]
},
{
  "_id": {
    "$oid": "68289913a6f8dc721ceb42da"
  },
  "seq": {
    "$numberLong": "363"
  },
  "type": "STDIO",
  "url": "https://github.com/pinkpixel-dev/mem0-mcp",
  "stars": 51,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mem0-mcp",
    "description": "This MCP server implements a Model Context Protocol interface that allows AI agents to store and retrieve memories using the `mem0ai` Node.js SDK, supporting both cloud storage via the Mem0 API and local storage with OpenAI embeddings, and exposes tools to add, search, and delete memories associated with user, session, and agent identifiers.",
    "command": "npx",
    "args": [
      "-y",
      "@pinkpixel/mem0-mcp"
    ],
    "env": {
      "DEFAULT_USER_ID": "user123",
      "MEM0_API_KEY": "YOUR_MEM0_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:31.777Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:56:16.639Z"
  },
  "tags": [
    "mem0",
    "mem 0",
    "mem"
  ]
},
{
  "_id": {
    "$oid": "68289914a6f8dc721ceb42dc"
  },
  "seq": {
    "$numberLong": "364"
  },
  "type": "STDIO",
  "url": "https://github.com/dynatrace-oss/dynatrace-mcp",
  "stars": 50,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mobile-mcp",
    "description": "This MCP server implementation integrates with Dynatrace to fetch observability data such as problems, security vulnerabilities, and logs using DQL, and enables actions like sending Slack messages via connectors and triggering Dynatrace AutomationEngine workflows; it uses STDIO for communication and connects to Dynatrace via OAuth.",
    "command": "npx",
    "args": [
      "-y",
      "@dynatrace-oss/dynatrace-mcp-server@latest"
    ],
    "env": {
      "OAUTH_CLIENT_SECRET": "",
      "OAUTH_CLIENT_ID": "",
      "DT_ENVIRONMENT": ""
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:32.798Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:56:18.251Z"
  },
  "tags": [
    "mobile",
    "mobile"
  ]
},
{
  "_id": {
    "$oid": "68289916a6f8dc721ceb42de"
  },
  "seq": {
    "$numberLong": "365"
  },
  "type": "STDIO",
  "url": "https://github.com/PsychArch/minimax-mcp-tools",
  "stars": 47,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "minimax-mcp-tools",
    "description": "This MCP server integrates with the Minimax API to provide AI-powered image generation from text prompts using the image-01 model, and converts text to natural-sounding speech using speech-02 models with customizable voice options, emotions, and audio formats.",
    "command": "npx",
    "args": [
      "minimax-mcp-tools"
    ],
    "env": {
      "MINIMAX_GROUP_ID": "your-minimax-group-id",
      "MINIMAX_API_KEY": "your-minimax-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:34.386Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:56:28.369Z"
  },
  "tags": [
    "minimax",
    "tools",
    "minimax tools"
  ]
},
{
  "_id": {
    "$oid": "68289917a6f8dc721ceb42e0"
  },
  "seq": {
    "$numberLong": "366"
  },
  "type": "STDIO",
  "url": "https://github.com/Pleasurecruise/linux-do-mcp",
  "stars": 47,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "linux-do-mcp",
    "description": "This MCP server implementation provides access to Linux DO community content via HTTP requests, offering functionalities such as retrieving latest topics, active discussions, and user-specific data like notifications and bookmarks; it uses API keys and usernames for authentication where required.",
    "command": "npx",
    "args": [
      "-y",
      "@pleasure1234/linux-do-mcp"
    ],
    "env": {
      "LINUX_DO_USERNAME": "your-username",
      "LINUX_DO_API_KEY": "your-api-key-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:35.040Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:57:01.156Z"
  },
  "tags": [
    "linux",
    "linux do",
    "do"
  ]
},
{
  "_id": {
    "$oid": "68289917a6f8dc721ceb42e2"
  },
  "seq": {
    "$numberLong": "367"
  },
  "type": "STDIO",
  "url": "https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server",
  "stars": 46,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "travel-planner",
    "description": "The Travel Planner MCP server provides travel planning capabilities to LLMs by using the Model Context Protocol to integrate with Google Maps APIs, enabling location search, place detail retrieval, route calculation, and timezone information retrieval.",
    "command": "npx",
    "args": [
      "@gongrzhe/server-travelplanner-mcp"
    ],
    "env": {
      "GOOGLE_MAPS_API_KEY": "your_google_maps_api_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:35.670Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:57:02.764Z"
  },
  "tags": [
    "travel planner",
    "travel",
    "planner"
  ]
},
{
  "_id": {
    "$oid": "68289919a6f8dc721ceb42e4"
  },
  "seq": {
    "$numberLong": "368"
  },
  "type": "STDIO",
  "url": "https://github.com/T1nker-1220/memories-with-lessons-mcp-server",
  "stars": 41,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "memory",
    "description": "This MCP server implements a knowledge graph for persistent memory and error learning, storing entities, relations, and observations in JSON files and providing API tools to create, delete, search, and retrieve them; it enhances error handling through lesson management tools and integrates with Claude via NPX or Docker, and with Cursor MCP client via stdio.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-memory"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:37.794Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:57:18.435Z"
  },
  "tags": [
    "memory"
  ]
},
{
  "_id": {
    "$oid": "6828991ca6f8dc721ceb42e6"
  },
  "seq": {
    "$numberLong": "369"
  },
  "type": "STDIO",
  "url": "https://github.com/ymadd/shadcn-ui-mcp-server",
  "stars": 38,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "shadcn-ui-server",
    "description": "This TypeScript-based MCP server provides AI assistants with detailed information about shadcn/ui components by scraping and caching data from the official documentation site and GitHub repository, serving structured data through a Model Context Protocol for tools like Claude, Windsurf, and Cursor.",
    "command": "npx",
    "args": [
      "-y",
      "shadcn-ui-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:40.139Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:42:11.859Z"
  },
  "tags": [
    "shadcn ui",
    "shadcn",
    "ui"
  ]
},
{
  "_id": {
    "$oid": "6828991da6f8dc721ceb42e8"
  },
  "seq": {
    "$numberLong": "370"
  },
  "type": "STDIO",
  "url": "https://github.com/dkmaker/mcp-rest-api",
  "stars": 37,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "rest-api",
    "description": "This MCP server implements a REST API tester, allowing users to send HTTP requests (GET, POST, PUT, DELETE) to specified endpoints via Cline and supporting Basic, Bearer Token, and API Key authentication methods, configurable custom headers, and SSL verification, while providing detailed response information.",
    "command": "npx",
    "args": [
      "-y",
      "dkmaker-mcp-rest-api"
    ],
    "env": {
      "AUTH_BASIC_PASSWORD": "your-password",
      "HEADER_X-API-Version": "2.0",
      "REST_BASE_URL": "https://api.example.com",
      "HEADER_Accept": "application/json",
      "REST_ENABLE_SSL_VERIFY": "false",
      "HEADER_Custom-Client": "my-client",
      "AUTH_BASIC_USERNAME": "your-username",
      "AUTH_APIKEY_VALUE": "your-api-key",
      "AUTH_APIKEY_HEADER_NAME": "X-API-Key",
      "AUTH_BEARER": "your-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:41.031Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:57:30.061Z"
  },
  "tags": [
    "rest api",
    "rest",
    "api"
  ]
},
{
  "_id": {
    "$oid": "68289920a6f8dc721ceb42ea"
  },
  "seq": {
    "$numberLong": "371"
  },
  "type": "STDIO",
  "url": "https://github.com/chatmcp/mcp-server-flomo",
  "stars": 30,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-flomo",
    "description": "This MCP server implementation, written in TypeScript, integrates with Flomo to enable users to write text notes by utilizing the `write_note` tool via the Model Context Protocol (MCP). It communicates over stdio and is designed to be used with Claude Desktop by configuring the Flomo API URL.",
    "command": "npx",
    "args": [
      "-y",
      "@chatmcp/mcp-server-flomo"
    ],
    "env": {
      "FLOMO_API_URL": "https://flomoapp.com/iwh/xxx/xxx/"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:44.323Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:58:02.874Z"
  },
  "tags": [
    "flomo"
  ]
},
{
  "_id": {
    "$oid": "68289921a6f8dc721ceb42ec"
  },
  "seq": {
    "$numberLong": "372"
  },
  "type": "STDIO",
  "url": "https://github.com/ruibaby/1Panel-mcp",
  "stars": 30,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "1panel-mcp",
    "description": "This MCP server implementation automates website deployments to 1Panel by creating websites via the 1Panel API if they don't exist, and then uploading static files using the same API, all based on the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "1panel-mcp"
    ],
    "env": {
      "ONEPANEL_BASE_URL": "<your 1Panel base URL>",
      "ONEPANEL_API_KEY": "<your 1Panel API key>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:45.274Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:58:04.381Z"
  },
  "tags": [
    "1panel",
    "1 panel"
  ]
},
{
  "_id": {
    "$oid": "68289923a6f8dc721ceb42ee"
  },
  "seq": {
    "$numberLong": "373"
  },
  "type": "STDIO",
  "url": "https://github.com/dpflucas/mysql-mcp-server",
  "stars": 27,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mysql",
    "description": "This MCP server provides read-only access to MySQL databases using `SELECT`, `SHOW`, `DESCRIBE`, and `EXPLAIN` statements, and supports listing databases and tables, describing table schemas, and executing SQL queries with built-in security features like query validation and timeouts.",
    "command": "npx",
    "args": [
      "mysql-mcp-server"
    ],
    "env": {
      "MYSQL_DATABASE": "your-default-database",
      "MYSQL_PORT": "3306",
      "MYSQL_PASSWORD": "your-mysql-password",
      "MYSQL_USER": "your-mysql-user",
      "MYSQL_HOST": "your-mysql-host"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:47.147Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:58:20.171Z"
  },
  "tags": [
    "mysql"
  ]
},
{
  "_id": {
    "$oid": "68289924a6f8dc721ceb42f0"
  },
  "seq": {
    "$numberLong": "374"
  },
  "type": "STDIO",
  "url": "https://github.com/gotohuman/gotohuman-mcp-server",
  "stars": 26,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gotoHuman",
    "description": "The gotoHuman MCP server facilitates human-in-the-loop workflows for AI agents by providing an interface for requesting human approvals via the MCP protocol; it uses tools like `list-forms`, `get-form-schema`, and `request-human-review-with-form` to manage review forms and integrate with platforms like Cursor, Claude, and Windsurf.",
    "command": "npx",
    "args": [
      "-y",
      "@gotohuman/mcp-server"
    ],
    "env": {
      "GOTOHUMAN_API_KEY": "your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:48.071Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:58:21.752Z"
  },
  "tags": [
    "goto human",
    "goto",
    "human"
  ]
},
{
  "_id": {
    "$oid": "68289925a6f8dc721ceb42f2"
  },
  "seq": {
    "$numberLong": "375"
  },
  "type": "STDIO",
  "url": "https://github.com/misterboe/strapi-mcp-server",
  "stars": 25,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "strapi",
    "description": "This MCP server provides a standardized interface for AI assistants to interact with Strapi CMS instances, supporting content type management, REST API operations, and media uploads using JSON Web Token (JWT) authentication and schema validation while managing compatibility between Strapi versions 4 and 5.",
    "command": "npx",
    "args": [
      "-y",
      "@bschauer/strapi-mcp-server@2.5.0"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:49.066Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:58:31.891Z"
  },
  "tags": [
    "strapi"
  ]
},
{
  "_id": {
    "$oid": "68289926a6f8dc721ceb42f4"
  },
  "seq": {
    "$numberLong": "376"
  },
  "type": "STDIO",
  "url": "https://github.com/GongRzhe/REDIS-MCP-Server",
  "stars": 24,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "redis",
    "description": "This Redis MCP server implements the Model Context Protocol (MCP) to enable LLMs to interact with Redis databases using tools like set, get, delete, and list; it integrates with Claude Desktop via JSON configuration and communicates using the Redis protocol.",
    "command": "npx",
    "args": [
      "@gongrzhe/server-redis-mcp@1.0.0",
      "redis://localhost:6379"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:50.557Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:59:04.284Z"
  },
  "tags": [
    "redis"
  ]
},
{
  "_id": {
    "$oid": "68289928a6f8dc721ceb42f6"
  },
  "seq": {
    "$numberLong": "377"
  },
  "type": "STDIO",
  "url": "https://github.com/GongRzhe/Image-Generation-MCP-Server",
  "stars": 22,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "image-gen",
    "description": "This MCP server provides image generation capabilities by integrating with the Replicate API, utilizing the Flux model to generate images from text prompts; it communicates via HTTP and is configured through Claude Desktop's configuration file.",
    "command": "npx",
    "args": [
      "@gongrzhe/image-gen-server"
    ],
    "env": {
      "REPLICATE_API_TOKEN": "your-replicate-api-token",
      "MODEL": "alternative-model-name"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:52.067Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:59:06.013Z"
  },
  "tags": [
    "image gen",
    "image",
    "gen",
    "image-gen"
  ]
},
{
  "_id": {
    "$oid": "68289929a6f8dc721ceb42f8"
  },
  "seq": {
    "$numberLong": "378"
  },
  "type": "STDIO",
  "url": "https://github.com/OctagonAI/octagon-mcp-server",
  "stars": 21,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "octagon-mcp-server",
    "description": "The Octagon MCP server provides AI-powered financial research and analysis by integrating with the Octagon Market Intelligence API to extract insights from public filings, earnings calls, financial metrics, stock market data, and private market transactions, and it is accessible through MCP clients like Claude Desktop, Cursor, and Windsurf, utilizing `npx` and requiring an Octagon API key.",
    "command": "npx",
    "args": [
      "-y",
      "octagon-mcp@latest"
    ],
    "env": {
      "OCTAGON_API_KEY": "YOUR_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:53.081Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:59:21.897Z"
  },
  "tags": [
    "octagon",
    "octagon"
  ]
},
{
  "_id": {
    "$oid": "68289929a6f8dc721ceb42fa"
  },
  "seq": {
    "$numberLong": "379"
  },
  "type": "STDIO",
  "url": "https://github.com/horizondatawave/hdw-mcp-server",
  "stars": 21,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "hdw",
    "description": "The HDW MCP Server provides access to LinkedIn data and account management functionalities via the Model Context Protocol (MCP) using the HorizonDataWave API; it supports user and company searches, profile lookups, content retrieval, and account actions like sending messages and connection requests.",
    "command": "npx",
    "args": [
      "-y",
      "@horizondatawave/mcp"
    ],
    "env": {
      "HDW_ACCOUNT_ID": "YOUR_HD_W_ACCOUNT_ID",
      "HDW_ACCESS_TOKEN": "YOUR_HD_W_ACCESS_TOKEN"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:53.868Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:59:23.659Z"
  },
  "tags": [
    "hdw"
  ]
},
{
  "_id": {
    "$oid": "6828992aa6f8dc721ceb42fc"
  },
  "seq": {
    "$numberLong": "380"
  },
  "type": "STDIO",
  "url": "https://github.com/zxkane/mcp-server-amazon-bedrock",
  "stars": 20,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "amazon-bedrock",
    "description": "This MCP server facilitates AI image generation using Amazon Bedrock's Nova Canvas model, communicating via the Model Control Protocol and offering features such as negative prompting and seed control; it supports integration with Claude Desktop via configuration and leverages AWS credentials for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@zxkane/mcp-server-amazon-bedrock"
    ],
    "env": {
      "AWS_REGION": "us-east-1",
      "AWS_ACCESS_KEY_ID": "your_access_key",
      "AWS_PROFILE": "your_profile_name",
      "AWS_SECRET_ACCESS_KEY": "your_secret_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:54.509Z"
  },
  "updated_at": {
    "$date": "2025-05-17T15:59:33.598Z"
  },
  "tags": [
    "amazon bedrock",
    "amazon",
    "bedrock"
  ]
},
{
  "_id": {
    "$oid": "6828992ba6f8dc721ceb42fe"
  },
  "seq": {
    "$numberLong": "381"
  },
  "type": "STDIO",
  "url": "https://github.com/buger/docs-mcp",
  "stars": 21,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "tyk-docs-search",
    "description": "This Model Context Protocol (MCP) server uses Probe to index and search documentation or codebases, allowing AI assistants to query content from local directories or Git repositories using natural language; it supports dynamic configuration via CLI arguments, environment variables, or a config file, and enables automatic Git updates.",
    "command": "npx",
    "args": [
      "-y",
      "@buger/docs-mcp@latest",
      "--gitUrl",
      "https://github.com/TykTechnologies/tyk-docs",
      "--toolName",
      "search_tyk_docs",
      "--toolDescription",
      "Search Tyk API Management Documentation"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:55.427Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:00:05.931Z"
  },
  "tags": [
    "tyk docs search",
    "tyk",
    "docs",
    "search"
  ]
},
{
  "_id": {
    "$oid": "6828992da6f8dc721ceb4300"
  },
  "seq": {
    "$numberLong": "382"
  },
  "type": "STDIO",
  "url": "https://github.com/lishenxydlgzs/aws-athena-mcp",
  "stars": 18,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "athena",
    "description": "This MCP server executes SQL queries against AWS Athena databases using the AWS SDK, enabling AI assistants to retrieve query results; it supports running queries, checking query status, retrieving results, listing saved queries, and running saved queries.",
    "command": "npx",
    "args": [
      "-y",
      "@lishenxydlgzs/aws-athena-mcp"
    ],
    "env": {
      "QUERY_TIMEOUT_MS": "300000",
      "OUTPUT_S3_PATH": "s3://your-bucket/athena-results/",
      "AWS_SESSION_TOKEN": "",
      "AWS_REGION": "us-east-1",
      "MAX_RETRIES": "100",
      "AWS_ACCESS_KEY_ID": "",
      "ATHENA_WORKGROUP": "default_workgroup",
      "AWS_PROFILE": "default",
      "AWS_SECRET_ACCESS_KEY": "",
      "RETRY_DELAY_MS": "500"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:11:57.922Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:00:07.475Z"
  },
  "tags": [
    "athena"
  ]
},
{
  "_id": {
    "$oid": "6828992fa6f8dc721ceb4302"
  },
  "seq": {
    "$numberLong": "383"
  },
  "type": "STDIO",
  "url": "https://github.com/bharathvaj-ganesan/whois-mcp",
  "stars": 17,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "whois",
    "description": "This MCP server implements WHOIS lookups for domains, IP addresses, and Autonomous System Numbers, enabling AI agents like Claude and Cursor to retrieve registration details using the Model Context Protocol and `npx`.",
    "command": "npx",
    "args": [
      "-y",
      "@bharathvaj/whois-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:11:59.889Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:00:23.881Z"
  },
  "tags": [
    "whois"
  ]
},
{
  "_id": {
    "$oid": "68289931a6f8dc721ceb4304"
  },
  "seq": {
    "$numberLong": "384"
  },
  "type": "STDIO",
  "url": "https://github.com/niklauslee/frame0-mcp-server",
  "stars": 17,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "frame0-mcp-server",
    "description": "The Frame0 MCP Server enables users to create and modify wireframes within the Frame0 application through natural language prompts, utilizing Node.js and integrating with Frame0's API via a specified port to execute actions such as creating shapes, updating properties, and managing pages.",
    "command": "npx",
    "args": [
      "-y",
      "frame0-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:01.816Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:00:25.421Z"
  },
  "tags": [
    "frame0",
    "frame 0"
  ]
},
{
  "_id": {
    "$oid": "68289932a6f8dc721ceb4306"
  },
  "seq": {
    "$numberLong": "385"
  },
  "type": "STDIO",
  "url": "https://github.com/AppiumTestDistribution/mcp-webdriveragent",
  "stars": 17,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-wda",
    "description": "The MCP server builds and signs WebDriverAgent for iOS using Xcode, packaging it into an IPA file with a provided mobile provisioning profile; it exposes tools to list available provisioning profiles and build/sign the WebDriverAgent, integrating with Model Context Protocol (MCP) clients via JSON configuration.",
    "command": "npx",
    "args": [
      "mcp-webdriveragent"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:02.467Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:00:35.350Z"
  },
  "tags": [
    "wda"
  ]
},
{
  "_id": {
    "$oid": "68289933a6f8dc721ceb4308"
  },
  "seq": {
    "$numberLong": "386"
  },
  "type": "STDIO",
  "url": "https://github.com/Text2Go/ai-humanizer-mcp-server",
  "stars": 16,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ai-humanizer",
    "description": "This MCP server integrates with Claude Desktop and utilizes the Model Context Protocol to detect AI-generated text and enhance it with natural language processing, grammar correction, readability improvements, and length control, while preserving key terminology.",
    "command": "npx",
    "args": [
      "-y",
      "ai-humanizer-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:03.121Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:01:07.342Z"
  },
  "tags": [
    "ai humanizer",
    "ai",
    "humanizer"
  ]
},
{
  "_id": {
    "$oid": "68289934a6f8dc721ceb430a"
  },
  "seq": {
    "$numberLong": "387"
  },
  "type": "STDIO",
  "url": "https://github.com/rtuin/mcp-mermaid-validator",
  "stars": 16,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mermaid-validator",
    "description": "This MCP server implements a `validateMermaid` tool that uses the Mermaid CLI to validate Mermaid diagram syntax and return a rendered PNG image encoded as a base64 string, communicating with MCP-compatible clients via standard input/output using the Model Context Protocol SDK.",
    "command": "npx",
    "args": [
      "-y",
      "@rtuin/mcp-mermaid-validator@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:04.090Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:01:09.099Z"
  },
  "tags": [
    "mermaid validator",
    "mermaid",
    "validator"
  ]
},
{
  "_id": {
    "$oid": "68289936a6f8dc721ceb430c"
  },
  "seq": {
    "$numberLong": "388"
  },
  "type": "STDIO",
  "url": "https://github.com/kevinwatt/mcp-server-searxng",
  "stars": 15,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "searxng",
    "description": "This MCP server implements a privacy-focused meta search by integrating with SearXNG using HTTP/JSON to aggregate search results from multiple engines. It supports configurable language, category, time range filtering, and safe search levels, and can be deployed via Smithery or manually using npm.",
    "command": "npx",
    "args": [
      "-y",
      "@kevinwatt/mcp-server-searxng"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:06.381Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:01:25.538Z"
  },
  "tags": [
    "searxng"
  ]
},
{
  "_id": {
    "$oid": "68289938a6f8dc721ceb430e"
  },
  "seq": {
    "$numberLong": "389"
  },
  "type": "STDIO",
  "url": "https://github.com/9olidity/MCP-Server-Pentest",
  "stars": 15,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "playwright",
    "description": "This MCP server implementation uses Playwright to provide automated browser interaction for pentesting, including detection of XSS and SQL injection vulnerabilities, capturing screenshots, and performing actions like navigation, clicks, form filling, and JavaScript execution.",
    "command": "npx",
    "args": [
      "-y",
      "/Users/...../dist/index.js"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:08.382Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:01:26.907Z"
  },
  "tags": [
    "playwright"
  ]
},
{
  "_id": {
    "$oid": "68289939a6f8dc721ceb4310"
  },
  "seq": {
    "$numberLong": "390"
  },
  "type": "STDIO",
  "url": "https://github.com/Chrusic/todoist-mcp-server-extended",
  "stars": 15,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "This MCP server implementation connects Claude (or any MCP-compatible LLM) to Todoist via the Model Context Protocol, enabling natural language interaction with Todoist tasks, projects, sections, and labels through the Todoist API, optimizing task management workflows.",
    "command": "npx",
    "args": [
      "-y",
      "@chrusic/todoist-mcp-server-extended"
    ],
    "env": {
      "TODOIST_API_TOKEN": "PASTE-YOUR-API-TOKEN-HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:09.028Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:01:36.918Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "6828993aa6f8dc721ceb4312"
  },
  "seq": {
    "$numberLong": "391"
  },
  "type": "STDIO",
  "url": "https://github.com/awwaiid/mcp-server-taskwarrior",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "taskwarrior",
    "description": "This Node.js server provides a Model Context Protocol (MCP) interface for TaskWarrior, enabling users to view, filter, add, and mark tasks as complete by executing TaskWarrior commands via the `task` binary; it integrates with platforms like Claude Desktop using JSON configuration.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-taskwarrior"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:10.112Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:02:08.930Z"
  },
  "tags": [
    "taskwarrior",
    "task warrior",
    "task",
    "warrior"
  ]
},
{
  "_id": {
    "$oid": "6828993aa6f8dc721ceb4314"
  },
  "seq": {
    "$numberLong": "392"
  },
  "type": "STDIO",
  "url": "https://github.com/orliesaurus/pulsemcp-server",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "pulsemcp",
    "description": "This PulseMCP server implementation facilitates discovery and exploration of MCP servers and their integrations via the PulseMCP API, utilizing TypeScript and offering features such as listing, searching, and filtering servers, along with managing available integrations.",
    "command": "npx",
    "args": [
      "-y",
      "pulsemcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:10.740Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:02:10.708Z"
  },
  "tags": [
    "pulse"
  ]
},
{
  "_id": {
    "$oid": "6828993ba6f8dc721ceb4316"
  },
  "seq": {
    "$numberLong": "393"
  },
  "type": "STDIO",
  "url": "https://github.com/yokingma/time-mcp",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "time-mcp",
    "description": "The Time MCP server provides LLMs with time awareness by exposing tools to retrieve current time, relative time, timestamps, days in a month, time zone conversions, and week/year information via the Model Context Protocol (MCP). It integrates with Claude Desktop, Cursor, and Windsurf using `npx`.",
    "command": "npx",
    "args": [
      "-y",
      "time-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:11.805Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:02:27.141Z"
  },
  "tags": [
    "time",
    "time"
  ]
},
{
  "_id": {
    "$oid": "6828993da6f8dc721ceb4318"
  },
  "seq": {
    "$numberLong": "394"
  },
  "type": "STDIO",
  "url": "https://github.com/magnetai/mcp-free-usdc-transfer",
  "stars": 13,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "free-usdc-transfer",
    "description": "This MCP server enables free USDC transfers on the Base chain, leveraging Coinbase CDP for MPC wallet management and supporting ENS and BaseName domain resolution for recipient addresses; it uses the `tranfer-usdc` function to schedule USDC transfers and `create_coinbase_mpc_wallet` to manage MPC wallets.",
    "command": "npx",
    "args": [
      "-y",
      "@magnetai/free-usdc-transfer"
    ],
    "env": {
      "COINBASE_CDP_PRIVATE_KEY": "YOUR_COINBASE_CDP_PRIVATE_KEY",
      "COINBASE_CDP_API_KEY_NAME": "YOUR_COINBASE_CDP_API_KEY_NAME"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:13.607Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:02:28.845Z"
  },
  "tags": [
    "free usdc transfer",
    "free",
    "usdc",
    "transfer"
  ]
},
{
  "_id": {
    "$oid": "6828993fa6f8dc721ceb431a"
  },
  "seq": {
    "$numberLong": "395"
  },
  "type": "STDIO",
  "url": "https://github.com/cdugo/package-documentation-mcp",
  "stars": 13,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "docsFetcher",
    "description": "The DocsFetcher MCP server fetches and structures package documentation from various language ecosystems, including JavaScript, Python, and Java, for LLM consumption without requiring API keys; it integrates with Claude Desktop and Cursor IDE using the Smithery CLI to provide documentation analysis and summarization through specialized tools and prompts.",
    "command": "npx",
    "args": [
      "-y",
      "@smithery/cli@latest",
      "run",
      "@cdugo/mcp-get-docs",
      "--config",
      "'{}'"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:15.538Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:02:38.551Z"
  },
  "tags": [
    "docsfetcher",
    "docs fetcher",
    "docs",
    "fetcher"
  ]
},
{
  "_id": {
    "$oid": "68289940a6f8dc721ceb431c"
  },
  "seq": {
    "$numberLong": "396"
  },
  "type": "STDIO",
  "url": "https://github.com/damonxue/mcp-ossinsight",
  "stars": 13,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ossinsight",
    "description": "This MCP server provides data analysis and insights for GitHub entities by querying the OSSInsight.io API and scraping its web pages; it allows users to analyze repositories, developers, and organizations, compare projects, explore curated collections, and execute natural language queries against GitHub data.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-ossinsight"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:16.204Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:03:10.397Z"
  },
  "tags": [
    "ossinsight",
    "oss",
    "insight"
  ]
},
{
  "_id": {
    "$oid": "68289940a6f8dc721ceb431e"
  },
  "seq": {
    "$numberLong": "397"
  },
  "type": "STDIO",
  "url": "https://github.com/AppiumTestDistribution/mcp-appium-gestures",
  "stars": 13,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "appium-gestures",
    "description": "This MCP server provides documentation resources and generates code snippets for Appium mobile gestures, supporting Javascript (WebdriverIO) and Java (Appium Java Client) through tools accessible via the Model Context Protocol using stdio or SSE transport.",
    "command": "npx",
    "args": [
      "mcp-appium-gestures"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:16.883Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:03:12.428Z"
  },
  "tags": [
    "appium",
    "gestures",
    "appium gestures"
  ]
},
{
  "_id": {
    "$oid": "68289942a6f8dc721ceb4320"
  },
  "seq": {
    "$numberLong": "398"
  },
  "type": "STDIO",
  "url": "https://github.com/ragieai/ragie-mcp-server",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ragie",
    "description": "This MCP server implementation enables AI models to retrieve information from a Ragie knowledge base using the Model Context Protocol (MCP). It exposes a \"retrieve\" tool that queries the Ragie API for relevant content chunks based on a given query and supports configuration for Cursor and Claude Desktop integrations.",
    "command": "npx",
    "args": [
      "-y",
      "@ragieai/mcp-server",
      "--partition",
      "optional_partition_id"
    ],
    "env": {
      "RAGIE_API_KEY": "your_api_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:18.661Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:03:28.525Z"
  },
  "tags": [
    "ragie"
  ]
},
{
  "_id": {
    "$oid": "68289943a6f8dc721ceb4322"
  },
  "seq": {
    "$numberLong": "399"
  },
  "type": "STDIO",
  "url": "https://github.com/DMontgomery40/meta-mcp-server",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "This server dynamically generates customized Model Context Protocol (MCP) servers by creating specified directories and files, and it utilizes the MCP SDK to manage tools and resources.",
    "command": "npx",
    "args": [
      "-y",
      "meta-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:19.752Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:03:30.353Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "68289944a6f8dc721ceb4324"
  },
  "seq": {
    "$numberLong": "400"
  },
  "type": "STDIO",
  "url": "https://github.com/DeepLcom/deepl-mcp-server",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "deepl",
    "description": "This MCP server leverages the DeepL API to provide text translation and rephrasing functionalities, exposing tools for language detection, formality control, and language retrieval, while integrating with applications like Claude Desktop using JSON configuration.",
    "command": "npx",
    "args": [
      "-y",
      "/path/to/deepl-mcp-server"
    ],
    "env": {
      "DEEPL_API_KEY": "your-api-key-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:20.445Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:03:40.083Z"
  },
  "tags": [
    "deepl"
  ]
},
{
  "_id": {
    "$oid": "68289945a6f8dc721ceb4326"
  },
  "seq": {
    "$numberLong": "401"
  },
  "type": "STDIO",
  "url": "https://github.com/chatmcp/heybeauty-mcp",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "heybeauty-mcp",
    "description": "This MCP server implements virtual try-on functionality using the HeyBeauty API; it exposes clothes as resources via `cloth://` URIs and provides tools to submit and query try-on tasks, using user and clothing image URLs to generate prompts for LLMs.",
    "command": "npx",
    "args": [
      "-y",
      "heybeauty-mcp"
    ],
    "env": {
      "HEYBEAUTY_API_KEY": "your_heybeauty_api_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:21.798Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:04:11.904Z"
  },
  "tags": [
    "heybeauty",
    "hey beauty",
    "hey",
    "beauty"
  ]
},
{
  "_id": {
    "$oid": "68289946a6f8dc721ceb4328"
  },
  "seq": {
    "$numberLong": "402"
  },
  "type": "STDIO",
  "url": "https://github.com/NvkAnirudh/LinkedIn-Post-Generator",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "linkedin-post-generator",
    "description": "This Model Context Protocol (MCP) server automates the generation of LinkedIn post drafts from YouTube videos by extracting transcripts using the YouTube API, summarizing the content with the OpenAI API, and creating tailored posts, integrating seamlessly with AI assistants supporting the MCP protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@smithery/cli@latest",
      "run",
      "@NvkAnirudh/linkedin-post-generator",
      "--key",
      "YOUR_SMITHERY_API_KEY",
      "--config",
      "{\"OPENAI_API_KEY\":\"YOUR_OPENAI_API_KEY\",\"YOUTUBE_API_KEY\":\"YOUR_YOUTUBE_API_KEY\"}",
      "--transport",
      "stdio"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:22.461Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:04:14.026Z"
  },
  "tags": [
    "linkedin post generator",
    "linkedin",
    "post",
    "generator"
  ]
},
{
  "_id": {
    "$oid": "68289947a6f8dc721ceb432a"
  },
  "seq": {
    "$numberLong": "403"
  },
  "type": "STDIO",
  "url": "https://github.com/sammcj/mcp-github-issue",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "github-issue",
    "description": "This MCP server implementation enables LLMs to fetch and utilize GitHub issue details as structured task descriptions via the Model Context Protocol (MCP), using the `get_issue_task` tool that accepts a GitHub issue URL and returns the issue's title, description, and source URL.",
    "command": "npx",
    "args": [
      "mcp-github-issue"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:23.428Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:04:30.190Z"
  },
  "tags": [
    "github issue",
    "github",
    "issue"
  ]
},
{
  "_id": {
    "$oid": "68289948a6f8dc721ceb432c"
  },
  "seq": {
    "$numberLong": "404"
  },
  "type": "STDIO",
  "url": "https://github.com/idoru/influxdb-mcp-server",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "influxdb",
    "description": "This MCP server provides access to an InfluxDB instance using the InfluxDB OSS API v2, exposing resources like organizations, buckets, and measurements via HTTP endpoints, and offering tools to write data, execute Flux queries, and manage database objects, while integrating with Claude for Desktop via a configuration file.",
    "command": "npx",
    "args": [
      "influxdb-mcp-server"
    ],
    "env": {
      "INFLUXDB_URL": "http://localhost:8086",
      "INFLUXDB_TOKEN": "your_token",
      "INFLUXDB_ORG": "your_org"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:24.074Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:04:40.804Z"
  },
  "tags": [
    "influxdb"
  ]
},
{
  "_id": {
    "$oid": "68289949a6f8dc721ceb432e"
  },
  "seq": {
    "$numberLong": "405"
  },
  "type": "STDIO",
  "url": "https://github.com/yuru-sha/mcp-server-dify",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "dify",
    "description": "The mcp-server-dify implements a Model Context Protocol server that facilitates interactions between Large Language Models and Dify AI's chat completion API via HTTP, offering features such as conversation context, streaming responses, and integration with tools like a restaurant recommendation system, all implemented in TypeScript.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-dify",
      "https://your-dify-api-endpoint",
      "your-dify-api-key"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:25.015Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:04:42.364Z"
  },
  "tags": [
    "dify"
  ]
},
{
  "_id": {
    "$oid": "6828994aa6f8dc721ceb4330"
  },
  "seq": {
    "$numberLong": "406"
  },
  "type": "STDIO",
  "url": "https://github.com/mcollina/mcp-ripgrep",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ripgrep",
    "description": "This MCP server exposes ripgrep search functionality, enabling clients like Claude to perform text searches via the Model Context Protocol; it utilizes Node.js to execute `rg` commands for searching files based on specified patterns and file types.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-ripgrep@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:26.252Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:05:13.595Z"
  },
  "tags": [
    "ripgrep"
  ]
},
{
  "_id": {
    "$oid": "6828994ba6f8dc721ceb4332"
  },
  "seq": {
    "$numberLong": "407"
  },
  "type": "STDIO",
  "url": "https://github.com/INQUIRELAB/mcp-bridge-api",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "filesystem",
    "description": "MCP Bridge implements a lightweight, LLM-agnostic proxy that connects to multiple Model Context Protocol (MCP) servers and exposes their functionality through a unified REST API, utilizing Node.js with Express; it includes a Python-based MCP-Gemini Agent that integrates Google's Gemini API for natural language interaction and features risk-based execution levels and Docker isolation for enhanced security.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-filesystem",
      "/path/to/directory"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:27.534Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:05:15.803Z"
  },
  "tags": [
    "filesystem",
    "file system",
    "file",
    "system"
  ]
},
{
  "_id": {
    "$oid": "6828994ca6f8dc721ceb4334"
  },
  "seq": {
    "$numberLong": "408"
  },
  "type": "STDIO",
  "url": "https://github.com/novitalabs/novita-mcp-server",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "@novitalabs/novita-mcp-server",
    "description": "The Novita MCP Server implements the Model Context Protocol to manage Novita AI platform resources, specifically GPU instances, and it interacts with MCP clients like Claude Desktop and Cursor using commands such as listing, creating, and deleting resources over the Novita AI API, configured with an API key.",
    "command": "npx",
    "args": [
      "-y",
      "@novitalabs/novita-mcp-server"
    ],
    "env": {
      "NOVITA_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:28.214Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:05:31.911Z"
  },
  "tags": [
    "novitalabs",
    "novita labs",
    "novita",
    "labs",
    "novita labs novitalabs"
  ]
},
{
  "_id": {
    "$oid": "6828994ca6f8dc721ceb4336"
  },
  "seq": {
    "$numberLong": "409"
  },
  "type": "STDIO",
  "url": "https://github.com/kazuph/mcp-pocket",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "pocket",
    "description": "This MCP server implements a connector for Claude Desktop that fetches saved articles from the Pocket API and allows marking articles as read, utilizing Node.js and requiring Pocket API consumer key and access token for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@kazuph/mcp-pocket"
    ],
    "env": {
      "POCKET_ACCESS_TOKEN": "your-pocket-access-token",
      "POCKET_CONSUMER_KEY": "your-pocket-consumer-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:28.855Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:05:42.381Z"
  },
  "tags": [
    "pocket"
  ]
},
{
  "_id": {
    "$oid": "6828994ea6f8dc721ceb4338"
  },
  "seq": {
    "$numberLong": "410"
  },
  "type": "STDIO",
  "url": "https://github.com/Bob-lance/instagram-engagement-mcp",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "instagram-engagement",
    "description": "This MCP server analyzes Instagram engagement metrics using the Instagram Private API to extract demographic insights, compare accounts, and identify potential leads from posts and accounts, enabling the generation of comprehensive engagement reports.",
    "command": "npx",
    "args": [
      "instagram-engagement-mcp"
    ],
    "env": {
      "INSTAGRAM_PASSWORD": "your_instagram_password",
      "INSTAGRAM_USERNAME": "your_instagram_username"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:30.396Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:05:43.902Z"
  },
  "tags": [
    "instagram engagement",
    "instagram",
    "engagement"
  ]
},
{
  "_id": {
    "$oid": "6828994fa6f8dc721ceb433a"
  },
  "seq": {
    "$numberLong": "411"
  },
  "type": "STDIO",
  "url": "https://github.com/CLOUDWERX-DEV/gpt-image-1-mcp",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gpt-image-1",
    "description": "This MCP server implements the Model Context Protocol to generate and edit images using the OpenAI gpt-image-1 model, communicating through base64 image data or file paths, and integrates with tools like VS Code, Roo, Cursor, Augment, and Windsurf via MCP.",
    "command": "npx",
    "args": [
      "-y",
      "@cloudwerxlab/gpt-image-1-mcp"
    ],
    "env": {
      "GPT_IMAGE_OUTPUT_DIR": "OPTIONAL: PATH TO SAVE GENERATED IMAGES",
      "OPENAI_API_KEY": "PASTE YOUR OPEN-AI KEY HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:31.655Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:06:15.549Z"
  },
  "tags": [
    "gpt image 1",
    "gpt",
    "image",
    "image 1"
  ]
},
{
  "_id": {
    "$oid": "68289950a6f8dc721ceb433c"
  },
  "seq": {
    "$numberLong": "412"
  },
  "type": "STDIO",
  "url": "https://github.com/Dumpling-AI/mcp-server-dumplingai",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "dumplingai",
    "description": "The Dumpling AI MCP Server provides access to data scraping, content processing, and AI capabilities through Dumpling AI APIs, offering tools for web scraping, document conversion, knowledge management, agent completions, and code execution using JavaScript and Python.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-dumplingai"
    ],
    "env": {
      "DUMPLING_API_KEY": "<your-api-key>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:32.292Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:43:07.704Z"
  },
  "tags": [
    "dumplingai",
    "dumpling ai",
    "dumpling",
    "ai"
  ]
},
{
  "_id": {
    "$oid": "68289951a6f8dc721ceb433e"
  },
  "seq": {
    "$numberLong": "413"
  },
  "type": "STDIO",
  "url": "https://github.com/scopiousdigital/hubspot-mcp",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "hubspot",
    "description": "This MCP server implements an interface to the HubSpot API, providing tools to manage CRM objects like contacts, deals, and companies, and to retrieve sales analytics, deal history, engagements, sales performance, pipeline analytics, and forecast analytics using the HubSpot private app token for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-hubspot"
    ],
    "env": {
      "HUBSPOT_API_KEY": "your-api-key-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:33.408Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:06:33.623Z"
  },
  "tags": [
    "hubspot"
  ]
},
{
  "_id": {
    "$oid": "68289952a6f8dc721ceb4340"
  },
  "seq": {
    "$numberLong": "414"
  },
  "type": "STDIO",
  "url": "https://github.com/yan5236/bing-cn-mcp-server",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "bingcn",
    "description": "This MCP server implementation provides a Chinese Bing search tool accessible via the Model Context Protocol (MCP), enabling AI tools like Claude to directly search Bing and fetch webpage content without requiring an API key; it utilizes web scraping to provide `bing_search` and `fetch_webpage` tools.",
    "command": "npx",
    "args": [
      "bing-cn-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:34.102Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:06:43.920Z"
  },
  "tags": [
    "bingcn"
  ]
},
{
  "_id": {
    "$oid": "68289953a6f8dc721ceb4342"
  },
  "seq": {
    "$numberLong": "415"
  },
  "type": "STDIO",
  "url": "https://github.com/manascb1344/together-mcp-server",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "together-image-gen",
    "description": "This MCP server implements an image generation tool using the Flux.1 Schnell model through the Together AI API, offering a standardized interface accessible through MCP clients; it accepts text prompts and optional parameters for image customization and responds with base64-encoded image data or image URLs.",
    "command": "npx",
    "args": [
      "together-mcp@latest -y"
    ],
    "env": {
      "TOGETHER_API_KEY": "<API KEY>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:35.583Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:06:45.762Z"
  },
  "tags": [
    "together image gen",
    "together",
    "image",
    "gen",
    "image gen"
  ]
},
{
  "_id": {
    "$oid": "68289954a6f8dc721ceb4344"
  },
  "seq": {
    "$numberLong": "416"
  },
  "type": "STDIO",
  "url": "https://github.com/spences10/mcp-perplexity-search",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-perplexity-search",
    "description": "This MCP server implements a chat completion tool that integrates with the Perplexity AI API to generate responses based on predefined or custom prompt templates, supporting various output formats and configurable model parameters; it leverages the Model Context Protocol for communication and is powered by Perplexity's models like Sonar and LLaMA.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-perplexity-search"
    ],
    "env": {
      "PERPLEXITY_API_KEY": "your-perplexity-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:36.539Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:07:17.277Z"
  },
  "tags": [
    "perplexity search",
    "perplexity",
    "search"
  ]
},
{
  "_id": {
    "$oid": "68289955a6f8dc721ceb4346"
  },
  "seq": {
    "$numberLong": "417"
  },
  "type": "STDIO",
  "url": "https://github.com/ronantakizawa/a11ymcp",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "a11y-accessibility",
    "description": "The A11y MCP server provides LLMs with web accessibility testing capabilities by integrating the Deque Axe-core API and Puppeteer to analyze web content (URLs and HTML strings) for WCAG compliance, offering features like color contrast analysis, ARIA validation, and orientation lock detection through the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "a11y-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:37.209Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:07:19.458Z"
  },
  "tags": [
    "a11y",
    "accessibility",
    "a11y accessibility"
  ]
},
{
  "_id": {
    "$oid": "68289955a6f8dc721ceb4348"
  },
  "seq": {
    "$numberLong": "418"
  },
  "type": "STDIO",
  "url": "https://github.com/coinpaprika/dexpaprika-mcp",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "dexpaprika",
    "description": "The DexPaprika MCP server provides AI assistants like Claude with real-time cryptocurrency and DEX data via the Model Context Protocol, enabling on-demand access to token, pool, and DEX information across multiple blockchains using a dedicated API and no API keys.",
    "command": "npx",
    "args": [
      "dexpaprika-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:37.966Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:07:35.156Z"
  },
  "tags": [
    "dexpaprika"
  ]
},
{
  "_id": {
    "$oid": "68289957a6f8dc721ceb434a"
  },
  "seq": {
    "$numberLong": "419"
  },
  "type": "STDIO",
  "url": "https://github.com/jparkerweb/mcp-sqlite",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "MCP SQLite Server",
    "description": "This MCP server implements comprehensive SQLite database interactions via the Model Context Protocol, offering CRUD operations, database introspection, and custom SQL query execution capabilities using the sqlite3 library. The server integrates with MCP-compatible IDEs and tools, accepting commands via JSON RPC.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-sqlite",
      "<path-to-your-sqlite-database.db>"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:39.509Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:07:45.469Z"
  },
  "tags": [
    "sqlite"
  ]
},
{
  "_id": {
    "$oid": "68289959a6f8dc721ceb434c"
  },
  "seq": {
    "$numberLong": "420"
  },
  "type": "STDIO",
  "url": "https://github.com/hireshBrem/prompt-engineer-mcp-server",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "cursor-prompt-engineer",
    "description": "This MCP server rewrites coding prompts using Claude 3 Sonnet via the Anthropic API to optimize them for AI IDEs like Cursor, enhancing clarity, structure, and language-specific considerations, and communicates using the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "cursor-prompt-engineer"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:41.724Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:07:47.299Z"
  },
  "tags": [
    "cursor prompt engineer",
    "cursor",
    "prompt",
    "engineer",
    "prompt engineer"
  ]
},
{
  "_id": {
    "$oid": "6828995aa6f8dc721ceb434e"
  },
  "seq": {
    "$numberLong": "421"
  },
  "type": "STDIO",
  "url": "https://github.com/devabdultech/hn-mcp",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "hackernews",
    "description": "This MCP server provides Hacker News integration for LLM clients like Cursor and Claude by exposing story, comment, user profile, and search data via the Model Context Protocol, utilizing the official Hacker News API and Algolia Search API.",
    "command": "npx",
    "args": [
      "-y",
      "@devabdultech/hn-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:42.406Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:08:18.714Z"
  },
  "tags": [
    "hackernews",
    "hacker news"
  ]
},
{
  "_id": {
    "$oid": "6828995ba6f8dc721ceb4350"
  },
  "seq": {
    "$numberLong": "422"
  },
  "type": "STDIO",
  "url": "https://github.com/GongRzhe/Calendar-Autoauth-MCP-Server",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "calendar",
    "description": "This MCP server implements Google Calendar integration for AI assistants, enabling them to manage calendar events using natural language via the Google Calendar API; it utilizes OAuth2 for authentication with auto browser launch and supports both Desktop and Web application credentials.",
    "command": "npx",
    "args": [
      "@gongrzhe/server-calendar-autoauth-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:43.379Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:08:21.167Z"
  },
  "tags": [
    "calendar"
  ]
},
{
  "_id": {
    "$oid": "6828995ca6f8dc721ceb4352"
  },
  "seq": {
    "$numberLong": "423"
  },
  "type": "STDIO",
  "url": "https://github.com/Malove86/mcp-mysql-server",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mysql",
    "description": "This MCP server implementation enables AI models to interact with MySQL databases through a standardized interface, utilizing technologies like JSON for data transfer and supporting functionalities such as querying, listing tables, and describing table structures while offering secure connection handling, multi-user concurrency, and URL-based remote connection capabilities.",
    "command": "npx",
    "args": [
      "-y",
      "@malove86/mcp-mysql-server"
    ],
    "env": {
      "MYSQL_DATABASE": "your_database",
      "MYSQL_PASSWORD": "your_password",
      "MYSQL_PORT": "3306",
      "MYSQL_USER": "your_user",
      "MYSQL_HOST": "your_host"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:44.595Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:08:36.708Z"
  },
  "tags": [
    "mysql"
  ]
},
{
  "_id": {
    "$oid": "6828995ea6f8dc721ceb4354"
  },
  "seq": {
    "$numberLong": "424"
  },
  "type": "STDIO",
  "url": "https://github.com/piddlingtuna/tfnsw-realtime-alerts-mcp-server",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "tfnsw-realtime-alerts",
    "description": "This MCP server, written in TypeScript, provides access to Transport for NSW's Realtime Alerts API, allowing AI assistants to retrieve and summarize transport disruptions, planned works, and other alerts via `nsw-transport://` URIs and tools using the TfNSW Open Data API for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "tfnsw-realtime-alerts-mcp-server"
    ],
    "env": {
      "NSW_TRANSPORT_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:46.176Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:08:47.286Z"
  },
  "tags": [
    "tfnsw realtime alerts",
    "tfnsw",
    "realtime",
    "alerts",
    "real time alerts",
    "real",
    "time"
  ]
},
{
  "_id": {
    "$oid": "6828995fa6f8dc721ceb4356"
  },
  "seq": {
    "$numberLong": "425"
  },
  "type": "STDIO",
  "url": "https://github.com/BangyiZhang/xmind-generator-mcp",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "xmind-generator",
    "description": "This MCP server generates Xmind mind maps by processing hierarchical topic structures received via the Model Context Protocol, allowing LLMs to create mind maps with features like notes, labels, and markers, and it integrates with Claude Desktop using Node.js.",
    "command": "npx",
    "args": [
      "xmind-generator-mcp"
    ],
    "env": {
      "outputPath": "/path/to/save/xmind/files",
      "autoOpenFile": "false"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:47.180Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:08:48.741Z"
  },
  "tags": [
    "xmind generator",
    "xmind",
    "generator"
  ]
},
{
  "_id": {
    "$oid": "6828995fa6f8dc721ceb4358"
  },
  "seq": {
    "$numberLong": "426"
  },
  "type": "STDIO",
  "url": "https://github.com/MrOrz/mcp-git-commit-aider",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "git-commit-aider",
    "description": "This MCP server, implemented in TypeScript, provides a `commit_staged` tool that commits staged Git changes, automatically appending \"(aider)\" to the committer name, reading committer information from environment variables or Git configuration, enabling tracking of AI contributions.",
    "command": "npx",
    "args": [
      "mcp-git-commit-aider"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:47.849Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:09:20.836Z"
  },
  "tags": [
    "git commit aider",
    "git",
    "commit",
    "aider",
    "git-commit-aider"
  ]
},
{
  "_id": {
    "$oid": "68289961a6f8dc721ceb435a"
  },
  "seq": {
    "$numberLong": "427"
  },
  "type": "STDIO",
  "url": "https://github.com/Bigsy/maven-mcp-server",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "maven-deps-server",
    "description": "This MCP server leverages the Maven Central Repository REST API to allow LLMs to verify Maven dependency existence and retrieve their latest versions, supporting dependency specification through full Maven coordinates and offering both stdio and SSE transport options.",
    "command": "npx",
    "args": [
      "mcp-maven-deps"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:49.182Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:09:22.766Z"
  },
  "tags": [
    "maven deps",
    "maven",
    "deps",
    "maven-deps"
  ]
},
{
  "_id": {
    "$oid": "68289962a6f8dc721ceb435c"
  },
  "seq": {
    "$numberLong": "428"
  },
  "type": "STDIO",
  "url": "https://github.com/peragus-dev/model-enhancement-servers",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "structured-argumentation",
    "description": "This MCP server implementation offers cognitive enhancement tools for large language models by providing servers for structured argumentation, visual reasoning, scientific method, analogical reasoning, metacognitive monitoring, decision frameworks, and collaborative reasoning; the servers are installable via npm/yarn, runnable via Docker, and integrated with Claude Desktop using a JSON configuration.",
    "command": "npx",
    "args": [
      "-y",
      "@waldzellai/structured-argumentation"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:50.493Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:09:38.349Z"
  },
  "tags": [
    "structured argumentation",
    "structured",
    "argumentation"
  ]
},
{
  "_id": {
    "$oid": "68289964a6f8dc721ceb435e"
  },
  "seq": {
    "$numberLong": "429"
  },
  "type": "STDIO",
  "url": "https://github.com/YiyangLi/okta-mcp-server",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "okta",
    "description": "This MCP server implements an Okta API interface, allowing Claude to manage Okta resources via tools that create, read, update, and delete users, groups, and applications using the Okta API; it authenticates using an API token and interacts with the Okta domain.",
    "command": "npx",
    "args": [
      "-y",
      "@yiyang.1i/okta-mcp-server"
    ],
    "env": {
      "API_TOKEN": "your-api-token",
      "OKTA_DOMAIN": "your-domain.okta.com"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:52.236Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:09:48.979Z"
  },
  "tags": [
    "okta"
  ]
},
{
  "_id": {
    "$oid": "68289965a6f8dc721ceb4360"
  },
  "seq": {
    "$numberLong": "430"
  },
  "type": "STDIO",
  "url": "https://github.com/wuchubuzai2018/tongchenglvxing-mcp-server",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "tongchenglvxing-mcp-server",
    "description": "This unofficial Tongcheng Travel MCP Server implements a train ticket search interface for retrieving train schedule information from the Tongcheng Travel website, utilizing the MCP Typescript SDK and Node.js to provide functionalities like querying train schedules and the current time.",
    "command": "npx",
    "args": [
      "-y",
      "/Users/tongchenglvxing-mcp-server/dist/index.js"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:53.178Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:09:50.622Z"
  },
  "tags": [
    "tongchenglvxing",
    "tongcheng lvxing",
    "tongcheng",
    "lvxing"
  ]
},
{
  "_id": {
    "$oid": "68289965a6f8dc721ceb4362"
  },
  "seq": {
    "$numberLong": "431"
  },
  "type": "STDIO",
  "url": "https://github.com/augmentedstartups/VisionCraft-MCP-Server",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "visioncraft",
    "description": "VisionCraft MCP server delivers specialized knowledge of computer vision and GenAI to AI assistants like Claude via the MCP protocol, offering expertise on topics like object detection, segmentation, and agentic frameworks, and integrates with clients like Claude Desktop and VS Code Cline using Node.js.",
    "command": "npx",
    "args": [
      "-y",
      "visioncraft-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:53.799Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:10:22.635Z"
  },
  "tags": [
    "visioncraft",
    "vision",
    "craft"
  ]
},
{
  "_id": {
    "$oid": "68289967a6f8dc721ceb4364"
  },
  "seq": {
    "$numberLong": "432"
  },
  "type": "STDIO",
  "url": "https://github.com/pinkpixel-dev/deep-research-mcp",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "deep-research",
    "description": "The Deep Research MCP Server performs comprehensive web research using the Tavily Search and Crawl APIs, aggregating search results and crawled content into a structured JSON format tailored for Large Language Models (LLMs) to generate detailed markdown documents; it integrates seamlessly into MCP-based AI agent ecosystems.",
    "command": "npx",
    "args": [
      "-y",
      "@pinkpixel/deep-research-mcp"
    ],
    "env": {
      "DOCUMENTATION_PROMPT": "Your custom, detailed instructions for the LLM on how to generate markdown documents from the research data...",
      "RESEARCH_OUTPUT_PATH": "/path/to/your/research/output/folder",
      "TAVILY_API_KEY": "tvly-YOUR_ACTUAL_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:55.208Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:10:24.980Z"
  },
  "tags": [
    "deep research",
    "deep",
    "research"
  ]
},
{
  "_id": {
    "$oid": "68289967a6f8dc721ceb4366"
  },
  "seq": {
    "$numberLong": "433"
  },
  "type": "STDIO",
  "url": "https://github.com/landicefu/divide-and-conquer-mcp-server",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "divide-and-conquer",
    "description": "The Divide and Conquer MCP server facilitates AI agents in decomposing complex tasks by storing task information, checklists, and context in a structured JSON format, enabling task tracking, progress monitoring, and context preservation using tools like `initialize_task`, `add_checklist_item`, and `get_current_task_details`.",
    "command": "npx",
    "args": [
      "-y",
      "@landicefu/divide-and-conquer-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:12:55.837Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:10:40.241Z"
  },
  "tags": [
    "divide and conquer",
    "divide",
    "conquer"
  ]
},
{
  "_id": {
    "$oid": "68289968a6f8dc721ceb4368"
  },
  "seq": {
    "$numberLong": "434"
  },
  "type": "STDIO",
  "url": "https://github.com/vanderheijden86/moneybird-mcp-server",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "moneybird",
    "description": "The Moneybird MCP server connects AI assistants to Moneybird accounting software, providing access to contact management, financial data, and business operations via the Moneybird API using the Model Context Protocol; it supports custom API requests and utilizes TypeScript with Zod schema validation for type safety.",
    "command": "npx",
    "args": [
      "-y",
      "moneybird-mcp-server"
    ],
    "env": {
      "MONEYBIRD_API_TOKEN": "your_api_token_here",
      "MONEYBIRD_ADMINISTRATION_ID": "your_administration_id_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:56.915Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:10:50.587Z"
  },
  "tags": [
    "moneybird",
    "money",
    "bird"
  ]
},
{
  "_id": {
    "$oid": "6828996aa6f8dc721ceb436a"
  },
  "seq": {
    "$numberLong": "435"
  },
  "type": "STDIO",
  "url": "https://github.com/YiyangLi/sms-mcp-server",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "twilio",
    "description": "This MCP server implements a Twilio integration that enables AI assistants like Claude to send SMS and MMS messages by leveraging the Twilio API with Node.js, requiring configuration with Twilio credentials via environment variables and supporting E.164 phone number formatting.",
    "command": "npx",
    "args": [
      "-y",
      "@yiyang.1i/sms-mcp-server"
    ],
    "env": {
      "AUTH_TOKEN": "your_auth_token",
      "ACCOUNT_SID": "your_account_sid",
      "FROM_NUMBER": "your_twilio_number"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:58.471Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:10:52.216Z"
  },
  "tags": [
    "twilio"
  ]
},
{
  "_id": {
    "$oid": "6828996ba6f8dc721ceb436c"
  },
  "seq": {
    "$numberLong": "436"
  },
  "type": "STDIO",
  "url": "https://github.com/Gitmaxd/dubco-mcp-server-npm",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "dubco",
    "description": "This MCP server provides AI assistants with the capability to manage Dub.co short links by creating, updating, and deleting them through the Dub.co API, utilizing the Model Context Protocol over HTTP.",
    "command": "npx",
    "args": [
      "-y",
      "dubco-mcp-server"
    ],
    "env": {
      "DUBCO_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:12:59.438Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:11:24.330Z"
  },
  "tags": [
    "dubco"
  ]
},
{
  "_id": {
    "$oid": "6828996ca6f8dc721ceb436e"
  },
  "seq": {
    "$numberLong": "437"
  },
  "type": "STDIO",
  "url": "https://github.com/saewoohan/mcp-graphql-tools",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "graphql",
    "description": "This MCP server exposes GraphQL APIs to AI assistants, providing tools to execute queries and introspect schemas via HTTP. It accepts configuration options such as default endpoint, headers, timeout, and query complexity.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-graphql-tools",
      "--endpoint=https://api.github.com/graphql",
      "--headers={\"Authorization\":\"Bearer YOUR_GITHUB_TOKEN\"}",
      "--timeout=30000",
      "--maxComplexity=100"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:00.627Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:11:26.484Z"
  },
  "tags": [
    "graphql"
  ]
},
{
  "_id": {
    "$oid": "6828996da6f8dc721ceb4370"
  },
  "seq": {
    "$numberLong": "438"
  },
  "type": "STDIO",
  "url": "https://github.com/tufantunc/ssh-mcp",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ssh-mcp",
    "description": "The SSH MCP Server implements a Model Context Protocol (MCP) server that provides SSH access to Linux and Windows systems, allowing MCP clients to securely execute shell commands using password or key-based authentication. It utilizes the MCP SDK and exposes SSH functionality via the 'exec' tool.",
    "command": "npx",
    "args": [
      "ssh-mcp",
      "-y",
      "--",
      "--host=1.2.3.4",
      "--port=22",
      "--user=root",
      "--password=pass",
      "--key=path/to/key"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:01.957Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:11:41.766Z"
  },
  "tags": [
    "ssh",
    "ssh"
  ]
},
{
  "_id": {
    "$oid": "6828996ea6f8dc721ceb4372"
  },
  "seq": {
    "$numberLong": "439"
  },
  "type": "STDIO",
  "url": "https://github.com/moonbirdai/amplitude-mcp-server",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "amplitude-analytics",
    "description": "The Amplitude MCP Server integrates Amplitude analytics into AI workflows using the Model Context Protocol (MCP) to track events, page views, user signups, user properties, and revenue; it provides tools for interacting with Amplitude's API via standard input/output (stdio) and can be readily used with clients like Claude Desktop.",
    "command": "npx",
    "args": [
      "-y",
      "amplitude-mcp-server",
      "--api-key",
      "YOUR_AMPLITUDE_API_KEY"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:02.613Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:11:52.564Z"
  },
  "tags": [
    "amplitude analytics",
    "amplitude",
    "analytics"
  ]
},
{
  "_id": {
    "$oid": "68289970a6f8dc721ceb4374"
  },
  "seq": {
    "$numberLong": "440"
  },
  "type": "STDIO",
  "url": "https://github.com/sammcj/mcp-data-extractor",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "data-extractor",
    "description": "This MCP server uses Babel to parse TypeScript/JavaScript code and extracts data, like i18n translations or key/value configurations, into JSON files, and SVG components into individual .svg files; it communicates via stdio and can be debugged using the MCP Inspector.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-data-extractor"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:04.236Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:11:54.278Z"
  },
  "tags": [
    "data extractor",
    "data",
    "extractor"
  ]
},
{
  "_id": {
    "$oid": "68289970a6f8dc721ceb4376"
  },
  "seq": {
    "$numberLong": "441"
  },
  "type": "STDIO",
  "url": "https://github.com/aurda012/devcontext",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "devcontext",
    "description": "DevContext is a Model Context Protocol (MCP) server implemented in Node.js that provides developers with project-centric context awareness by building a comprehensive understanding of their codebase and development patterns using keyword analysis, relationship graphs, and structured metadata stored in a TursoDB database and integrating with IDEs like Cursor using Cursor Rules.",
    "command": "npx",
    "args": [
      "-y",
      "devcontext@latest"
    ],
    "env": {
      "TURSO_AUTH_TOKEN": "your-turso-auth-token",
      "TURSO_DATABASE_URL": "your-turso-database-url"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:04.864Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:12:25.965Z"
  },
  "tags": [
    "devcontext",
    "dev context",
    "dev",
    "context"
  ]
},
{
  "_id": {
    "$oid": "68289973a6f8dc721ceb4378"
  },
  "seq": {
    "$numberLong": "442"
  },
  "type": "STDIO",
  "url": "https://github.com/felores/cloudinary-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "cloudinary",
    "description": "This MCP server facilitates uploading images and videos to Cloudinary from Claude Desktop and compatible clients, utilizing the Cloudinary API with configured credentials via environment variables; it supports specifying resource types, public IDs, overwriting options, and tags during uploads.",
    "command": "npx",
    "args": [
      "@felores/cloudinary-mcp-server@latest"
    ],
    "env": {
      "CLOUDINARY_CLOUD_NAME": "your_cloud_name",
      "CLOUDINARY_API_KEY": "your_api_key",
      "CLOUDINARY_API_SECRET": "your_api_secret"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:07.972Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:12:28.356Z"
  },
  "tags": [
    "cloudinary"
  ]
},
{
  "_id": {
    "$oid": "68289974a6f8dc721ceb437a"
  },
  "seq": {
    "$numberLong": "443"
  },
  "type": "STDIO",
  "url": "https://github.com/kevinwatt/mysql-mcp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mysql",
    "description": "This MCP server implementation allows LLMs to securely interact with MySQL databases using the MCP protocol; it executes read-only SELECT queries and data modification operations (INSERT/UPDATE/DELETE) with parameterized queries and transaction support, while also offering functionalities to list tables and describe table structures.",
    "command": "npx",
    "args": [
      "-y",
      "@kevinwatt/mysql-mcp"
    ],
    "env": {
      "MYSQL_PORT": "3306",
      "MYSQL_PASS": "",
      "MYSQL_USER": "root",
      "MYSQL_DB": "your_database",
      "MYSQL_HOST": "127.0.0.1"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:08.918Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:12:43.235Z"
  },
  "tags": [
    "mysql"
  ]
},
{
  "_id": {
    "$oid": "68289975a6f8dc721ceb437c"
  },
  "seq": {
    "$numberLong": "444"
  },
  "type": "STDIO",
  "url": "https://github.com/JayArrowz/mcp-osrs",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "osrs",
    "description": "The OSRS MCP Server enables interaction with the Old School RuneScape Wiki API and game data files using the Model Context Protocol; it allows users to search the OSRS Wiki, access parsed HTML content, and search through various game data definitions such as objects, NPCs, and interfaces stored in text files.",
    "command": "npx",
    "args": [
      "-y",
      "@jayarrowz/mcp-osrs"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:09.888Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:12:54.123Z"
  },
  "tags": [
    "osrs"
  ]
},
{
  "_id": {
    "$oid": "68289977a6f8dc721ceb437e"
  },
  "seq": {
    "$numberLong": "445"
  },
  "type": "STDIO",
  "url": "https://github.com/manolaz/emergency-medicare-planner-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "emergency-medicare-planner",
    "description": "The Emergency Medicare Management MCP server uses the Model Context Protocol and integrates with Google Maps APIs to locate, evaluate, and provide real-time routing to medical facilities based on patient needs; it utilizes Google Places API for search, Directions API for routing, and supports sequential thinking for accurate medical facility matching.",
    "command": "npx",
    "args": [
      "@manolaz/emergency-medicare-planner-mcp-server"
    ],
    "env": {
      "GOOGLE_MAPS_API_KEY": "your_google_maps_api_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:11.710Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:12:56.044Z"
  },
  "tags": [
    "emergency medicare planner",
    "emergency",
    "medicare",
    "planner",
    "emergency-medicare-planner",
    "medicare planner"
  ]
},
{
  "_id": {
    "$oid": "68289978a6f8dc721ceb4380"
  },
  "seq": {
    "$numberLong": "446"
  },
  "type": "STDIO",
  "url": "https://github.com/pinkpixel-dev/taskflow-mcp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "taskflow",
    "description": "TaskFlow MCP is a Model Context Protocol server implemented in Node.js that manages tasks and subtasks for AI assistants by enforcing a structured workflow with user approval, persisting data to disk as JSON, and providing tools for planning, tracking progress, and exporting reports in formats like Markdown and HTML.",
    "command": "npx",
    "args": [
      "-y",
      "@pinkpixel/taskflow-mcp"
    ],
    "env": {
      "TASK_MANAGER_FILE_PATH": "/path/to/tasks.json"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:12.425Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:13:27.970Z"
  },
  "tags": [
    "taskflow",
    "task flow",
    "task",
    "flow"
  ]
},
{
  "_id": {
    "$oid": "6828997aa6f8dc721ceb4382"
  },
  "seq": {
    "$numberLong": "447"
  },
  "type": "STDIO",
  "url": "https://github.com/superfaceai/mcp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "superface",
    "description": "The Superface MCP Server provides access to Superface tools through the Model Context Protocol (MCP), enabling integrations with applications like Claude Desktop using either NPX or Docker; it requires a Superface API key for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@superfaceai/mcp"
    ],
    "env": {
      "SUPERFACE_API_KEY": "<YOUR_API_KEY>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:14.071Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:13:29.829Z"
  },
  "tags": [
    "superface"
  ]
},
{
  "_id": {
    "$oid": "6828997ba6f8dc721ceb4384"
  },
  "seq": {
    "$numberLong": "448"
  },
  "type": "STDIO",
  "url": "https://github.com/kshern/mcp-tavily",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "tavily",
    "description": "This MCP server implements an interface to the Tavily API, offering search functionalities like basic search, context-aware search, and question-answering, along with content extraction from URLs, all accessible via the Model Context Protocol (MCP). It utilizes Node.js and provides configurable options for search depth, filtering, and content inclusion.",
    "command": "npx",
    "args": [
      "-y",
      "@mcptools/mcp-tavily"
    ],
    "env": {
      "TAVILY_API_KEY": "your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:15.327Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:13:45.105Z"
  },
  "tags": [
    "tavily"
  ]
},
{
  "_id": {
    "$oid": "6828997ba6f8dc721ceb4386"
  },
  "seq": {
    "$numberLong": "449"
  },
  "type": "STDIO",
  "url": "https://github.com/pyroprompts/mcp-stdio-to-streamable-http-adapter",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "my-saas-app-development",
    "description": "This MCP server implementation acts as an adapter, enabling MCP clients with STDIO support to communicate with Streamable HTTP MCP servers by relaying requests; it uses environment variables for configuration and integrates with clients like Claude Desktop and LibreChat.",
    "command": "npx",
    "args": [
      "@pyroprompts/mcp-stdio-to-streamable-http-adapter"
    ],
    "env": {
      "URI": "http://localhost:3002/mcp",
      "MCP_NAME": "local-custom-streamable-http-adapter"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:15.980Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:13:55.814Z"
  },
  "tags": [
    "my saas app development",
    "my",
    "saas",
    "app",
    "development",
    "saas app",
    "app development"
  ]
},
{
  "_id": {
    "$oid": "6828997ca6f8dc721ceb4388"
  },
  "seq": {
    "$numberLong": "450"
  },
  "type": "STDIO",
  "url": "https://github.com/lucas-deangelis/arango-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "arangodb-account",
    "description": "This MCP server implementation enables interaction with ArangoDB instances via the Model Context Protocol, providing tools to execute AQL queries (both read-only and read-write), list databases and collections, and read documents by ID; it uses HTTP for communication and accepts ArangoDB connection details as command-line arguments.",
    "command": "npx",
    "args": [
      "-y",
      "arango-mcp-server",
      "http://localhost:8529",
      "root",
      "root"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:16.929Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:13:57.720Z"
  },
  "tags": [
    "arangodb account",
    "arangodb",
    "account"
  ]
},
{
  "_id": {
    "$oid": "6828997da6f8dc721ceb438a"
  },
  "seq": {
    "$numberLong": "451"
  },
  "type": "STDIO",
  "url": "https://github.com/LinkupPlatform/js-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "linkup",
    "description": "The Linkup MCP server implements the Model Context Protocol to integrate Linkup's web search functionality with AI models via function calling, utilizing HTTP requests and providing a `search-web` tool; it requires a Linkup API key and supports configuration via command-line options or environment variables.",
    "command": "npx",
    "args": [
      "-y",
      "linkup-mcp-server"
    ],
    "env": {
      "LINKUP_API_KEY": "YOUR_LINKUP_API_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:17.641Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:14:29.657Z"
  },
  "tags": [
    "linkup"
  ]
},
{
  "_id": {
    "$oid": "6828997ea6f8dc721ceb438c"
  },
  "seq": {
    "$numberLong": "452"
  },
  "type": "STDIO",
  "url": "https://github.com/AshDevFr/discourse-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "discourse",
    "description": "This Node.js server implements the Model Context Protocol (MCP) to search Discourse forum posts; it exposes a `search_posts` tool that accepts a search query and returns an array of post objects by interacting with the Discourse API.",
    "command": "npx",
    "args": [
      "-y",
      "@ashdev/discourse-mcp-server"
    ],
    "env": {
      "DISCOURSE_API_URL": "https://try.discourse.org",
      "DISCOURSE_API_KEY": "1234",
      "DISCOURSE_API_USERNAME": "ash"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:18.259Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:14:31.285Z"
  },
  "tags": [
    "discourse"
  ]
},
{
  "_id": {
    "$oid": "68289980a6f8dc721ceb438e"
  },
  "seq": {
    "$numberLong": "453"
  },
  "type": "STDIO",
  "url": "https://github.com/jimmcq/Lemonade-Stand-MCP-Server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "lemonade-stand",
    "description": "This MCP server implements a Lemonade Stand game, exposing tools to Claude Desktop for managing game state, buying supplies, setting prices, and selling lemonade using Node.js and JSON over the Model Context Protocol. The server simulates dynamic weather, supply chains, and customer demand, enabling Claude to play the game strategically.",
    "command": "npx",
    "args": [
      "/path/to/Lemonade-Stand-MCP-Server/server.js"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:20.772Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:14:46.888Z"
  },
  "tags": [
    "lemonade stand",
    "lemonade",
    "stand"
  ]
},
{
  "_id": {
    "$oid": "68289981a6f8dc721ceb4390"
  },
  "seq": {
    "$numberLong": "454"
  },
  "type": "STDIO",
  "url": "https://github.com/bart6114/my-bear-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "bear",
    "description": "The Bear MCP Server implements the Model Context Protocol to provide AI assistants, such as Claude, read-only access to notes stored in the Bear app's SQLite database; it uses tools to search, open notes and tags, and retrieve tag information via SQL SELECT queries, ensuring data integrity.",
    "command": "npx",
    "args": [
      "github:bart6114/my-bear-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:21.371Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:14:57.500Z"
  },
  "tags": [
    "bear"
  ]
},
{
  "_id": {
    "$oid": "68289982a6f8dc721ceb4392"
  },
  "seq": {
    "$numberLong": "455"
  },
  "type": "STDIO",
  "url": "https://github.com/jonathanfischer97/juliadoc-mcp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "juliadoc",
    "description": "This MCP server provides Julia documentation and source code to Claude Desktop using the `get-doc` and `get-source` tools, leveraging Node.js, Julia, and a 5-minute TTL cache for efficiency.",
    "command": "npx",
    "args": [
      "-y",
      "@jonathanfischer97/server-juliadoc"
    ],
    "env": {
      "JULIA_PROJECT": "/path/to/your/julia/project"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:22.027Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:14:59.122Z"
  },
  "tags": [
    "juliadoc",
    "julia",
    "doc"
  ]
},
{
  "_id": {
    "$oid": "68289982a6f8dc721ceb4394"
  },
  "seq": {
    "$numberLong": "456"
  },
  "type": "STDIO",
  "url": "https://github.com/olaservo/mcp-advisor",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-advisor",
    "description": "The MCP Advisor server provides access to the Model Context Protocol specification and documentation through prompts and resources, utilizing the contents of a standardized `llms.txt` file to fetch specification content and GitHub to fetch the schema, and serving this content over HTTP, enabling LLMs and humans to understand and interact with the MCP specification.",
    "command": "npx",
    "args": [
      "mcp-advisor@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:22.956Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:15:31.307Z"
  },
  "tags": [
    "advisor"
  ]
},
{
  "_id": {
    "$oid": "68289983a6f8dc721ceb4396"
  },
  "seq": {
    "$numberLong": "457"
  },
  "type": "STDIO",
  "url": "https://github.com/tanob/mcp-desktop-automation",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "desktop-automation",
    "description": "This MCP server provides desktop automation capabilities by using RobotJS to control mouse movements and keyboard inputs, and offers screenshot functionality; it communicates using JSON and exposes resources like screen captures via the `screenshot://` protocol.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-desktop-automation"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:23.661Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:15:32.715Z"
  },
  "tags": [
    "desktop automation",
    "desktop",
    "automation"
  ]
},
{
  "_id": {
    "$oid": "68289984a6f8dc721ceb4398"
  },
  "seq": {
    "$numberLong": "458"
  },
  "type": "STDIO",
  "url": "https://github.com/minbang930/Youtube-Vision-MCP",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "youtube-vision",
    "description": "This MCP server utilizes the Google Gemini Vision API to analyze YouTube videos, enabling users to ask questions, generate summaries, and extract key moments. It communicates via stdio and requires a Gemini API key, supporting configuration of the Gemini model name via environment variables.",
    "command": "npx",
    "args": [
      "-y",
      "youtube-vision"
    ],
    "env": {
      "GEMINI_MODEL_NAME": "gemini-2.0-flash",
      "GEMINI_API_KEY": "YOUR_GEMINI_API_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:24.291Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:15:48.372Z"
  },
  "tags": [
    "youtube vision",
    "youtube",
    "vision"
  ]
},
{
  "_id": {
    "$oid": "68289984a6f8dc721ceb439a"
  },
  "seq": {
    "$numberLong": "459"
  },
  "type": "STDIO",
  "url": "https://github.com/tanaikech/MCPApp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gas_web_apps",
    "description": "This MCPApp implements a Model Context Protocol (MCP) server using Google Apps Script, enabling AI clients to securely interact with Google Workspace services such as Drive and Calendar via HTTP POST requests; it uses a Google Apps Script library and supports interactions through 'tools/call' and 'resources/read' methods defined by the MCP standard, allowing AI tools to access data and execute functions within the Google environment.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "https://script.google.com/macros/s/###/exec?accessKey=sample"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:24.918Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:43:09.740Z"
  },
  "tags": [
    "gas web apps",
    "gas",
    "web",
    "apps",
    "web apps"
  ]
},
{
  "_id": {
    "$oid": "68289985a6f8dc721ceb439c"
  },
  "seq": {
    "$numberLong": "460"
  },
  "type": "STDIO",
  "url": "https://github.com/AB498/code-context-provider-mcp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "code-context-provider-mcp",
    "description": "The Code Context Provider MCP server offers code context and analysis for AI assistants by extracting directory structure and code symbols from JavaScript, TypeScript, and Python files using WebAssembly Tree-sitter parsers, adhering to the MCP protocol for seamless integration.",
    "command": "npx",
    "args": [
      "-y",
      "code-context-provider-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:25.540Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:16:00.924Z"
  },
  "tags": [
    "code context provider",
    "code",
    "context",
    "provider"
  ]
},
{
  "_id": {
    "$oid": "68289988a6f8dc721ceb439e"
  },
  "seq": {
    "$numberLong": "461"
  },
  "type": "STDIO",
  "url": "https://github.com/f-is-h/mcp-easy-copy",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-easy-copy",
    "description": "This MCP server for Claude Desktop reads the Claude Desktop configuration file, extracts configured MCP service names, and presents them in an easy-to-copy format at the top of the tools list, using Node.js and the Model Context Protocol SDK.",
    "command": "npx",
    "args": [
      "-y",
      "@fishes/mcp-easy-copy"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:28.391Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:16:32.926Z"
  },
  "tags": [
    "easy copy",
    "easy",
    "copy"
  ]
},
{
  "_id": {
    "$oid": "68289989a6f8dc721ceb43a0"
  },
  "seq": {
    "$numberLong": "462"
  },
  "type": "STDIO",
  "url": "https://github.com/ahmad2x4/mcp-server-seq",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "seq",
    "description": "This MCP server implementation provides access to Seq's logging and monitoring API endpoints, enabling management of signals, retrieval of events with extensive filtering, and fetching of alert states, utilizing technologies like TypeScript and Zod for type safety and communicating via standard input/output (stdio).",
    "command": "npx",
    "args": [
      "-y",
      "mcp-seq"
    ],
    "env": {
      "SEQ_API_KEY": "your-api-key",
      "SEQ_BASE_URL": "your-seq-url"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:29.070Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:16:34.609Z"
  },
  "tags": [
    "seq"
  ]
},
{
  "_id": {
    "$oid": "6828998aa6f8dc721ceb43a2"
  },
  "seq": {
    "$numberLong": "463"
  },
  "type": "STDIO",
  "url": "https://github.com/ronantakizawa/gis-dataconversion-mcp",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gis-dataconversion-mcp",
    "description": "The GIS Data Conversion MCP server empowers LLMs to manipulate geographic data by providing conversion between formats like WKT, GeoJSON, TopoJSON, KML, and CSV, and also performs reverse geocoding using various GIS libraries.",
    "command": "npx",
    "args": [
      "-y",
      "a11y-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:30.010Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:16:49.882Z"
  },
  "tags": [
    "gis dataconversion",
    "gis",
    "dataconversion",
    "data conversion",
    "data",
    "conversion"
  ]
},
{
  "_id": {
    "$oid": "6828998aa6f8dc721ceb43a4"
  },
  "seq": {
    "$numberLong": "464"
  },
  "type": "STDIO",
  "url": "https://github.com/devyhan/xcode-mcp",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "xcode-mcp",
    "description": "The xcode-mcp server enables Xcode project automation through the Model Context Protocol, offering functionalities such as project information retrieval, building, testing, archiving, code signing, Swift Package Manager integration, iOS Simulator management via simctl, and real device app deployment using `xcodebuild` and `devicectl`.",
    "command": "npx",
    "args": [
      "@devyhan/xcode-mcp",
      "-y"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:30.619Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:17:01.047Z"
  },
  "tags": [
    "xcode",
    "x code"
  ]
},
{
  "_id": {
    "$oid": "6828998ba6f8dc721ceb43a6"
  },
  "seq": {
    "$numberLong": "465"
  },
  "type": "STDIO",
  "url": "https://github.com/nacgarg/bazel-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "bazel",
    "description": "The Bazel MCP server exposes Bazel build system functionalities, such as building targets, querying the dependency graph, running tests, and listing targets, to MCP-enabled AI agents using command-line arguments and environment variables for configuration.",
    "command": "npx",
    "args": [
      "-y",
      "github:nacgarg/bazel-mcp-server",
      "--bazel_path",
      "/absolute/path/to/your/bazel/binary",
      "--workspace_path",
      "/absolute/path/to/your/bazel/workspace"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:31.229Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:17:02.718Z"
  },
  "tags": [
    "bazel"
  ]
},
{
  "_id": {
    "$oid": "6828998ca6f8dc721ceb43a8"
  },
  "seq": {
    "$numberLong": "466"
  },
  "type": "STDIO",
  "url": "https://github.com/sanxfxteam/gemini-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gemini-imagen",
    "description": "This MCP server implements image generation using Google's Gemini 2 API, communicating via stdio using the Model Context Protocol; it accepts prompts and generation parameters to produce images, and integrates with applications like Claude Desktop.",
    "command": "npx",
    "args": [
      "-y",
      "github:sanxfxteam/gemini-mcp-server"
    ],
    "env": {
      "GEMINI_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:32.539Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:43:11.334Z"
  },
  "tags": [
    "gemini",
    "imagen",
    "gemini imagen"
  ]
},
{
  "_id": {
    "$oid": "6828998da6f8dc721ceb43aa"
  },
  "seq": {
    "$numberLong": "467"
  },
  "type": "STDIO",
  "url": "https://github.com/xianminx/mcp-server-flomo",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-flomo",
    "description": "This MCP server facilitates creating notes in Flomo from AI chat interactions by translating natural language requests into Flomo REST API calls. It integrates with tools like Cursor and Claude, using TypeScript and the Model Context Protocol SDK, and communicates over stdio.",
    "command": "npx",
    "args": [
      "mcp-server-flomo"
    ],
    "env": {
      "FLOMO_API_URL": "your_api_url_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:33.161Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:17:36.356Z"
  },
  "tags": [
    "flomo"
  ]
},
{
  "_id": {
    "$oid": "6828998da6f8dc721ceb43ac"
  },
  "seq": {
    "$numberLong": "468"
  },
  "type": "STDIO",
  "url": "https://github.com/ourongxing/newsnow-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "newsnow",
    "description": "This MCP server implementation provides content for NewsNow, integrating with over 40 sources using npx and configurable environment variables like BASE_URL. It utilizes the MIT license.",
    "command": "npx",
    "args": [
      "-y",
      "newsnow-mcp-server"
    ],
    "env": {
      "BASE_URL": "https://newsnow.busiyi.world"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:33.782Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:17:51.480Z"
  },
  "tags": [
    "newsnow",
    "news",
    "now"
  ]
},
{
  "_id": {
    "$oid": "6828998ea6f8dc721ceb43ae"
  },
  "seq": {
    "$numberLong": "469"
  },
  "type": "STDIO",
  "url": "https://github.com/moonbirdai/mixpanel-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mixpanel-analytics",
    "description": "The Mixpanel MCP server provides an integration layer using the Model Context Protocol that allows AI assistants to track events, page views, and user signups, and update user profiles in Mixpanel, utilizing tools such as `mixpanel_track_event`, `mixpanel_track_pageview`, `mixpanel_track_signup`, and `mixpanel_set_user_profile` over stdio.",
    "command": "npx",
    "args": [
      "-y",
      "mixpanel-mcp-server",
      "--token",
      "YOUR_MIXPANEL_TOKEN"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:34.756Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:18:09.257Z"
  },
  "tags": [
    "mixpanel analytics",
    "mixpanel",
    "analytics"
  ]
},
{
  "_id": {
    "$oid": "6828998fa6f8dc721ceb43b0"
  },
  "seq": {
    "$numberLong": "470"
  },
  "type": "STDIO",
  "url": "https://github.com/keegancsmith/emacs-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "emacs-mcp",
    "description": "This MCP server enables language models to interact with a running Emacs instance by evaluating Emacs Lisp expressions using `emacsclient --eval` and provides tools to access the visible text and contextual information of the Emacs buffer, facilitating interactions via the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@keegancsmith/emacs-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:35.371Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:18:10.835Z"
  },
  "tags": [
    "emacs",
    "emacs"
  ]
},
{
  "_id": {
    "$oid": "68289990a6f8dc721ceb43b2"
  },
  "seq": {
    "$numberLong": "471"
  },
  "type": "STDIO",
  "url": "https://github.com/noahlozevski/mcp-idb",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "idb",
    "description": "This MCP server implementation integrates with Facebook's idb to manage iOS devices and execute automated tests through the Model Context Protocol (MCP), utilizing technologies like Homebrew for idb installation and JSON for configuration.",
    "command": "npx",
    "args": [
      "-y",
      "@noahlozevski/idb"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:36.337Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:18:36.285Z"
  },
  "tags": [
    "idb"
  ]
},
{
  "_id": {
    "$oid": "68289991a6f8dc721ceb43b4"
  },
  "seq": {
    "$numberLong": "472"
  },
  "type": "STDIO",
  "url": "https://github.com/HarjjotSinghh/mcp-server-postgres-multi-schema",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "postgres",
    "description": "This MCP server provides read-only access to PostgreSQL databases by inspecting schemas using the Model Context Protocol; it supports multi-schema configurations specified via command-line arguments and exposes table schemas as JSON resources while executing queries in read-only transactions.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-postgres-multi-schema",
      "postgresql://localhost/mydb",
      "public,audit"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:37.871Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:18:37.857Z"
  },
  "tags": [
    "postgres"
  ]
},
{
  "_id": {
    "$oid": "68289993a6f8dc721ceb43b6"
  },
  "seq": {
    "$numberLong": "473"
  },
  "type": "STDIO",
  "url": "https://github.com/tkoba1974/mcp-kroki",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-kroki",
    "description": "This MCP server provides functionality to generate URLs and download diagrams in various formats by leveraging the Kroki.io API; it accepts diagram content and type, then converts it using Kroki.io to SVG, PNG, PDF, or JPEG.",
    "command": "npx",
    "args": [
      "-y",
      "@tkoba1974/mcp-kroki"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:39.178Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:18:53.173Z"
  },
  "tags": [
    "kroki"
  ]
},
{
  "_id": {
    "$oid": "68289995a6f8dc721ceb43b8"
  },
  "seq": {
    "$numberLong": "474"
  },
  "type": "STDIO",
  "url": "https://github.com/grahama1970/claude-code-mcp-enhanced",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "claude-code-mcp-enhanced",
    "description": "This MCP server empowers LLMs to interact with Claude Code by bypassing permissions and providing direct access to file editing and other system functionalities, utilizing technologies such as Node.js and the Claude CLI, and employing the Model Context Protocol (MCP) for communication and task orchestration.",
    "command": "npx",
    "args": [
      "github:grahama1970/claude-code-mcp-enhanced"
    ],
    "env": {
      "MCP_CLAUDE_DEBUG": "false",
      "MCP_HEARTBEAT_INTERVAL_MS": "15000",
      "MCP_EXECUTION_TIMEOUT_MS": "1800000"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:41.596Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:19:11.248Z"
  },
  "tags": [
    "claude",
    "code",
    "claude code",
    "enhanced"
  ]
},
{
  "_id": {
    "$oid": "68289996a6f8dc721ceb43ba"
  },
  "seq": {
    "$numberLong": "475"
  },
  "type": "STDIO",
  "url": "https://github.com/pinkpixel-dev/npm-helper-mcp",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "npm-helper",
    "description": "This MCP server offers tools for AI assistants to manage NPM dependencies, utilizing npm-check-updates for package updates and version management, and providing NPM search capabilities via the npmjs.org registry; it communicates with LLMs using the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@pinkpixel/npm-helper-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:42.281Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:19:14.244Z"
  },
  "tags": [
    "npm helper",
    "npm",
    "helper"
  ]
},
{
  "_id": {
    "$oid": "68289996a6f8dc721ceb43bc"
  },
  "seq": {
    "$numberLong": "476"
  },
  "type": "STDIO",
  "url": "https://github.com/Antipas/4oimage-mcp",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "4o-image",
    "description": "This MCP server implementation integrates with the 4o-image API, enabling AI systems to generate and edit images using text prompts via HTTP requests with base64-encoded images; it utilizes environment variables for API key configuration and facilitates integration with platforms like Claude through JSON configuration.",
    "command": "npx",
    "args": [
      "-y",
      "4oimage-mcp"
    ],
    "env": {
      "API_KEY": "YOUR_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:42.936Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:19:37.934Z"
  },
  "tags": [
    "4o image",
    "4o",
    "image"
  ]
},
{
  "_id": {
    "$oid": "68289998a6f8dc721ceb43be"
  },
  "seq": {
    "$numberLong": "477"
  },
  "type": "STDIO",
  "url": "https://github.com/arjshiv/localutils-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "This MCP server implements local system utilities, accessible through Cursor and other MCP-compatible clients, by providing functionalities like retrieving time and date, hostname, public IP, directory listing, Node.js version, and port checking; it also features a 'think tool' for recording and analyzing development thoughts, communicating via the Model Context Protocol.",
    "command": "npx",
    "args": [
      "localutils-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:44.575Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:19:39.680Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "68289999a6f8dc721ceb43c0"
  },
  "seq": {
    "$numberLong": "478"
  },
  "type": "STDIO",
  "url": "https://github.com/karayaman/lichess-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "filesystem",
    "description": "This MCP server enables users to interact with the Lichess platform via natural language using the Model Context Protocol, allowing them to manage accounts, play games, analyze positions, and join tournaments through the Lichess API.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-filesystem",
      "/Users/username/Desktop",
      "/Users/username/Downloads"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:45.505Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:19:54.656Z"
  },
  "tags": [
    "filesystem",
    "file system",
    "file",
    "system"
  ]
},
{
  "_id": {
    "$oid": "6828999aa6f8dc721ceb43c2"
  },
  "seq": {
    "$numberLong": "479"
  },
  "type": "STDIO",
  "url": "https://github.com/ibraheem4/eventbrite-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "eventbrite",
    "description": "This MCP server implements an interface to the Eventbrite API, enabling AI assistants to search for events, retrieve event and venue details, and list event categories; it utilizes `supergateway` and integrates with the Claude desktop app and development environment.",
    "command": "npx",
    "args": [
      "-y",
      "@ibraheem4/eventbrite-mcp"
    ],
    "env": {
      "EVENTBRITE_API_KEY": "your-eventbrite-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:46.143Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:20:12.778Z"
  },
  "tags": [
    "eventbrite"
  ]
},
{
  "_id": {
    "$oid": "6828999ba6f8dc721ceb43c4"
  },
  "seq": {
    "$numberLong": "480"
  },
  "type": "STDIO",
  "url": "https://github.com/antonorlov/mcp-postgres-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "postgres",
    "description": "This MCP server implements a Model Context Protocol interface for PostgreSQL databases, enabling AI models to connect, query, and execute database operations using prepared statements with PostgreSQL or MySQL-style parameter placeholders. It integrates with PostgreSQL via direct connections using provided credentials and environment variables.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-postgres-server"
    ],
    "env": {
      "PG_PORT": "5432",
      "PG_HOST": "your_host",
      "PG_PASSWORD": "your_password",
      "PG_DATABASE": "your_database",
      "PG_USER": "your_user"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:47.130Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:20:15.719Z"
  },
  "tags": [
    "postgres"
  ]
},
{
  "_id": {
    "$oid": "6828999ba6f8dc721ceb43c6"
  },
  "seq": {
    "$numberLong": "481"
  },
  "type": "STDIO",
  "url": "https://github.com/ShiftEngineering/mcp-close-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "close",
    "description": "This MCP server implementation connects to the Close.com API, enabling retrieval and modification of lead, contact, email, task, opportunity, call, and user data using specified tools; it supports querying and managing Close.com resources through an MCP client like Claude Desktop.",
    "command": "npx",
    "args": [
      "@shiftengineering/mcp-close-server"
    ],
    "env": {
      "CLOSE_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:47.885Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:20:39.575Z"
  },
  "tags": [
    "close"
  ]
},
{
  "_id": {
    "$oid": "6828999da6f8dc721ceb43c8"
  },
  "seq": {
    "$numberLong": "482"
  },
  "type": "STDIO",
  "url": "https://github.com/RSS3-Network/mcp-server-rss3",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "rss3",
    "description": "This MCP server implementation integrates with the RSS3 API to query data from decentralized chains, social media platforms, and the RSS3 network itself, effectively providing access to Open Web data; it is designed for use with Claude Desktop, Cursor, and ChatWise via `npx mcp-server-rss3`.",
    "command": "npx",
    "args": [
      "mcp-server-rss3"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:49.624Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:20:41.164Z"
  },
  "tags": [
    "rss3"
  ]
},
{
  "_id": {
    "$oid": "682899a0a6f8dc721ceb43ca"
  },
  "seq": {
    "$numberLong": "483"
  },
  "type": "STDIO",
  "url": "https://github.com/landicefu/mcp-client-configuration-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-client-configuration",
    "description": "This MCP server manages client configurations for applications like Cline and Claude by allowing users to retrieve, list, add, and remove server configurations from JSON configuration files, automatically detecting the correct file path based on the operating system and client.",
    "command": "npx",
    "args": [
      "-y",
      "@landicefu/mcp-client-configuration-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:52.787Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:20:56.265Z"
  },
  "tags": [
    "client configuration",
    "client",
    "configuration"
  ]
},
{
  "_id": {
    "$oid": "682899a2a6f8dc721ceb43cc"
  },
  "seq": {
    "$numberLong": "484"
  },
  "type": "STDIO",
  "url": "https://github.com/tekorex/mcp2http",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "my-mcp-server",
    "description": "MCP2HTTP adapts stdio Model Context Protocol (MCP) clients to communicate with HTTP MCP servers by converting stdio input/output to HTTP requests, tracking client sessions with a UUID-based `Session-Id` header, filtering requests based on advertised server capabilities, and dropping notifications to align with HTTP's request/response architecture.",
    "command": "npx",
    "args": [
      "-y",
      "mcp2http",
      "http://localhost:3000/mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:54.114Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:21:14.563Z"
  },
  "tags": [
    "my",
    "my mcp server"
  ]
},
{
  "_id": {
    "$oid": "682899a4a6f8dc721ceb43ce"
  },
  "seq": {
    "$numberLong": "485"
  },
  "type": "STDIO",
  "url": "https://github.com/felores/perplexity-sonar-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "perplexity",
    "description": "This MCP server implementation provides access to Perplexity's Sonar AI models within Claude Desktop and other MCP clients, enabling real-time web searches during conversations through the Perplexity API using HTTP/SSE; it supports various models and parameters for customized search experiences.",
    "command": "npx",
    "args": [
      "-y",
      "@felores/perplexity-sonar-mcp"
    ],
    "env": {
      "PERPLEXITY_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:56.371Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:21:17.213Z"
  },
  "tags": [
    "perplexity"
  ]
},
{
  "_id": {
    "$oid": "682899a5a6f8dc721ceb43d0"
  },
  "seq": {
    "$numberLong": "486"
  },
  "type": "STDIO",
  "url": "https://github.com/ZebraRoy/read-docs-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "read-docs-{name}",
    "description": "This Model Context Protocol (MCP) server provides AI agents with structured access to package documentation by dynamically generating tools that use configured documentation modules and configurable naming patterns; it supports cloning git repositories over HTTP/HTTPS or SSH and parsing `package.json` for versioning information.  The server can also function as a guide to help create documentation by providing instructions and the required structure.",
    "command": "npx",
    "args": [
      "-y",
      "read-docs-mcp",
      "--git-repo-path=https://github.com/user/repo",
      "--name=YourLibName"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:57.021Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:21:41.579Z"
  },
  "tags": [
    "read docs",
    "read",
    "docs"
  ]
},
{
  "_id": {
    "$oid": "682899a5a6f8dc721ceb43d2"
  },
  "seq": {
    "$numberLong": "487"
  },
  "type": "STDIO",
  "url": "https://github.com/notorious-d-e-v/solana-mcp-explorer",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "solana-mcp-explorer",
    "description": "The Solana MCP Explorer implements an MCP server that enables discovery and exploration of other MCP servers within the Solana ecosystem by leveraging the MCP protocol; users integrate this server into an existing MCP host environment like Claude Desktop by configuring the 'solana-mcp-explorer' command.",
    "command": "npx",
    "args": [
      "-y",
      "solana-mcp-explorer@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:57.962Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:21:43.358Z"
  },
  "tags": [
    "solana",
    "explorer",
    "solana explorer",
    "solana",
    "explorer"
  ]
},
{
  "_id": {
    "$oid": "682899a6a6f8dc721ceb43d4"
  },
  "seq": {
    "$numberLong": "488"
  },
  "type": "STDIO",
  "url": "https://github.com/PsychArch/jina-mcp-tools",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "jina-mcp-tools",
    "description": "This MCP server implements the Model Context Protocol and integrates with Jina AI Search Foundation APIs, providing access to web content extraction, web search, and fact-checking capabilities via r.jina.ai, s.jina.ai, and g.jina.ai respectively, and is designed for use within the Cursor editor using a custom configuration file.",
    "command": "npx",
    "args": [
      "jina-mcp-tools"
    ],
    "env": {
      "JINA_API_KEY": "your_jina_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:13:58.594Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:21:57.873Z"
  },
  "tags": [
    "jina tools",
    "jina",
    "tools"
  ]
},
{
  "_id": {
    "$oid": "682899a7a6f8dc721ceb43d6"
  },
  "seq": {
    "$numberLong": "489"
  },
  "type": "STDIO",
  "url": "https://github.com/openintegrations/sane-local-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "filesystem",
    "description": "The Sane Local MCP CLI wraps Node.js-based Model Context Protocol (MCP) servers in Docker containers to improve security and monitoring by isolating server execution; it utilizes `execa` to execute the provided command and pipes standard input/output/error streams back to the user, integrating with Claude and Cursor via configuration files.",
    "command": "npx",
    "args": [
      "@openint/mcp-cli",
      "npx",
      "modelcontextprotocol/server-sequential-thinking"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:13:59.462Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:22:16.230Z"
  },
  "tags": [
    "filesystem",
    "file system",
    "file",
    "system"
  ]
},
{
  "_id": {
    "$oid": "682899a8a6f8dc721ceb43d8"
  },
  "seq": {
    "$numberLong": "490"
  },
  "type": "STDIO",
  "url": "https://github.com/WeatherXM/weatherxm-pro-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "weatherxm-pro",
    "description": "This MCP server implementation exposes the WeatherXM PRO APIs as MCP tools, enabling access to weather station data, observations, and forecasts through the MCP protocol using Node.js; it integrates with platforms like Claude Desktop, Cursor, and Windsurf Editor.",
    "command": "npx",
    "args": [
      "-y",
      "path to mcp"
    ],
    "env": {
      "WEATHERXMPRO_API_KEY": "your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:00.196Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:22:18.746Z"
  },
  "tags": [
    "weatherxm pro",
    "weatherxm",
    "pro"
  ]
},
{
  "_id": {
    "$oid": "682899a9a6f8dc721ceb43da"
  },
  "seq": {
    "$numberLong": "491"
  },
  "type": "STDIO",
  "url": "https://github.com/pinkpixel-dev/web-scout-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "web-scout",
    "description": "The Web Scout MCP server provides web search and content extraction capabilities by integrating with DuckDuckGo for search queries and offering tools for extracting readable content from URLs; it uses Node.js and can be integrated with MCP clients via a configuration file.",
    "command": "npx",
    "args": [
      "-y",
      "@pinkpixel/web-scout-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:01.352Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:43:12.769Z"
  },
  "tags": [
    "web scout",
    "web",
    "scout"
  ]
},
{
  "_id": {
    "$oid": "682899aba6f8dc721ceb43dc"
  },
  "seq": {
    "$numberLong": "492"
  },
  "type": "STDIO",
  "url": "https://github.com/uh-joan/cortellis-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "cortellis",
    "description": "The Cortellis MCP Server provides access to drug and deal data from the Cortellis database via MCP or HTTP APIs, enabling users to search drugs and companies, explore ontology terms, and retrieve detailed records with SWOT and financial analyses, using technologies like JSON for data exchange and supporting protocols like REST when running as an HTTP server.",
    "command": "npx",
    "args": [
      "-y",
      "@uh-joan/cortellis-mcp-server"
    ],
    "env": {
      "CORTELLIS_USERNAME": "your_username",
      "CORTELLIS_PASSWORD": "your_password"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:03.747Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:22:45.570Z"
  },
  "tags": [
    "cortellis"
  ]
},
{
  "_id": {
    "$oid": "682899ada6f8dc721ceb43de"
  },
  "seq": {
    "$numberLong": "493"
  },
  "type": "STDIO",
  "url": "https://github.com/falgom4/calendar-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "calendar",
    "description": "This MCP server integrates with Google Calendar using the Google Calendar API and enables AI assistants to manage calendar events through natural language; it supports OAuth2 authentication with automatic browser launching, global credential storage, and handles creating, updating, deleting, retrieving, listing, and searching for calendar events.",
    "command": "npx",
    "args": [
      "@nchufa/calendar"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:05.073Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:22:59.529Z"
  },
  "tags": [
    "calendar"
  ]
},
{
  "_id": {
    "$oid": "682899b0a6f8dc721ceb43e0"
  },
  "seq": {
    "$numberLong": "494"
  },
  "type": "STDIO",
  "url": "https://github.com/qianO33/mcp-excel-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-excel-server",
    "description": "The mcp-excel-server is a Node.js implementation of the Model Context Protocol (MCP) that provides file system and Excel file operations such as reading, writing, and listing directories within specified, sandboxed directories using UTF-8 encoding; it integrates with Claude Desktop and VS Code via NPX or Bunx.",
    "command": "npx",
    "args": [
      "-y",
      "@qian33/mcp-excel-server",
      "/Users/username/Desktop",
      "/path/to/other/allowed/dir"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:08.508Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:23:17.980Z"
  },
  "tags": [
    "excel",
    "excel"
  ]
},
{
  "_id": {
    "$oid": "682899b1a6f8dc721ceb43e2"
  },
  "seq": {
    "$numberLong": "495"
  },
  "type": "STDIO",
  "url": "https://github.com/sangcnguyen/gridly-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gridly-server",
    "description": "This MCP server implementation provides an interface to manage Gridly projects, databases, grids, views, columns, dependencies, and records via the Gridly API, enabling operations such as listing, retrieving, creating, updating, and deleting entities.",
    "command": "npx",
    "args": [
      "-y",
      "gridly-mcp-server"
    ],
    "env": {
      "GRIDLY_API_KEY": "your_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:09.216Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:23:20.156Z"
  },
  "tags": [
    "gridly"
  ]
},
{
  "_id": {
    "$oid": "682899b1a6f8dc721ceb43e4"
  },
  "seq": {
    "$numberLong": "496"
  },
  "type": "STDIO",
  "url": "https://github.com/akiojin/playfab-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "playfab",
    "description": "This PlayFab MCP server implements a middleware using the Model Context Protocol (MCP) that connects large language models such as Claude and Cursor to PlayFab services via PlayFab APIs, enabling item searches, segment inquiries, player profile lookups, inventory management, and PlayFab ID conversion.",
    "command": "npx",
    "args": [
      "-y",
      "@akiojin/playfab-mcp-server"
    ],
    "env": {
      "PLAYFAB_TITLE_ID": "Your PlayFab Title ID",
      "PLAYFAB_DEV_SECRET_KEY": "Your PlayFab Developer Secret Key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:09.848Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:23:45.285Z"
  },
  "tags": [
    "playfab"
  ]
},
{
  "_id": {
    "$oid": "682899b2a6f8dc721ceb43e6"
  },
  "seq": {
    "$numberLong": "497"
  },
  "type": "STDIO",
  "url": "https://github.com/botanicastudios/crossref-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "crossref",
    "description": "This Model Context Protocol (MCP) server implementation facilitates interaction with the Crossref API, enabling searches for scholarly works by title or author and retrieval of detailed metadata for specific publications using their DOI; it communicates using structured JSON for both requests and responses.",
    "command": "npx",
    "args": [
      "-y",
      "@botanicastudios/crossref-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:10.960Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:23:47.050Z"
  },
  "tags": [
    "crossref"
  ]
},
{
  "_id": {
    "$oid": "682899b3a6f8dc721ceb43e8"
  },
  "seq": {
    "$numberLong": "498"
  },
  "type": "STDIO",
  "url": "https://github.com/stevengonsalvez/todoist-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "todoist",
    "description": "This Todoist MCP server implements the Model Context Protocol, allowing MCP-compatible clients like Claude Desktop to manage Todoist tasks, projects, sections, labels, collaborators, and comments through the Todoist API, using Node.js.",
    "command": "npx",
    "args": [
      "todoist-mcp"
    ],
    "env": {
      "TODOIST_API_TOKEN": "your_todoist_token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:11.977Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:24:00.920Z"
  },
  "tags": [
    "todoist"
  ]
},
{
  "_id": {
    "$oid": "682899b5a6f8dc721ceb43ea"
  },
  "seq": {
    "$numberLong": "499"
  },
  "type": "STDIO",
  "url": "https://github.com/agentset-ai/mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "agentset",
    "description": "The Agentset MCP server provides a core capability for Retrieval-Augmented Generation (RAG) within the Agentset platform, enabling document-based applications, and integrates using npm, yarn, or pnpm with configuration via environment variables and command-line arguments, while exposing configuration options for Claude integration.",
    "command": "npx",
    "args": [
      "-y",
      "@agentset/mcp@latest"
    ],
    "env": {
      "AGENTSET_NAMESPACE_ID": "ns_xxx",
      "AGENTSET_API_KEY": "agentset_xxx"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:13.715Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:24:19.729Z"
  },
  "tags": [
    "agentset",
    "agent set",
    "agent",
    "set"
  ]
},
{
  "_id": {
    "$oid": "682899b6a6f8dc721ceb43ec"
  },
  "seq": {
    "$numberLong": "500"
  },
  "type": "STDIO",
  "url": "https://github.com/mk965/asset-price-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "Asset Price MCP",
    "description": "This MCP server retrieves real-time asset price information, including precious metals and cryptocurrencies, and makes it accessible to large language models using the Model Context Protocol. It integrates with Smithery for easy installation and can be configured through JSON files for different operating systems.",
    "command": "npx",
    "args": [
      "-y",
      "asset-price-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:14.355Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:24:21.797Z"
  },
  "tags": [
    "asset price",
    "asset",
    "price"
  ]
},
{
  "_id": {
    "$oid": "682899b7a6f8dc721ceb43ee"
  },
  "seq": {
    "$numberLong": "501"
  },
  "type": "STDIO",
  "url": "https://github.com/bitflower/mcp-servers",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "memory",
    "description": "This repository provides reference implementations of Model Context Protocol (MCP) servers that enable Large Language Models to securely access tools and data sources; these servers are built using either the Typescript or Python MCP SDK and communicate using the Model Context Protocol to facilitate integrations with services like AWS, Brave Search, GitHub, Google Drive, PostgreSQL, Redis, and others.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-memory"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:15.265Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:24:48.115Z"
  },
  "tags": [
    "memory"
  ]
},
{
  "_id": {
    "$oid": "682899b9a6f8dc721ceb43f0"
  },
  "seq": {
    "$numberLong": "502"
  },
  "type": "STDIO",
  "url": "https://github.com/saarw/akhq-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "akhq",
    "description": "This MCP server implementation provides an interface for AI assistants to interact with the AKHQ Kafka monitoring tool, enabling functionalities such as data exploration and management via the Model Context Protocol using Node.js.",
    "command": "npx",
    "args": [
      "akhq-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:17.295Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:24:49.482Z"
  },
  "tags": [
    "akhq"
  ]
},
{
  "_id": {
    "$oid": "682899bba6f8dc721ceb43f2"
  },
  "seq": {
    "$numberLong": "503"
  },
  "type": "STDIO",
  "url": "https://github.com/decvb/context7",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "context7",
    "description": "Context7 MCP serves up-to-date, version-specific code examples and documentation to LLMs by fetching information directly from source code, enhancing prompts in tools like Cursor and VS Code. It leverages the Model Context Protocol (MCP) and can be installed via npm, bun, or deno.",
    "command": "npx",
    "args": [
      "-y",
      "@upstash/context7-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:19.127Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:25:02.187Z"
  },
  "tags": [
    "context7"
  ]
},
{
  "_id": {
    "$oid": "682899bca6f8dc721ceb43f4"
  },
  "seq": {
    "$numberLong": "504"
  },
  "type": "STDIO",
  "url": "https://github.com/shariqriazz/upsplash-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "unsplash-mcp-server",
    "description": "This MCP server implements tools to interact with the Unsplash API, allowing users to search for photos using queries, pagination, and orientation and download them at specified resolutions; it requires an Unsplash Access Key and utilizes JSON schemas for input/output validation, communicating over the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "unsplash-mcp-server"
    ],
    "env": {
      "UNSPLASH_ACCESS_KEY": "YOUR_UNSPLASH_ACCESS_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:20.687Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:25:21.406Z"
  },
  "tags": [
    "unsplash",
    "unsplash"
  ]
},
{
  "_id": {
    "$oid": "682899bea6f8dc721ceb43f6"
  },
  "seq": {
    "$numberLong": "505"
  },
  "type": "STDIO",
  "url": "https://github.com/andyciggy/gotohuman-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gotoHuman",
    "description": "The gotoHuman MCP server facilitates human-in-the-loop workflows by enabling AI agents to request human approvals via the MCP protocol, utilizing customizable forms and providing review links; it integrates with platforms like Cursor, Claude, and Windsurf, offering tools to list forms, retrieve schemas, and request reviews, while leveraging webhooks and API keys for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@gotohuman/mcp-server"
    ],
    "env": {
      "GOTOHUMAN_API_KEY": "your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:22.008Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:25:23.072Z"
  },
  "tags": [
    "gotoHuman"
  ]
},
{
  "_id": {
    "$oid": "682899bfa6f8dc721ceb43f8"
  },
  "seq": {
    "$numberLong": "506"
  },
  "type": "STDIO",
  "url": "https://github.com/ducthinh993/mcp-server-endoflife",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "eol",
    "description": "This Model Context Protocol (MCP) server integrates with the endoflife.date API to allow AI assistants like Claude to access and analyze software end-of-life dates, support status, and CVE vulnerabilities; it uses Node.js and provides tools for version comparison, security analysis, and natural language queries related to software lifecycle management.",
    "command": "npx",
    "args": [
      "/path/to/eol-mcp-server/build/index.js"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:23.963Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:25:49.365Z"
  },
  "tags": [
    "eol"
  ]
},
{
  "_id": {
    "$oid": "682899c1a6f8dc721ceb43fa"
  },
  "seq": {
    "$numberLong": "507"
  },
  "type": "STDIO",
  "url": "https://github.com/elliottlawson/kagi-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "kagi",
    "description": "The Kagi MCP Server provides web search capabilities to AI assistants by using the Kagi Search API to execute search queries and format the results, communicating via stdio using the Model Context Protocol and featuring a unique tool name to prevent conflicts. It is built in TypeScript and is readily integrated into applications such as Claude Desktop and Cursor.",
    "command": "npx",
    "args": [
      "github:elliottlawson/kagi-mcp-server"
    ],
    "env": {
      "KAGI_API_KEY": "YOUR_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:25.247Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:25:50.705Z"
  },
  "tags": [
    "kagi"
  ]
},
{
  "_id": {
    "$oid": "682899c2a6f8dc721ceb43fc"
  },
  "seq": {
    "$numberLong": "508"
  },
  "type": "STDIO",
  "url": "https://github.com/darrenjrobinson/HIBP-MCP-Server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "HIBP-MCP",
    "description": "This Model Context Protocol (MCP) server integrates with the Have I Been Pwned (HIBP) API, enabling users to query breach data, check password exposure, and identify email addresses in pastes via natural language; it leverages Node.js and communicates with HIBP's API using provided API keys.",
    "command": "npx",
    "args": [
      "-y",
      "@darrenjrobinson/hibp-mcp"
    ],
    "env": {
      "HIBP_API_KEY": "<your-hibp-api-key>",
      "HIBP_SUBSCRIPTION_PLAN": "Pwned 1"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:26.339Z"
  },
  "updated_at": {
    "$date": "2025-05-17T16:26:03.313Z"
  },
  "tags": [
    "HIBP-MCP"
  ]
},
{
  "_id": {
    "$oid": "682899c3a6f8dc721ceb43fe"
  },
  "seq": {
    "$numberLong": "509"
  },
  "type": "STDIO",
  "url": "https://github.com/maoruibin/mcp-server-inbox",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-inbox",
    "description": "This MCP server implementation integrates with the inBox Notes API via HTTP to allow users to create notes from any MCP client using natural language; it supports specifying a title and content, and provides an MCP service discovery interface along with an Inspector debugging tool.",
    "command": "npx",
    "args": [
      "mcp-server-inbox"
    ],
    "env": {
      "INBOX_USER_TOKEN": "your api path"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:27.004Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:43:14.314Z"
  },
  "tags": [
    "inbox"
  ]
},
{
  "_id": {
    "$oid": "682899c3a6f8dc721ceb4400"
  },
  "seq": {
    "$numberLong": "510"
  },
  "type": "STDIO",
  "url": "https://github.com/qloba/runbook-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "runbook",
    "description": "This MCP server implementation integrates with Runbook using Node.js to provide functionalities for listing, reading, and searching documents via commands like `get-article`, `list-articles`, and `search-articles`, leveraging the Runbook API with specified base URLs and API tokens.",
    "command": "npx",
    "args": [
      "-y",
      "@runbook-docs/mcp-server"
    ],
    "env": {
      "RUNBOOK_API_TOKEN": "your-api-token",
      "RUNBOOK_BASE_URL": "https://<YOUR_SUBDOMAIN>.runbook.jp"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:27.726Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:44:09.037Z"
  },
  "tags": [
    "runbook"
  ]
},
{
  "_id": {
    "$oid": "682899c4a6f8dc721ceb4402"
  },
  "seq": {
    "$numberLong": "511"
  },
  "type": "STDIO",
  "url": "https://github.com/kwanLeeFrmVi/mcp-server-memory",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "memory",
    "description": "This MCP server provides persistent memory for AI models by managing a local knowledge graph, utilizing the Model Context Protocol to allow clients like Claude to create entities, define relationships, store observations, and search for information stored in a JSON file.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-memory"
    ],
    "env": {
      "MEMORY_FILE_PATH": "/path/to/your/custom_memory.json"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:28.425Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:44:11.156Z"
  },
  "tags": [
    "memory"
  ]
},
{
  "_id": {
    "$oid": "682899c6a6f8dc721ceb4404"
  },
  "seq": {
    "$numberLong": "512"
  },
  "type": "STDIO",
  "url": "https://github.com/ethangillani/connectwise-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "connectwise",
    "description": "This MCP server implements a Model Context Protocol interface, using ConnectWise Manage API keys to provide Claude with the ability to retrieve, create, update, and delete entities like tickets, companies, and contacts within ConnectWise Manage, supporting filtering and pagination.",
    "command": "npx",
    "args": [
      "-y",
      "connectwise-mcp-server"
    ],
    "env": {
      "CW_PRIVATE_KEY": "your_private_key",
      "CW_COMPANY_ID": "your_company_id",
      "CW_PUBLIC_KEY": "your_public_key",
      "CW_URL": "api-na.myconnectwise.net"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:30.137Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:44:12.584Z"
  },
  "tags": [
    "connectwise"
  ]
},
{
  "_id": {
    "$oid": "682899c7a6f8dc721ceb4406"
  },
  "seq": {
    "$numberLong": "513"
  },
  "type": "STDIO",
  "url": "https://github.com/PayAINetwork/payai-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "payai-mcp-server",
    "description": "The PayAI MCP server allows users to view AI Agents available on the PayAI marketplace by integrating directly with MCP hosts like Claude Desktop and Cursor IDE, using a configuration with `npx` to execute the `payai-mcp-server` package.",
    "command": "npx",
    "args": [
      "-y",
      "payai-mcp-server@latest",
      "https://mcp.payai.network"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:31.645Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:44:14.356Z"
  },
  "tags": [
    "payai",
    "payai mcp"
  ]
},
{
  "_id": {
    "$oid": "682899c8a6f8dc721ceb4408"
  },
  "seq": {
    "$numberLong": "514"
  },
  "type": "STDIO",
  "url": "https://github.com/andyciggy/ragie-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ragie",
    "description": "This Model Context Protocol (MCP) server enables AI models to access Ragie's knowledge base retrieval capabilities via the `retrieve` tool, using the `@modelcontextprotocol/sdk` and `ragie` libraries over standard I/O; it accepts a Ragie API key and partition ID, and integrates with Cursor and Claude desktop environments.",
    "command": "npx",
    "args": [
      "-y",
      "@ragieai/mcp-server",
      "--partition",
      "optional_partition_id"
    ],
    "env": {
      "RAGIE_API_KEY": "your_api_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:32.385Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:44:15.706Z"
  },
  "tags": [
    "ragie"
  ]
},
{
  "_id": {
    "$oid": "682899caa6f8dc721ceb440a"
  },
  "seq": {
    "$numberLong": "515"
  },
  "type": "STDIO",
  "url": "https://github.com/hackle-io/hackle-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "hackle-mcp",
    "description": "The Hackle MCP server implements the Model Context Protocol, providing tools to query A/B test data, in-app and push messages, user behavior analytics, and remote configurations via the Hackle API; it supports features like paginated lists, detailed information retrieval, time-series data, and remote config management based on criteria like user properties and A/B test results.",
    "command": "npx",
    "args": [
      "-y",
      "@hackle-io/hackle-mcp@latest"
    ],
    "env": {
      "API_KEY": "YOUR_API_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:34.024Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:45:10.646Z"
  },
  "tags": [
    "hackle"
  ]
},
{
  "_id": {
    "$oid": "682899cba6f8dc721ceb440c"
  },
  "seq": {
    "$numberLong": "516"
  },
  "type": "STDIO",
  "url": "https://github.com/larryhudson/linear-mcp-server-again",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "linear",
    "description": "This Model Context Protocol (MCP) server integrates Claude with Linear, enabling interaction with Linear through tools such as `get_ticket`, `get_my_issues`, `add_comment`, `create_issue`, and `get_teams` by utilizing the Linear API and Node.js, and requiring a Linear API key for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@larryhudson/linear-mcp-server"
    ],
    "env": {
      "LINEAR_API_KEY": "<YOUR_API_KEY>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:35.083Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:45:12.821Z"
  },
  "tags": [
    "linear"
  ]
},
{
  "_id": {
    "$oid": "682899cda6f8dc721ceb440e"
  },
  "seq": {
    "$numberLong": "517"
  },
  "type": "STDIO",
  "url": "https://github.com/webconsulting/mcp-server-wsl-filesystem",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "wsl-filesystem",
    "description": "This Node.js server implements the Model Context Protocol (MCP) to enable efficient filesystem operations within Windows Subsystem for Linux (WSL) distributions by leveraging native Linux commands like `find` and `grep` for faster file listing and searching, and it integrates with Claude Desktop via configuration file modifications.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-wsl-filesystem",
      "--distro=Ubuntu-20.04",
      "/home/user/documents"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:37.400Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:45:14.441Z"
  },
  "tags": [
    "wsl filesystem",
    "wsl",
    "filesystem"
  ]
},
{
  "_id": {
    "$oid": "682899cfa6f8dc721ceb4410"
  },
  "seq": {
    "$numberLong": "518"
  },
  "type": "STDIO",
  "url": "https://github.com/MCP-Mirror/mendableai_firecrawl-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-firecrawl",
    "description": "The Firecrawl MCP server provides web scraping, crawling, searching, and content extraction capabilities by integrating with the Firecrawl API, and supports features such as JavaScript rendering, rate limiting, credit monitoring, and both cloud-based and self-hosted Firecrawl instances, using protocols like HTTP/HTTPS.",
    "command": "npx",
    "args": [
      "-y",
      "firecrawl-mcp"
    ],
    "env": {
      "FIRECRAWL_API_KEY": "YOUR_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:39.022Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:45:16.434Z"
  },
  "tags": [
    "firecrawl",
    "fire crawl",
    "fire",
    "crawl"
  ]
},
{
  "_id": {
    "$oid": "682899cfa6f8dc721ceb4412"
  },
  "seq": {
    "$numberLong": "519"
  },
  "type": "STDIO",
  "url": "https://github.com/MCP-Mirror/kevinwatt_mcp-server-searxng",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "searxng",
    "description": "This MCP server implements a privacy-focused meta-search tool by integrating with SearXNG instances using HTTP for retrieving results from multiple search engines based on specified query parameters like language, categories, time range, and safe search level; it also supports fallback to multiple SearXNG instances and custom user-agent headers.",
    "command": "npx",
    "args": [
      "-y",
      "@kevinwatt/mcp-server-searxng"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:39.791Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:45:18.014Z"
  },
  "tags": [
    "searxng"
  ]
},
{
  "_id": {
    "$oid": "682899d0a6f8dc721ceb4414"
  },
  "seq": {
    "$numberLong": "520"
  },
  "type": "STDIO",
  "url": "https://github.com/keegancsmith/linear-issues-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "linear-issues",
    "description": "This MCP server provides Claude with read-only access to Linear issues by fetching issue details and comments through the Linear API using either an API key or OAuth token; it exposes two tools, `linear_get_issue` and `linear_get_issue_with_comments`, and integrates with Claude for Desktop by configuring the server within its configuration file.",
    "command": "npx",
    "args": [
      "-y",
      "@keegancsmith/linear-issues-mcp-server"
    ],
    "env": {
      "LINEAR_API_TOKEN": "your_linear_api_token_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:40.441Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:46:12.353Z"
  },
  "tags": [
    "linear issues",
    "linear",
    "issues"
  ]
},
{
  "_id": {
    "$oid": "682899d1a6f8dc721ceb4416"
  },
  "seq": {
    "$numberLong": "521"
  },
  "type": "STDIO",
  "url": "https://github.com/cardinalblue/prompt-book-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "prompt-book-server",
    "description": "The Prompt Book Server is an MCP server that manages AI prompts stored in Notion databases, providing tools to search, retrieve, and organize prompts using the Notion API; it allows connection to existing databases or creation of new ones, and utilizes JSON for configuration.",
    "command": "npx",
    "args": [
      "-y",
      "@piccollage/prompt-book-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:41.213Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:46:14.377Z"
  },
  "tags": [
    "prompt book",
    "prompt",
    "book"
  ]
},
{
  "_id": {
    "$oid": "682899d2a6f8dc721ceb4418"
  },
  "seq": {
    "$numberLong": "522"
  },
  "type": "STDIO",
  "url": "https://github.com/Jeremy-Min-Yang/minecraft-mcp-server-pixel",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "minecraft",
    "description": "The MinecraftBuildMCP server empowers AI models, such as Claude, to control a Minecraft bot through natural language using the Mineflayer API and Model Context Protocol (MCP), enabling automated tasks like building, navigation, block placement, and interaction with entities and in-game chat.",
    "command": "npx",
    "args": [
      "-y",
      "github:Jeremy-Min-Yang/minecraft-mcp-server-pixel",
      "--host",
      "localhost",
      "--port",
      "25565",
      "--username",
      "Bob_the_Builder"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:42.190Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:46:16.073Z"
  },
  "tags": [
    "minecraft"
  ]
},
{
  "_id": {
    "$oid": "682899d3a6f8dc721ceb441a"
  },
  "seq": {
    "$numberLong": "523"
  },
  "type": "STDIO",
  "url": "https://github.com/kazemsoft/mcp-sms-ir",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "sms-ir",
    "description": "This MCP server enables AI assistants like Claude to send SMS messages through the SMS.ir API using Node.js; it supports sending single and bulk SMS messages, sending templated verification codes, and checking account credit balance via the HTTP-based Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-sms-ir"
    ],
    "env": {
      "SMS_IR_API_KEY": "your-api-key-from-sms-ir"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:43.470Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:46:17.863Z"
  },
  "tags": [
    "sms ir",
    "sms",
    "ir"
  ]
},
{
  "_id": {
    "$oid": "682899d5a6f8dc721ceb441c"
  },
  "seq": {
    "$numberLong": "524"
  },
  "type": "STDIO",
  "url": "https://github.com/gdli6177/mcp-resend-email",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-resend-email",
    "description": "This MCP server implementation enables email sending functionality through the Resend API, supporting plain text, HTML, and attachment-based emails, as well as pre-defined templates for customer service, marketing, and welcome messages; it integrates with Windsurf, Cursor, and Claude MCP clients using stdio and SSE transport modes.",
    "command": "npx",
    "args": [
      "mcp-resend-email",
      "--api-key=你的API密钥"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:45.184Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:46:19.653Z"
  },
  "tags": [
    "resend email",
    "resend",
    "email"
  ]
},
{
  "_id": {
    "$oid": "682899d6a6f8dc721ceb441e"
  },
  "seq": {
    "$numberLong": "525"
  },
  "type": "STDIO",
  "url": "https://github.com/MCP-Mirror/Automata-Labs-team_MCP-Server-Playwright",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "playwright",
    "description": "This MCP server enables browser automation using Playwright, allowing Large Language Models to interact with web pages, capture screenshots, and execute JavaScript; it integrates with Claude via automated configuration updates and exposes tools for navigation, element interaction, and JavaScript evaluation.",
    "command": "npx",
    "args": [
      "-y",
      "@automatalabs/mcp-server-playwright"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:46.854Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:47:14.005Z"
  },
  "tags": [
    "playwright"
  ]
},
{
  "_id": {
    "$oid": "682899d7a6f8dc721ceb4420"
  },
  "seq": {
    "$numberLong": "526"
  },
  "type": "STDIO",
  "url": "https://github.com/MCP-Mirror/landicefu_divide-and-conquer-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "divide-and-conquer",
    "description": "The Divide and Conquer MCP server facilitates AI agents in managing complex tasks by structuring them into checklists stored in JSON format, enabling task tracking, context preservation, and progress monitoring through tools accessible via the Model Context Protocol using technologies such as `npx`.",
    "command": "npx",
    "args": [
      "-y",
      "@landicefu/divide-and-conquer-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:47.636Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:47:16.050Z"
  },
  "tags": [
    "divide and conquer",
    "divide",
    "conquer"
  ]
},
{
  "_id": {
    "$oid": "682899d8a6f8dc721ceb4422"
  },
  "seq": {
    "$numberLong": "527"
  },
  "type": "STDIO",
  "url": "https://github.com/vitaliiivanovspryker/spryker-package-search-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "sprykerPackageSearch",
    "description": "This MCP server implementation provides package and code search capabilities within Spryker GitHub repositories using natural language queries; it integrates with the GitHub API and utilizes stdio transport with the Model Context Protocol SDK, supporting filtering by specific GitHub organizations and validating input with zod.",
    "command": "npx",
    "args": [
      "-y",
      "/FULL_PATH/spryker-module-finder"
    ],
    "env": {
      "GITHUB_PERSONAL_ACCESS_TOKEN": "token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:48.303Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:47:17.788Z"
  },
  "tags": [
    "spryker",
    "package",
    "search",
    "package search",
    "spryker package search"
  ]
},
{
  "_id": {
    "$oid": "682899d8a6f8dc721ceb4424"
  },
  "seq": {
    "$numberLong": "528"
  },
  "type": "STDIO",
  "url": "https://github.com/Bigsy/shadow-cljs-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "shadow-cljs-mcp",
    "description": "This MCP server monitors shadow-cljs build processes via the Model Context Protocol (MCP) to provide real-time build status updates to LLMs. It integrates with tools like Cline/Cursor/Claude and exposes a `get_last_build_status` tool that reports compilation status, compiled files, errors, and build metrics after edits to ClojureScript files.",
    "command": "npx",
    "args": [
      "shadow-cljs-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:48.904Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:47:19.508Z"
  },
  "tags": [
    "shadow cljs",
    "shadow",
    "cljs"
  ]
},
{
  "_id": {
    "$oid": "682899d9a6f8dc721ceb4426"
  },
  "seq": {
    "$numberLong": "529"
  },
  "type": "STDIO",
  "url": "https://github.com/pinkpixel-dev/mcp-webresearch",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "webresearch",
    "description": "This MCP server implementation enables Claude to conduct web research using tools like Google search, webpage content extraction (via Playwright), and screenshot capture, communicating via the Model Context Protocol to provide real-time information, and it tracks research sessions including queries and visited pages.",
    "command": "npx",
    "args": [
      "-y",
      "@mzxrai/mcp-webresearch@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:49.660Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:47:21.155Z"
  },
  "tags": [
    "webresearch",
    "web research",
    "web",
    "research"
  ]
},
{
  "_id": {
    "$oid": "682899daa6f8dc721ceb4428"
  },
  "seq": {
    "$numberLong": "530"
  },
  "type": "STDIO",
  "url": "https://github.com/demon24ru/fish-speech-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "fish-speech",
    "description": "This MCP server implements text-to-speech synthesis using FishSpeech and communicates with an Optivus server via Socket.IO, offering tools to convert text to speech and save voice references for cloning; it integrates with MCP-compatible LLMs such as Dive.",
    "command": "npx",
    "args": [
      "-y",
      "@demon24ru/fish-speech-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:50.314Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:48:15.583Z"
  },
  "tags": [
    "fish speech",
    "fish",
    "speech"
  ]
},
{
  "_id": {
    "$oid": "682899dca6f8dc721ceb442a"
  },
  "seq": {
    "$numberLong": "531"
  },
  "type": "STDIO",
  "url": "https://github.com/zfirsty/mcp-json-tools",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "jsonTools",
    "description": "This MCP server implementation provides tools for querying, inspecting, and manipulating local JSON and NDJSON files using JSONPath and Lodash within a sandboxed Node.js `vm`, enabling analysis and modification of file content while preserving the original format.",
    "command": "npx",
    "args": [
      "mcp-json-tools"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:52.283Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:48:17.733Z"
  },
  "tags": [
    "jsontools",
    "json tools",
    "json",
    "tools"
  ]
},
{
  "_id": {
    "$oid": "682899dda6f8dc721ceb442c"
  },
  "seq": {
    "$numberLong": "532"
  },
  "type": "STDIO",
  "url": "https://github.com/ownlytics/mcprax",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "mcprax manages Model Context Protocol (MCP) server configurations as racks for Claude Desktop, leveraging JSON configurations to define servers that interact with external tools, data sources, and services via commands and environment variables; it then applies these configurations to Claude Desktop's configuration file.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-github"
    ],
    "env": {
      "GITHUB_PERSONAL_ACCESS_TOKEN": "your-token-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:53.680Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:48:19.313Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "682899dea6f8dc721ceb442e"
  },
  "seq": {
    "$numberLong": "533"
  },
  "type": "STDIO",
  "url": "https://github.com/pwilkin/mcp-searxng-public",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "This MCP server scrapes and parses HTML from public SearXNG instances to return search results as JSON, utilizing up to three SearXNG servers and supporting query and optional time range parameters.",
    "command": "npx",
    "args": [
      "mcp-searxng-public"
    ],
    "env": {
      "SEARXNG_URL_2": "https://searx.tiekoetter.com/",
      "SEARXNG_URL_3": "https://opnxng.com/",
      "SEARXNG_BASE_URL": "https://searx.be/"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:14:54.920Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:48:20.847Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "682899dfa6f8dc721ceb4430"
  },
  "seq": {
    "$numberLong": "534"
  },
  "type": "STDIO",
  "url": "https://github.com/gradyyoung/sftp-ssh-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "sftp-ssh-mcp",
    "description": "This MCP server implementation provides secure shell command execution on Linux and Windows systems, utilizing SFTP-SSH for control and enabling interaction with LLMs and other MCP clients via SSH protocol.",
    "command": "npx",
    "args": [
      "sftp-ssh-mcp",
      "-y",
      "--",
      "--host=1.2.3.4",
      "--port=22",
      "--user=root",
      "--password=pass",
      "--key=path/to/key"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:14:55.908Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:48:22.480Z"
  },
  "tags": [
    "sftp",
    "ssh",
    "sftp ssh"
  ]
},
{
  "_id": {
    "$oid": "682899e4a6f8dc721ceb4432"
  },
  "seq": {
    "$numberLong": "535"
  },
  "type": "STDIO",
  "url": "https://github.com/linxule/lotus-wisdom-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "lotus-wisdom",
    "description": "The Lotus Wisdom MCP server provides a structured problem-solving tool that uses the Lotus Sutra's wisdom framework; it implements a step-by-step thinking process with meditation pauses, organized by tag types like 'skillful means' and 'non-dual recognition', and integrates with Claude and other AI assistants using JSON over standard input and output.",
    "command": "npx",
    "args": [
      "-y",
      "lotus-wisdom-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:15:00.239Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:49:17.314Z"
  },
  "tags": [
    "lotus wisdom",
    "lotus",
    "wisdom"
  ]
},
{
  "_id": {
    "$oid": "682899e4a6f8dc721ceb4434"
  },
  "seq": {
    "$numberLong": "536"
  },
  "type": "STDIO",
  "url": "https://github.com/Ivor/unix-timestamps-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "unix_timestamps_mcp",
    "description": "This Node.js-based MCP server converts ISO 8601 date/time strings into Unix timestamps using JavaScript's Date parser, providing the `iso8601_to_unix` tool callable from MCP clients like Claude Desktop via `npx`. The server validates input and returns appropriate error messages for invalid ISO 8601 formats.",
    "command": "npx",
    "args": [
      "-y",
      "github:Ivor/unix-timestamps-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:15:00.886Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:49:19.497Z"
  },
  "tags": [
    "unix timestamps",
    "unix",
    "timestamps",
    "unix_timestamps"
  ]
},
{
  "_id": {
    "$oid": "68289a8ca6f8dc721ceb4436"
  },
  "seq": {
    "$numberLong": "537"
  },
  "type": "STDIO",
  "url": "https://github.com/JetBrains/mcp-jetbrains",
  "stars": 628,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "jetbrains",
    "description": "The JetBrains MCP Proxy Server facilitates communication between clients like VS Code and Claude Desktop and JetBrains IDEs by proxying requests using npx to execute the `@jetbrains/mcp-proxy` package; it requires a compatible Node.js version and may need specific configurations for external connections and Node.js detection.",
    "command": "npx",
    "args": [
      "-y",
      "@jetbrains/mcp-proxy"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:17:48.462Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:49:21.182Z"
  },
  "tags": [
    "jetbrains"
  ]
},
{
  "_id": {
    "$oid": "68289a8da6f8dc721ceb4438"
  },
  "seq": {
    "$numberLong": "538"
  },
  "type": "STDIO",
  "url": "https://github.com/line/line-bot-mcp-server",
  "stars": 377,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "line-bot",
    "description": "The LINE Bot MCP server implements the Model Context Protocol, integrating with the LINE Messaging API to enable AI agents to send text and flex messages, retrieve user profiles, and obtain message quota information via the LINE platform using a channel access token.",
    "command": "npx",
    "args": [
      "@line/line-bot-mcp-server"
    ],
    "env": {
      "DESTINATION_USER_ID": "FILL_HERE",
      "CHANNEL_ACCESS_TOKEN": "FILL_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:17:49.483Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:49:22.711Z"
  },
  "tags": [
    "line bot",
    "line",
    "bot"
  ]
},
{
  "_id": {
    "$oid": "68289a8ea6f8dc721ceb443a"
  },
  "seq": {
    "$numberLong": "539"
  },
  "type": "STDIO",
  "url": "https://github.com/elastic/mcp-server-elasticsearch",
  "stars": 193,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "elasticsearch-mcp-server",
    "description": "The Elasticsearch MCP Server connects MCP clients, such as Claude Desktop, to Elasticsearch data using the Model Context Protocol, enabling natural language interactions with Elasticsearch indices through tools like listing indices, getting mappings, and performing searches using the Elasticsearch query DSL.",
    "command": "npx",
    "args": [
      "-y",
      "@elastic/mcp-server-elasticsearch"
    ],
    "env": {
      "ES_URL": "your-elasticsearch-url",
      "ES_API_KEY": "your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:17:50.720Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:49:24.406Z"
  },
  "tags": [
    "elasticsearch",
    "elastic search",
    "elastic",
    "search"
  ]
},
{
  "_id": {
    "$oid": "68289a8fa6f8dc721ceb443c"
  },
  "seq": {
    "$numberLong": "540"
  },
  "type": "STDIO",
  "url": "https://github.com/recursechat/mcp-server-apple-shortcuts",
  "stars": 153,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "apple-shortcuts",
    "description": "This MCP server enables AI assistants like Claude to interact with the macOS Shortcuts app, listing available shortcuts and executing them by name with optional parameters using the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-apple-shortcuts"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:17:51.363Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:50:18.833Z"
  },
  "tags": [
    "apple shortcuts",
    "apple",
    "shortcuts"
  ]
},
{
  "_id": {
    "$oid": "68289a91a6f8dc721ceb443e"
  },
  "seq": {
    "$numberLong": "541"
  },
  "type": "STDIO",
  "url": "https://github.com/shanejonas/openrpc-mpc-server",
  "stars": 33,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "openrpc",
    "description": "This MCP server implementation exposes JSON-RPC methods via the OpenRPC specification, allowing clients to call arbitrary methods and discover available functionalities using tools like `rpc_call` and `rpc_discover`; it integrates with Claude Desktop by running as a subprocess and communicating via stdio.",
    "command": "npx",
    "args": [
      "-y",
      "openrpc-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:17:53.352Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:50:21.204Z"
  },
  "tags": [
    "openrpc",
    "open rpc",
    "open",
    "rpc"
  ]
},
{
  "_id": {
    "$oid": "68289a92a6f8dc721ceb4440"
  },
  "seq": {
    "$numberLong": "542"
  },
  "type": "STDIO",
  "url": "https://github.com/inkdropapp/mcp-server",
  "stars": 23,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "inkdrop",
    "description": "This MCP server implementation provides access to Inkdrop notes through the Model Context Protocol, allowing users to retrieve, search, create, and update notes, as well as list notebooks and tags, by leveraging the Inkdrop Local HTTP Server API over HTTP.",
    "command": "npx",
    "args": [
      "-y",
      "@inkdropapp/mcp-server"
    ],
    "env": {
      "INKDROP_LOCAL_PASSWORD": "your-local-server-password",
      "INKDROP_LOCAL_USERNAME": "your-local-server-username",
      "INKDROP_LOCAL_SERVER_URL": "http://localhost:19840"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:17:54.330Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:50:22.898Z"
  },
  "tags": [
    "inkdrop"
  ]
},
{
  "_id": {
    "$oid": "68289a92a6f8dc721ceb4442"
  },
  "seq": {
    "$numberLong": "543"
  },
  "type": "STDIO",
  "url": "https://github.com/haltakov/meme-mcp",
  "stars": 23,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "meme",
    "description": "This MCP server generates memes by utilizing the ImgFlip API, accepting a template ID and text parameters via the `generateMeme` tool. It integrates with applications like Claude Desktop and uses the `meme-mcp` NPM package for configuration.",
    "command": "npx",
    "args": [
      "-y",
      "meme-mcp"
    ],
    "env": {
      "IMGFLIP_PASSWORD": "<IMGFLIP PASSWORD>",
      "IMGFLIP_USERNAME": "<IMGFLIP USERNAME>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:17:54.990Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:50:24.405Z"
  },
  "tags": [
    "meme"
  ]
},
{
  "_id": {
    "$oid": "68289a93a6f8dc721ceb4444"
  },
  "seq": {
    "$numberLong": "544"
  },
  "type": "STDIO",
  "url": "https://github.com/Infisical/infisical-mcp-server",
  "stars": 18,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "infisical",
    "description": "The Infisical MCP server enables function calling integrations with Infisical APIs for managing secrets, projects, environments, and folders, using the Model Context Protocol and authenticating with Machine Identity via client ID and secret. It provides tools for creating, deleting, updating, listing, and retrieving secrets, as well as managing projects and environments.",
    "command": "npx",
    "args": [
      "-y",
      "@infisical/mcp"
    ],
    "env": {
      "INFISICAL_HOST_URL": "https://<custom-host-url>.com",
      "INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET": "<machine-identity-universal-auth-client-secret",
      "INFISICAL_UNIVERSAL_AUTH_CLIENT_ID": "<machine-identity-universal-auth-client-id>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:17:55.992Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:50:26.108Z"
  },
  "tags": [
    "infisical"
  ]
},
{
  "_id": {
    "$oid": "68289a94a6f8dc721ceb4446"
  },
  "seq": {
    "$numberLong": "545"
  },
  "type": "STDIO",
  "url": "https://github.com/exoticknight/mcp-file-merger",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "file-merger",
    "description": "This MCP server implementation merges multiple files into a single file based on provided input paths and an output path; it integrates with Claude Desktop by defining allowed directories and utilizes `npx` to execute the `@exoticknight/mcp-file-merger` package.",
    "command": "npx",
    "args": [
      "-y",
      "@exoticknight/mcp-file-merger",
      "/path/to/allowed/dir"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:17:56.929Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:51:20.481Z"
  },
  "tags": [
    "file merger",
    "file",
    "merger",
    "file-merger"
  ]
},
{
  "_id": {
    "$oid": "68289a95a6f8dc721ceb4448"
  },
  "seq": {
    "$numberLong": "546"
  },
  "type": "STDIO",
  "url": "https://github.com/qpd-v/mcp-wordcounter",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-wordcounter",
    "description": "This MCP server analyzes text documents by counting words and characters, using file paths as input to avoid exposing document content directly to LLMs; it integrates with Claude Desktop via its configuration file and exposes the `analyze_text` tool.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-wordcounter"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:17:57.873Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:51:22.605Z"
  },
  "tags": [
    "wordcounter",
    "word counter",
    "word",
    "counter"
  ]
},
{
  "_id": {
    "$oid": "68289a97a6f8dc721ceb444a"
  },
  "seq": {
    "$numberLong": "547"
  },
  "type": "STDIO",
  "url": "https://github.com/FREEZONEX/mcp-server-supos",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "supos",
    "description": "The supOS MCP Server implements the Model Context Protocol using the `typescript-sdk` and exposes supOS open-apis to query topic trees, topic details, and real-time/historical data via GraphQL, enabling integration with MCP-compatible clients like Claude for Desktop and VSCode.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-supos"
    ],
    "env": {
      "SUPOS_MQTT_URL": "<MQTT_URL>",
      "SUPOS_API_KEY": "<API_KEY>",
      "SUPOS_API_URL": "<API_URL>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:17:59.397Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:51:24.422Z"
  },
  "tags": [
    "supos"
  ]
},
{
  "_id": {
    "$oid": "68289a98a6f8dc721ceb444c"
  },
  "seq": {
    "$numberLong": "548"
  },
  "type": "STDIO",
  "url": "https://github.com/sergehuber/inoyu-mcp-unomi-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "unomi-server",
    "description": "This MCP server implementation enables Claude to maintain user context by managing user profiles in Apache Unomi via profile lookup/creation using email, profile property management, and basic session/scope handling using JSON for data exchange and integrating with Claude Desktop.",
    "command": "npx",
    "args": [
      "@inoyu/mcp-unomi-server"
    ],
    "env": {
      "UNOMI_BASE_URL": "http://your-unomi-server:8181",
      "UNOMI_USERNAME": "your-username",
      "UNOMI_SOURCE_ID": "claude-desktop",
      "UNOMI_EMAIL": "your-email@example.com",
      "UNOMI_KEY": "your-unomi-key",
      "UNOMI_PROFILE_ID": "your-profile-id",
      "UNOMI_PASSWORD": "your-password"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:00.757Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:51:26.260Z"
  },
  "tags": [
    "unomi",
    "unomi"
  ]
},
{
  "_id": {
    "$oid": "68289a99a6f8dc721ceb444e"
  },
  "seq": {
    "$numberLong": "549"
  },
  "type": "STDIO",
  "url": "https://github.com/b12io/website-generator-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "b12",
    "description": "This MCP server implementation generates websites using AI, integrating with MCP clients like Claude Desktop via the Model Context Protocol; it leverages NodeJS and the `npx` command to execute the `@b12/website-generator-mcp-server` package.",
    "command": "npx",
    "args": [
      "-y",
      "@b12/website-generator-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:01.834Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:51:27.560Z"
  },
  "tags": [
    "b12"
  ]
},
{
  "_id": {
    "$oid": "68289a9ba6f8dc721ceb4450"
  },
  "seq": {
    "$numberLong": "550"
  },
  "type": "STDIO",
  "url": "https://github.com/MaXal/jetbrainsMCPProxy",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "github",
    "description": "This server acts as a proxy between a client (like Claude Desktop) and JetBrains IDEs, facilitating interactions beyond CLI by receiving requests and forwarding them using the built-in IDE webserver, accessible via HTTP.",
    "command": "npx",
    "args": [
      "<project_location>/dist/src/index.js"
    ],
    "env": {
      "IDE_PORT": "<port of built-in webserver, can be omitted than default 63343>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:03.182Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:52:21.854Z"
  },
  "tags": [
    "github"
  ]
},
{
  "_id": {
    "$oid": "68289a9ba6f8dc721ceb4452"
  },
  "seq": {
    "$numberLong": "551"
  },
  "type": "STDIO",
  "url": "https://github.com/limingchina/heremaps-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "here-maps",
    "description": "This Model Context Protocol (MCP) server implementation exposes HERE Maps Platform APIs, enabling Language Models to utilize services such as geocoding, reverse geocoding, places search, routing, traffic information, and map rendering through a standardized interface; it leverages the HERE Maps Geocoding & Search API v7, Routing API v8, Traffic API v7, and Map Image API v3.",
    "command": "npx",
    "args": [
      "-y",
      "/<You local checkout directory of this project>/src/node"
    ],
    "env": {
      "HERE_MAPS_API_KEY": "<YOUR_HERE_API_KEY>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:03.871Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:52:24.431Z"
  },
  "tags": [
    "here maps",
    "here",
    "maps"
  ]
},
{
  "_id": {
    "$oid": "68289a9da6f8dc721ceb4454"
  },
  "seq": {
    "$numberLong": "552"
  },
  "type": "STDIO",
  "url": "https://github.com/Monadical-SAS/zulip-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "zulip",
    "description": "This MCP server enables AI assistants to interact with Zulip workspaces via the Zulip API, providing tools to list channels, post messages, send direct messages, add reactions, retrieve channel history, get topics, subscribe to channels, and get user information; it integrates with Claude via `claude_desktop_config.json` and can be deployed using `npx` or Docker.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-zulip"
    ],
    "env": {
      "ZULIP_EMAIL": "your-bot@example.zulipchat.com",
      "ZULIP_URL": "https://example.zulipchat.com",
      "ZULIP_API_KEY": "your-bot-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:05.468Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:52:26.024Z"
  },
  "tags": [
    "zulip"
  ]
},
{
  "_id": {
    "$oid": "68289a9ea6f8dc721ceb4456"
  },
  "seq": {
    "$numberLong": "553"
  },
  "type": "STDIO",
  "url": "https://github.com/iic-llm-solution/mcp-quanmiao-hotnews",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "fetch_hot_news",
    "description": "This MCP server implementation fetches real-time hot news using the Aliyun Bailian API and provides news aggregation as a service, supporting both Node.js and Python implementations, and communicates via stdio or SSE.",
    "command": "npx",
    "args": [
      "-y",
      "@iic-llm-solution/mcp-quanmiao-hotnews-node"
    ],
    "env": {
      "WORKSPACE_ID": "<百炼业务空间ID>",
      "ALIBABA_CLOUD_ACCESS_KEY_ID": "<阿里云AccessKeyID>",
      "ALIBABA_CLOUD_ACCESS_KEY_SECRET": "<阿里云AccessKeySecret>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:06.429Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:52:27.940Z"
  },
  "tags": [
    "fetch hot news",
    "fetch",
    "hot",
    "news"
  ]
},
{
  "_id": {
    "$oid": "68289a9fa6f8dc721ceb4458"
  },
  "seq": {
    "$numberLong": "554"
  },
  "type": "STDIO",
  "url": "https://github.com/momentohq/mcp-momento",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "momento",
    "description": "This MCP server implementation, available as an npm package, provides an interface for interacting with Momento Cache via the Model Context Protocol, allowing users to get and set cache values, list, create, and delete caches; it utilizes the Momento API key for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@gomomento/mcp-momento"
    ],
    "env": {
      "MOMENTO_API_KEY": "your-api-key",
      "MOMENTO_CACHE_NAME": "your-cache-name"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:07.092Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:52:29.677Z"
  },
  "tags": [
    "momento"
  ]
},
{
  "_id": {
    "$oid": "68289a9fa6f8dc721ceb445a"
  },
  "seq": {
    "$numberLong": "555"
  },
  "type": "STDIO",
  "url": "https://github.com/qpd-v/mcp-delete",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-delete",
    "description": "The MCP server implements file deletion functionality for AI assistants like Claude, utilizing the Model Context Protocol for communication; it deletes files using either relative or absolute paths, employs smart path resolution, and integrates via configuration with applications such as Claude Desktop and VSCode Cline.",
    "command": "npx",
    "args": [
      "@qpd-v/mcp-delete"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:07.718Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:53:23.284Z"
  },
  "tags": [
    "delete"
  ]
},
{
  "_id": {
    "$oid": "68289aa0a6f8dc721ceb445c"
  },
  "seq": {
    "$numberLong": "556"
  },
  "type": "STDIO",
  "url": "https://github.com/zaiwork/mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "zaiwork",
    "description": "This MCP server implementation acts as an interface to the ZIZAI Recruitment API, enabling both job seekers and recruiters to retrieve job listings, apply for positions, manage entities, and access talent recommendations; it is configured via NPX and utilizes API keys for authentication.",
    "command": "npx",
    "args": [
      "-y",
      "@zizaiwork/mcp"
    ],
    "env": {
      "ZAI_API_KEY": "<YOUR_API_KEY>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:08.425Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:53:26.161Z"
  },
  "tags": [
    "zaiwork",
    "zai",
    "work"
  ]
},
{
  "_id": {
    "$oid": "68289aa1a6f8dc721ceb445e"
  },
  "seq": {
    "$numberLong": "557"
  },
  "type": "STDIO",
  "url": "https://github.com/stefan-xyz/mcp-server-runescape",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-runescape",
    "description": "This MCP server provides RuneScape and Old School RuneScape data by querying the RS/Wiki API to retrieve item details and price history, player hiscores and rankings, player counts, and account creation totals.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-server-runescape"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:09.785Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:53:27.803Z"
  },
  "tags": [
    "runescape",
    "rune scape"
  ]
},
{
  "_id": {
    "$oid": "68289aa3a6f8dc721ceb4460"
  },
  "seq": {
    "$numberLong": "558"
  },
  "type": "STDIO",
  "url": "https://github.com/dortegau/mcp-proxy-sidecar",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ide",
    "description": "This MCP proxy sidecar facilitates communication between MCP clients and JetBrains IDEs using the MCP protocol, and it enhances the original JetBrains MCP server by providing WebSocket notifications on port 27042 to monitor all MCP tool calls in real-time.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-proxy-sidecar"
    ],
    "env": {
      "WS_PORT": "27042"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:11.554Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:53:29.629Z"
  },
  "tags": [
    "ide"
  ]
},
{
  "_id": {
    "$oid": "68289ab5a6f8dc721ceb4462"
  },
  "seq": {
    "$numberLong": "559"
  },
  "type": "STDIO",
  "url": "https://github.com/mcp-use/mcp-use",
  "stars": 3146,
  "views": 1,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "playwright",
    "description": "MCP-Use provides a unified client library that connects any LLM to any MCP server, enabling custom agents with tool access; it supports HTTP and other connection methods, integrates with Langchain for LLM providers like OpenAI and Anthropic, and facilitates dynamic server selection for multi-server environments.",
    "command": "npx",
    "args": [
      "@playwright/mcp@latest"
    ],
    "env": {
      "DISPLAY": ":1"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:29.643Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:41:09.569Z"
  },
  "tags": [
    "playwright"
  ]
},
{
  "_id": {
    "$oid": "68289ab6a6f8dc721ceb4464"
  },
  "seq": {
    "$numberLong": "560"
  },
  "type": "STDIO",
  "url": "https://github.com/open-webui/mcpo",
  "stars": 1955,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "memory",
    "description": "mcpo exposes MCP server commands as OpenAPI-compatible HTTP endpoints, enabling integration with LLM agents and applications using RESTful APIs and standard web protocols; it supports both command execution and configuration files for managing multiple MCP tools and offers optional SSE and Streamable HTTP server types.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-memory"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:30.338Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:54:24.824Z"
  },
  "tags": [
    "memory"
  ]
},
{
  "_id": {
    "$oid": "68289ab7a6f8dc721ceb4466"
  },
  "seq": {
    "$numberLong": "561"
  },
  "type": "STDIO",
  "url": "https://github.com/MarkusPfundstein/mcp-obsidian",
  "stars": 879,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-obsidian",
    "description": "This MCP server implementation provides tools for interacting with Obsidian via its Local REST API, enabling operations such as listing files, retrieving file content, searching the vault, patching content, appending content, and deleting files or directories; it requires configuration with an Obsidian API key and host and integrates with the Claude desktop application for accessing Obsidian functionalities.",
    "command": "uvx",
    "args": [
      "mcp-obsidian"
    ],
    "env": {
      "OBSIDIAN_API_KEY": "<YOUR_OBSIDIAN_API_KEY>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:31.869Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:54:27.824Z"
  },
  "tags": [
    "obsidian"
  ]
},
{
  "_id": {
    "$oid": "68289ab8a6f8dc721ceb4468"
  },
  "seq": {
    "$numberLong": "562"
  },
  "type": "STDIO",
  "url": "https://github.com/elevenlabs/elevenlabs-mcp",
  "stars": 677,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ElevenLabs",
    "description": "The ElevenLabs Model Context Protocol (MCP) server enables applications like Claude, Cursor, and OpenAI Agents to utilize ElevenLabs' Text-to-Speech and audio processing APIs via command-line execution using `uvx` or direct Python module invocation; it facilitates functionalities such as speech generation, voice cloning, and audio transcription.",
    "command": "uvx",
    "args": [
      "elevenlabs-mcp"
    ],
    "env": {
      "ELEVENLABS_API_KEY": "<insert-your-api-key-here>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:32.928Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:54:29.509Z"
  },
  "tags": [
    "elevenlabs"
  ]
},
{
  "_id": {
    "$oid": "68289abba6f8dc721ceb446a"
  },
  "seq": {
    "$numberLong": "563"
  },
  "type": "STDIO",
  "url": "https://github.com/MiniMax-AI/MiniMax-MCP",
  "stars": 447,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "MiniMax",
    "description": "The MiniMax Model Context Protocol (MCP) server enables MCP clients like Claude Desktop, Cursor, and OpenAI Agents to access MiniMax's Text to Speech and video/image generation APIs using stdio or SSE transport, allowing for voice cloning, text-to-image, and video generation functionalities.",
    "command": "uvx",
    "args": [
      "minimax-mcp",
      "-y"
    ],
    "env": {
      "MINIMAX_API_RESOURCE_MODE": "optional, [url|local], url is default, audio/image/video are downloaded locally or provided in URL format",
      "MINIMAX_MCP_BASE_PATH": "local-output-dir-path, such as /User/xxx/Desktop",
      "MINIMAX_API_KEY": "insert-your-api-key-here",
      "MINIMAX_API_HOST": "api host, https://api.minimaxi.chat|https://api.minimax.chat"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:35.147Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:54:31.524Z"
  },
  "tags": [
    "minimax",
    "mini",
    "max"
  ]
},
{
  "_id": {
    "$oid": "68289abca6f8dc721ceb446c"
  },
  "seq": {
    "$numberLong": "564"
  },
  "type": "STDIO",
  "url": "https://github.com/MarkusPfundstein/mcp-gsuite",
  "stars": 343,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-gsuite",
    "description": "This MCP server integrates with Google Workspace, enabling users to manage Gmail and Calendar functionalities via the Model Context Protocol; it utilizes OAuth2 for authentication and supports querying emails, creating drafts, managing calendar events, and handling multiple Google accounts.",
    "command": "uvx",
    "args": [
      "mcp-gsuite",
      "--accounts-file",
      "/path/to/custom/.accounts.json",
      "--credentials-dir",
      "/path/to/custom/credentials"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:36.686Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:54:33.551Z"
  },
  "tags": [
    "gsuite",
    "google suite",
    "google",
    "suite"
  ]
},
{
  "_id": {
    "$oid": "68289abea6f8dc721ceb446e"
  },
  "seq": {
    "$numberLong": "565"
  },
  "type": "STDIO",
  "url": "https://github.com/QuantGeekDev/docker-mcp",
  "stars": 275,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "docker-mcp",
    "description": "This MCP server manages Docker containers and Compose stacks through Claude AI, using the Model Context Protocol to enable operations such as container creation, deployment, log retrieval, and status monitoring.",
    "command": "uvx",
    "args": [
      "docker-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:38.789Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:55:26.184Z"
  },
  "tags": [
    "docker",
    "docker"
  ]
},
{
  "_id": {
    "$oid": "68289abfa6f8dc721ceb4470"
  },
  "seq": {
    "$numberLong": "566"
  },
  "type": "STDIO",
  "url": "https://github.com/baidu-maps/mcp",
  "stars": 262,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "baidu-maps",
    "description": "The Baidu Maps MCP Server implements the Model Context Protocol (MCP) with ten standard APIs, leveraging MCP Python and Typescript SDKs to provide functionalities such as reverse geocoding, place searching, and route planning, accessible via intelligent agent assistants and, ideally, via SSE for enhanced performance.",
    "command": "uvx",
    "args": [
      "mcp-server-baidu-maps"
    ],
    "env": {
      "BAIDU_MAPS_API_KEY": "<YOUR_API_KEY>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:39.474Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:55:29.747Z"
  },
  "tags": [
    "baidu maps",
    "baidu",
    "maps"
  ]
},
{
  "_id": {
    "$oid": "68289ac1a6f8dc721ceb4472"
  },
  "seq": {
    "$numberLong": "567"
  },
  "type": "STDIO",
  "url": "https://github.com/vivekVells/mcp-pandoc",
  "stars": 209,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-pandoc",
    "description": "The mcp-pandoc server converts documents between formats like markdown, HTML, PDF, DOCX, RST, LaTeX, EPUB, and TXT using the Pandoc Python package and adheres to the Model Context Protocol, enabling tools to transform content between various document formats while preserving structure; it requires a TeX Live installation for PDF conversions.",
    "command": "uvx",
    "args": [
      "mcp-pandoc"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:41.150Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:55:31.440Z"
  },
  "tags": [
    "pandoc"
  ]
},
{
  "_id": {
    "$oid": "68289ac2a6f8dc721ceb4474"
  },
  "seq": {
    "$numberLong": "568"
  },
  "type": "STDIO",
  "url": "https://github.com/nickclyde/duckduckgo-mcp-server",
  "stars": 158,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ddg-search",
    "description": "This MCP server provides web search using the DuckDuckGo API and fetches/parses content from web pages, communicating using the Model Context Protocol and offering LLM-friendly output with built-in rate limiting.",
    "command": "uvx",
    "args": [
      "duckduckgo-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:42.954Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:55:33.085Z"
  },
  "tags": [
    "ddg search",
    "ddg",
    "search"
  ]
},
{
  "_id": {
    "$oid": "68289ac3a6f8dc721ceb4476"
  },
  "seq": {
    "$numberLong": "569"
  },
  "type": "STDIO",
  "url": "https://github.com/VAST-AI-Research/tripo-mcp",
  "stars": 155,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "tripo-mcp",
    "description": "The Tripo MCP server enables AI assistants like Claude to generate 3D assets using the Tripo AI API and import them into Blender via the Model Context Protocol. It integrates with the Tripo AI Blender Addon and can be configured within MCP-enabled AI assistants such as Claude and Cursor IDE.",
    "command": "uvx",
    "args": [
      "tripo-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:43.639Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:55:35.217Z"
  },
  "tags": [
    "tripo",
    "tripo"
  ]
},
{
  "_id": {
    "$oid": "68289ac4a6f8dc721ceb4478"
  },
  "seq": {
    "$numberLong": "570"
  },
  "type": "STDIO",
  "url": "https://github.com/semgrep/mcp",
  "stars": 153,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "semgrep",
    "description": "The Semgrep MCP server implements the Model Context Protocol to enable Large Language Models (LLMs) and Integrated Development Environments (IDEs) to leverage Semgrep's static analysis capabilities, using standard input/output (stdio) and Server-Sent Events (SSE) for communication and supporting integrations with tools like Cursor, VS Code, and OpenAI, with support for connecting to the Semgrep AppSec Platform.",
    "command": "uvx",
    "args": [
      "semgrep-mcp"
    ],
    "env": {
      "SEMGREP_APP_TOKEN": "<token>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:44.649Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:56:27.926Z"
  },
  "tags": [
    "semgrep"
  ]
},
{
  "_id": {
    "$oid": "68289ac5a6f8dc721ceb447a"
  },
  "seq": {
    "$numberLong": "571"
  },
  "type": "STDIO",
  "url": "https://github.com/motherduckdb/mcp-server-motherduck",
  "stars": 153,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-motherduck",
    "description": "This MCP server enables AI Assistants and IDEs to execute SQL analytics against DuckDB and MotherDuck databases using the `query` tool, allowing for hybrid execution across local and cloud storage with integrations like Amazon S3; it communicates via SQL and offers a prompt to initialize connections.",
    "command": "uvx",
    "args": [
      "mcp-server-motherduck",
      "--db-path",
      "md:",
      "--motherduck-token",
      "<YOUR_MOTHERDUCK_TOKEN_HERE>"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:45.338Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:56:31.495Z"
  },
  "tags": [
    "motherduck",
    "mother duck"
  ]
},
{
  "_id": {
    "$oid": "68289ac6a6f8dc721ceb447c"
  },
  "seq": {
    "$numberLong": "572"
  },
  "type": "STDIO",
  "url": "https://github.com/GongRzhe/Office-Word-MCP-Server",
  "stars": 139,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "word-document-server",
    "description": "This MCP server implements the Model Context Protocol using Python and the `python-docx` library to enable AI assistants to create, read, and manipulate Microsoft Word documents, offering capabilities such as document management, content creation, rich text formatting, and document protection; it integrates with MCP clients like Claude for Desktop via JSON configuration.",
    "command": "uvx",
    "args": [
      "--from",
      "office-word-mcp-server",
      "word_mcp_server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:46.804Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:56:33.267Z"
  },
  "tags": [
    "word document",
    "word",
    "document"
  ]
},
{
  "_id": {
    "$oid": "68289ac7a6f8dc721ceb447e"
  },
  "seq": {
    "$numberLong": "573"
  },
  "type": "STDIO",
  "url": "https://github.com/neka-nat/freecad-mcp",
  "stars": 137,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "freecad",
    "description": "This FreeCAD MCP server implements a remote control interface, enabling Claude Desktop to interact with FreeCAD using RPC; it supports commands for creating, editing, and deleting objects, executing Python code, inserting parts from a library, and retrieving views, object data, and part lists.",
    "command": "uvx",
    "args": [
      "freecad-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:47.407Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:56:34.931Z"
  },
  "tags": [
    "freecad",
    "free cad"
  ]
},
{
  "_id": {
    "$oid": "68289acaa6f8dc721ceb4480"
  },
  "seq": {
    "$numberLong": "574"
  },
  "type": "STDIO",
  "url": "https://github.com/ktanaka101/mcp-server-duckdb",
  "stars": 111,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "duckdb",
    "description": "This MCP server implements a database interaction tool that enables execution of arbitrary DuckDB SQL queries, including data retrieval and modification operations, via the Model Context Protocol, and it integrates with tools like Claude Desktop and Smithery.",
    "command": "uvx",
    "args": [
      "mcp-server-duckdb",
      "--db-path",
      "~/mcp-server-duckdb/data/data.db"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:50.042Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:56:36.849Z"
  },
  "tags": [
    "duckdb",
    "duck db"
  ]
},
{
  "_id": {
    "$oid": "68289acba6f8dc721ceb4482"
  },
  "seq": {
    "$numberLong": "575"
  },
  "type": "STDIO",
  "url": "https://github.com/xing5/mcp-google-sheets",
  "stars": 108,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "google-sheets",
    "description": "The mcp-google-sheets server provides an interface between MCP-compatible clients and the Google Sheets API, enabling AI-driven interaction with Google Spreadsheets using a defined set of tools; it uses Python and supports authentication via Service Accounts, OAuth 2.0, or direct credential injection, communicating with the Google Drive and Sheets APIs to perform CRUD operations, list data, batch updates, and manage spreadsheet sharing.",
    "command": "uvx",
    "args": [
      "mcp-google-sheets"
    ],
    "env": {
      "SERVICE_ACCOUNT_PATH": "/full/path/to/your/service-account-key.json",
      "DRIVE_FOLDER_ID": "your_shared_folder_id_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:51.105Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:57:30.106Z"
  },
  "tags": [
    "google sheets",
    "google",
    "sheets"
  ]
},
{
  "_id": {
    "$oid": "68289acca6f8dc721ceb4484"
  },
  "seq": {
    "$numberLong": "576"
  },
  "type": "STDIO",
  "url": "https://github.com/YuChenSSR/mindmap-mcp-server",
  "stars": 102,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mindmap",
    "description": "The Mindmap MCP server converts Markdown content into interactive HTML mindmaps using `markmap-cli`, offering the option to return either the complete HTML or a file path; it integrates with MCP-compatible clients like Claude and supports deployment via `uvx`, `python`, or Docker, allowing for customizable output and token saving.",
    "command": "uvx",
    "args": [
      "mindmap-mcp-server",
      "--return-type",
      "html"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:52.585Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:57:33.111Z"
  },
  "tags": [
    "mindmap",
    "mind map"
  ]
},
{
  "_id": {
    "$oid": "68289acda6f8dc721ceb4486"
  },
  "seq": {
    "$numberLong": "577"
  },
  "type": "STDIO",
  "url": "https://github.com/peakmojo/applescript-mcp",
  "stars": 104,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "applescript_execute",
    "description": "The AppleScript MCP server executes AppleScript code on macOS via both Node.js and Python, enabling interaction with Mac applications like Notes, Calendar, and Messages, and facilitating file system operations and shell command execution.",
    "command": "npx",
    "args": [
      "@peakmojo/applescript-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:53.481Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:57:34.783Z"
  },
  "tags": [
    "applescript execute",
    "applescript",
    "execute"
  ]
},
{
  "_id": {
    "$oid": "68289acfa6f8dc721ceb4488"
  },
  "seq": {
    "$numberLong": "578"
  },
  "type": "STDIO",
  "url": "https://github.com/GongRzhe/Office-PowerPoint-MCP-Server",
  "stars": 96,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ppt",
    "description": "This MCP server facilitates programmatic manipulation of PowerPoint presentations using python-pptx, enabling creation, editing, and saving of .pptx files; it communicates via the Model Context Protocol and integrates with Claude Desktop through Smithery.",
    "command": "uvx",
    "args": [
      "--from",
      "office-powerpoint-mcp-server",
      "ppt_mcp_server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:55.880Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:57:36.634Z"
  },
  "tags": [
    "ppt"
  ]
},
{
  "_id": {
    "$oid": "68289ad1a6f8dc721ceb448a"
  },
  "seq": {
    "$numberLong": "579"
  },
  "type": "STDIO",
  "url": "https://github.com/utensils/mcp-nixos",
  "stars": 92,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "nixos",
    "description": "MCP-NixOS implements a Model Context Protocol server, enabling AI assistants to access real-time information about NixOS packages, system options, Home Manager settings, and nix-darwin macOS configurations, retrieving data from the NixOS Elasticsearch API and parsing HTML documentation using BeautifulSoup and regex; it leverages smart caching to reduce network requests and improves startup time.",
    "command": "uvx",
    "args": [
      "mcp-nixos"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:57.216Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:57:38.789Z"
  },
  "tags": [
    "nixos"
  ]
},
{
  "_id": {
    "$oid": "68289ad1a6f8dc721ceb448c"
  },
  "seq": {
    "$numberLong": "580"
  },
  "type": "STDIO",
  "url": "https://github.com/MladenSU/cli-mcp-server",
  "stars": 90,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "cli-mcp-server",
    "description": "The CLI MCP server securely executes whitelisted command-line operations using the Model Context Protocol (MCP), integrating with tools like Claude Desktop and offering features like command and flag validation, path traversal prevention, and execution timeouts; it uses Python and leverages environment variables for configuration.",
    "command": "uvx",
    "args": [
      "cli-mcp-server"
    ],
    "env": {
      "COMMAND_TIMEOUT": "30",
      "MAX_COMMAND_LENGTH": "1024",
      "ALLOWED_DIR": "</your/desired/dir>",
      "ALLOWED_COMMANDS": "ls,cat,pwd,echo",
      "ALLOWED_FLAGS": "-l,-a,--help,--version",
      "ALLOW_SHELL_OPERATORS": "false"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:18:57.854Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:58:31.958Z"
  },
  "tags": [
    "cli",
    "cli"
  ]
},
{
  "_id": {
    "$oid": "68289ad2a6f8dc721ceb448e"
  },
  "seq": {
    "$numberLong": "581"
  },
  "type": "STDIO",
  "url": "https://github.com/carterlasalle/mac_messages_mcp",
  "stars": 89,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "messages",
    "description": "This Python implementation bridges macOS Messages to other applications using MCP, enabling retrieval and filtering of recent iMessages via an API and allowing users to send new messages; it integrates with platforms like Claude Desktop and Cursor via `uvx` and relies on direct access to the Messages database.",
    "command": "uvx",
    "args": [
      "mac-messages-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:18:58.846Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:58:34.770Z"
  },
  "tags": [
    "messages"
  ]
},
{
  "_id": {
    "$oid": "68289ad4a6f8dc721ceb4490"
  },
  "seq": {
    "$numberLong": "582"
  },
  "type": "STDIO",
  "url": "https://github.com/meilisearch/meilisearch-mcp",
  "stars": 83,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "meilisearch",
    "description": "This Python-based MCP server enables LLMs like Claude to interact with Meilisearch, offering capabilities for document indexing, smart search, and settings configuration using the Model Context Protocol; it dynamically manages Meilisearch connections via API keys and URLs, supporting features like task monitoring, API key management, and system monitoring.",
    "command": "uvx",
    "args": [
      "-n",
      "meilisearch-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:00.427Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:58:36.463Z"
  },
  "tags": [
    "meilisearch"
  ]
},
{
  "_id": {
    "$oid": "68289ad5a6f8dc721ceb4492"
  },
  "seq": {
    "$numberLong": "583"
  },
  "type": "STDIO",
  "url": "https://github.com/mamertofabian/elevenlabs-mcp-server",
  "stars": 82,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "elevenlabs",
    "description": "This MCP server leverages the ElevenLabs API for text-to-speech generation, supporting multiple voices and script management, and uses an SQLite database to persist history; it includes a SvelteKit-based MCP client for interacting with the server and managing voice generation tasks.",
    "command": "uvx",
    "args": [
      "elevenlabs-mcp-server"
    ],
    "env": {
      "ELEVENLABS_STABILITY": "0.5",
      "ELEVENLABS_MODEL_ID": "eleven_flash_v2",
      "ELEVENLABS_API_KEY": "your-api-key",
      "ELEVENLABS_OUTPUT_DIR": "output",
      "ELEVENLABS_VOICE_ID": "your-voice-id",
      "ELEVENLABS_STYLE": "0.1",
      "ELEVENLABS_SIMILARITY_BOOST": "0.75"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:01.047Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:58:38.373Z"
  },
  "tags": [
    "elevenlabs"
  ]
},
{
  "_id": {
    "$oid": "68289ad6a6f8dc721ceb4494"
  },
  "seq": {
    "$numberLong": "584"
  },
  "type": "STDIO",
  "url": "https://github.com/Abiorh001/mcp_omni_connect",
  "stars": 82,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "filesystem-server",
    "description": "MCPOmni Connect acts as a universal command-line interface for interacting with Model Context Protocol (MCP) servers, providing seamless integration with LLMs from OpenAI, OpenRouter, Groq, Gemini and DeepSeek, along with supporting standard input/output (stdio), Server-Sent Events (SSE), and streamable HTTP transport protocols.",
    "command": "npx",
    "args": [
      "@modelcontextprotocol/server-filesystem",
      "/path/to/files"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:02.223Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:58:41.044Z"
  },
  "tags": [
    "filesystem",
    "file system"
  ]
},
{
  "_id": {
    "$oid": "68289adaa6f8dc721ceb4496"
  },
  "seq": {
    "$numberLong": "585"
  },
  "type": "STDIO",
  "url": "https://github.com/kujenga/zotero-mcp",
  "stars": 66,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "zotero",
    "description": "This Python server implements the Model Context Protocol (MCP) for Zotero, enabling AI assistants to search Zotero libraries, retrieve item metadata, and extract full text content via the Zotero local API or Web API, communicating through MCP clients.",
    "command": "uvx",
    "args": [
      "--upgrade",
      "zotero-mcp"
    ],
    "env": {
      "ZOTERO_LOCAL": "true",
      "ZOTERO_API_KEY": "",
      "ZOTERO_LIBRARY_ID": ""
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:06.854Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:59:33.495Z"
  },
  "tags": [
    "zotero"
  ]
},
{
  "_id": {
    "$oid": "68289adca6f8dc721ceb4498"
  },
  "seq": {
    "$numberLong": "586"
  },
  "type": "STDIO",
  "url": "https://github.com/SecretiveShell/MCP-searxng",
  "stars": 65,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "searxng",
    "description": "This MCP server implementation connects agentic systems to the SearXNG metasearch engine, enabling web searches through a defined 'search' prompt; it communicates using HTTP and integrates with MCP clients via `uvx` or by directly referencing the `main.py` entrypoint.",
    "command": "uvx",
    "args": [
      "mcp-searxng"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:08.157Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:59:36.348Z"
  },
  "tags": [
    "searxng"
  ]
},
{
  "_id": {
    "$oid": "68289adda6f8dc721ceb449a"
  },
  "seq": {
    "$numberLong": "587"
  },
  "type": "STDIO",
  "url": "https://github.com/ChronulusAI/chronulus-mcp",
  "stars": 63,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "chronulus-agents",
    "description": "This MCP server implementation enables Claude to interact with Chronulus AI Forecasting & Prediction Agents through the Model Context Protocol (MCP), allowing users to integrate Chronulus' capabilities into their Claude workflows; it supports installation via pip, Docker, or uvx, and integrates with third-party MCP servers like fetch and filesystem.",
    "command": "uvx",
    "args": [
      "chronulus-mcp"
    ],
    "env": {
      "CHRONULUS_API_KEY": "<YOUR_CHRONULUS_API_KEY>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:09.447Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:59:38.198Z"
  },
  "tags": [
    "chronulus agents",
    "chronulus",
    "agents",
    "chronulus-agents"
  ]
},
{
  "_id": {
    "$oid": "68289adfa6f8dc721ceb449c"
  },
  "seq": {
    "$numberLong": "588"
  },
  "type": "STDIO",
  "url": "https://github.com/wrale/mcp-server-tree-sitter",
  "stars": 55,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "tree_sitter",
    "description": "This MCP server provides code analysis for AI assistants, leveraging tree-sitter to offer structure-aware exploration, symbol extraction, and dependency analysis across various programming languages; it integrates with Claude Desktop via the Model Context Protocol and supports configuration through YAML files and environment variables.",
    "command": "uvx",
    "args": [
      "--directory",
      "/ABSOLUTE/PATH/TO/YOUR/PROJECT",
      "mcp-server-tree-sitter"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:11.062Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:59:40.100Z"
  },
  "tags": [
    "tree sitter",
    "tree",
    "sitter"
  ]
},
{
  "_id": {
    "$oid": "68289adfa6f8dc721ceb449e"
  },
  "seq": {
    "$numberLong": "589"
  },
  "type": "STDIO",
  "url": "https://github.com/loonghao/photoshop-python-api-mcp-server",
  "stars": 54,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "photoshop",
    "description": "This MCP server enables programmatic control of Adobe Photoshop on Windows using the photoshop-python-api, communicating via the Model Context Protocol. It utilizes Windows-specific COM interfaces and supports Photoshop automation tasks such as document creation, layer manipulation, and information retrieval, configurable via the `PS_VERSION` environment variable using `uvx`.",
    "command": "uvx",
    "args": [
      "--python",
      "3.10",
      "photoshop-mcp-server"
    ],
    "env": {
      "PS_VERSION": "2024"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:11.712Z"
  },
  "updated_at": {
    "$date": "2025-05-17T20:59:42.822Z"
  },
  "tags": [
    "photoshop"
  ]
},
{
  "_id": {
    "$oid": "68289ae3a6f8dc721ceb44a0"
  },
  "seq": {
    "$numberLong": "590"
  },
  "type": "STDIO",
  "url": "https://github.com/wenb1n-dev/mysql_mcp_server_pro",
  "stars": 46,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mysql",
    "description": "The mcp_mysql_server provides a MySQL management and analysis interface that supports standard SQL operations, anomaly detection, health status analysis, table and index introspection, and permission control via roles; it operates in STDIO or SSE modes and can be extended with custom tools.",
    "command": "uvx",
    "args": [
      "--from",
      "mysql_mcp_server_pro",
      "mysql_mcp_server_pro"
    ],
    "env": {
      "MYSQL_DATABASE": "a_llm",
      "MYSQL_PORT": "3306",
      "MYSQL_PASSWORD": "root",
      "MYSQL_USER": "root",
      "MYSQL_HOST": "192.168.x.xxx",
      "MYSQL_ROLE": "admin"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:15.677Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:00:35.125Z"
  },
  "tags": [
    "mysql"
  ]
},
{
  "_id": {
    "$oid": "68289ae6a6f8dc721ceb44a2"
  },
  "seq": {
    "$numberLong": "591"
  },
  "type": "STDIO",
  "url": "https://github.com/leehanchung/bing-search-mcp",
  "stars": 42,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "bing-search",
    "description": "This MCP server integrates with the Microsoft Bing Search API to provide AI assistants with web, news, and image search capabilities, utilizing Python and configurable API keys for operation.",
    "command": "uvx",
    "args": [
      "/path/to/your/bing-search-mcp"
    ],
    "env": {
      "BING_API_KEY": "your-bing-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:18.384Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:00:37.840Z"
  },
  "tags": [
    "bing search",
    "bing",
    "search"
  ]
},
{
  "_id": {
    "$oid": "68289ae9a6f8dc721ceb44a4"
  },
  "seq": {
    "$numberLong": "592"
  },
  "type": "STDIO",
  "url": "https://github.com/appwrite/mcp",
  "stars": 38,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "appwrite",
    "description": "The Appwrite MCP server acts as a Model Context Protocol interface to Appwrite, enabling management of Appwrite resources such as databases, users, and functions through LLM integrations; it leverages `uv` or `pip` for installation and communicates with Appwrite's API using API keys and project IDs.",
    "command": "uvx",
    "args": [
      "mcp-server-appwrite"
    ],
    "env": {
      "APPWRITE_PROJECT_ID": "your-project-id",
      "APPWRITE_ENDPOINT": "https://cloud.appwrite.io/v1",
      "APPWRITE_API_KEY": "your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:21.461Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:00:40.000Z"
  },
  "tags": [
    "appwrite"
  ]
},
{
  "_id": {
    "$oid": "68289aeba6f8dc721ceb44a6"
  },
  "seq": {
    "$numberLong": "593"
  },
  "type": "STDIO",
  "url": "https://github.com/ipospelov/mcp-memory-bank",
  "stars": 38,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-memory-bank",
    "description": "This MCP server implements Cline's Memory Bank pattern for AI assistant context preservation by providing tools to analyze projects, generate Memory Bank file templates, and describe the Memory Bank structure via UVX, Smithery, Docker, or manual Python execution using `requirements.txt`.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/ipospelov/mcp-memory-bank",
      "mcp_memory_bank"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:23.025Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:00:41.632Z"
  },
  "tags": [
    "memory bank",
    "memory",
    "bank"
  ]
},
{
  "_id": {
    "$oid": "68289aeea6f8dc721ceb44a8"
  },
  "seq": {
    "$numberLong": "594"
  },
  "type": "STDIO",
  "url": "https://github.com/yangkyeongmo/mcp-server-apache-airflow",
  "stars": 34,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-apache-airflow",
    "description": "This MCP server provides a standardized interface for interacting with Apache Airflow, exposing functionalities like DAG management, DAG runs, tasks, variables, connections, pools, XComs, datasets, and monitoring via the Model Context Protocol and the Airflow REST API v1. It leverages the official Apache Airflow client library for seamless integration and supports configuration through environment variables.",
    "command": "uvx",
    "args": [
      "mcp-server-apache-airflow"
    ],
    "env": {
      "AIRFLOW_PASSWORD": "your-password",
      "AIRFLOW_HOST": "https://your-airflow-host",
      "AIRFLOW_USERNAME": "your-username"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:26.682Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:00:44.753Z"
  },
  "tags": [
    "apache airflow",
    "apache",
    "airflow"
  ]
},
{
  "_id": {
    "$oid": "68289af1a6f8dc721ceb44aa"
  },
  "seq": {
    "$numberLong": "595"
  },
  "type": "STDIO",
  "url": "https://github.com/loonghao/wecom-bot-mcp-server",
  "stars": 33,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "wecom",
    "description": "The WeCom Bot MCP Server provides a Model Context Protocol compliant interface for sending messages via WeCom (WeChat Work) bot, supporting text, markdown, image (base64 and URLs), and file messages while also enabling @mention functionality, and utilizes Python, Pydantic, and a WeCom Bot Webhook URL for operation.",
    "command": "uvx",
    "args": [
      "wecom-bot-mcp-server"
    ],
    "env": {
      "WECOM_WEBHOOK_URL": "your-webhook-url"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:29.191Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:01:36.995Z"
  },
  "tags": [
    "wecom"
  ]
},
{
  "_id": {
    "$oid": "68289af2a6f8dc721ceb44ac"
  },
  "seq": {
    "$numberLong": "596"
  },
  "type": "STDIO",
  "url": "https://github.com/nkapila6/mcp-local-rag",
  "stars": 33,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-local-rag",
    "description": "The mcp-local-rag server provides a \"primitive\" Retrieval-Augmented Generation (RAG) capability by fetching search results from DuckDuckGo, embedding them using Google's MediaPipe Text Embedder, ranking them by similarity to the query, and returning the top results as Markdown from HTML content.",
    "command": "uvx",
    "args": [
      "--python=3.10",
      "--from",
      "git+https://github.com/nkapila6/mcp-local-rag",
      "mcp-local-rag"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:30.067Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:01:39.561Z"
  },
  "tags": [
    "local rag",
    "local",
    "rag"
  ]
},
{
  "_id": {
    "$oid": "68289af3a6f8dc721ceb44ae"
  },
  "seq": {
    "$numberLong": "597"
  },
  "type": "STDIO",
  "url": "https://github.com/kennethreitz/mcp-applemusic",
  "stars": 32,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "iTunesControlServer",
    "description": "This FastMCP server implementation controls the Apple Music application on macOS by executing AppleScript commands; it integrates with the MCP library and allows clients to manage playback, search the library, and create playlists.",
    "command": "uvx",
    "args": [
      "-n",
      "mcp-applemusic"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:31.373Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:01:41.515Z"
  },
  "tags": [
    "itunes control",
    "itunes",
    "control",
    "itunescontrol"
  ]
},
{
  "_id": {
    "$oid": "68289af5a6f8dc721ceb44b0"
  },
  "seq": {
    "$numberLong": "598"
  },
  "type": "STDIO",
  "url": "https://github.com/erithwik/mcp-hn",
  "stars": 31,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-hn",
    "description": "This MCP server implementation provides tools for fetching stories, story details, user information, and search results from Hacker News, enabling integration with platforms like Claude via the Model Context Protocol.",
    "command": "uvx",
    "args": [
      "mcp-hn"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:33.241Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:01:43.121Z"
  },
  "tags": [
    "hn"
  ]
},
{
  "_id": {
    "$oid": "68289af6a6f8dc721ceb44b2"
  },
  "seq": {
    "$numberLong": "599"
  },
  "type": "STDIO",
  "url": "https://github.com/baryhuang/mcp-headless-gmail",
  "stars": 31,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "gmail",
    "description": "This MCP server implements Gmail functionality, providing capabilities to retrieve emails (recent and full body), send emails, and refresh access tokens via the google-api-python-client library; it interacts with Google's Gmail API using OAuth 2.0 for authentication and context-based credentials passed via JSON payloads.",
    "command": "npx",
    "args": [
      "@peakmojo/mcp-server-headless-gmail"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:34.149Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:01:46.531Z"
  },
  "tags": [
    "gmail"
  ]
},
{
  "_id": {
    "$oid": "68289af8a6f8dc721ceb44b4"
  },
  "seq": {
    "$numberLong": "600"
  },
  "type": "STDIO",
  "url": "https://github.com/SecretiveShell/MCP-timeserver",
  "stars": 30,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "MCP-timeserver",
    "description": "This MCP server provides access to current date and time information using a custom `datetime://` URI scheme and exposes a tool for retrieving local time, enabling integration with agentic systems and chat REPLs via the MCP protocol.",
    "command": "uvx",
    "args": [
      "MCP-timeserver"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:36.313Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:02:38.459Z"
  },
  "tags": [
    "timeserver",
    "time server",
    "time"
  ]
},
{
  "_id": {
    "$oid": "68289afca6f8dc721ceb44b6"
  },
  "seq": {
    "$numberLong": "601"
  },
  "type": "STDIO",
  "url": "https://github.com/dragon1086/kospi-kosdaq-stock-server",
  "stars": 27,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "kospi-kosdaq",
    "description": "This MCP server provides access to KOSPI/KOSDAQ stock data through FastMCP, enabling retrieval of ticker symbols, OHLCV data, market capitalization, fundamental data (PER/PBR/Dividend Yield), and trading volume using `uv` for dependency management and integration with Claude.app via a configured `claude_desktop_config.json` file.",
    "command": "uvx",
    "args": [
      "kospi_kosdaq_stock_server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:40.234Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:02:41.321Z"
  },
  "tags": [
    "kospi kosdaq",
    "kospi",
    "kosdaq"
  ]
},
{
  "_id": {
    "$oid": "68289afea6f8dc721ceb44b8"
  },
  "seq": {
    "$numberLong": "602"
  },
  "type": "STDIO",
  "url": "https://github.com/Geeksfino/kb-mcp-server",
  "stars": 25,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "kb-server",
    "description": "This MCP server provides semantic search, knowledge graph capabilities, and AI-driven text processing via txtai, enabling standardized access to knowledge bases using the Model Context Protocol; it leverages txtai's unified vector database and supports semantic search, knowledge graph querying, and extensible text processing pipelines.",
    "command": "uvx",
    "args": [
      "kb-mcp-server@0.2.6",
      "--embeddings",
      "/path/to/knowledge_base",
      "--host",
      "localhost",
      "--port",
      "8000"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:42.407Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:02:43.462Z"
  },
  "tags": [
    "kb",
    "kb"
  ]
},
{
  "_id": {
    "$oid": "68289b00a6f8dc721ceb44ba"
  },
  "seq": {
    "$numberLong": "603"
  },
  "type": "STDIO",
  "url": "https://github.com/iflytek/ifly-workflow-mcp-server",
  "stars": 25,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ifly-workflow-mcp-server",
    "description": "This iFlytek Workflow MCP server implementation enables calling iFlytek workflows through MCP tools, leveraging the Model Context Protocol (MCP) for integration with LLM applications; it orchestrates workflows composed of various node types, supporting sequential, parallel, loop, and nested execution, and uses a Hook Mechanism for streaming output, configurable with API keys and workflow IDs defined in a YAML configuration.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/iflytek/ifly-workflow-mcp-server",
      "ifly_workflow_mcp_server"
    ],
    "env": {
      "CONFIG_PATH": "$CONFIG_PATH"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:44.307Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:02:45.301Z"
  },
  "tags": [
    "ifly workflow",
    "ifly",
    "workflow"
  ]
},
{
  "_id": {
    "$oid": "68289b01a6f8dc721ceb44bc"
  },
  "seq": {
    "$numberLong": "604"
  },
  "type": "STDIO",
  "url": "https://github.com/ScrapeGraphAI/scrapegraph-mcp",
  "stars": 24,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "@ScrapeGraphAI-scrapegraph-mcp",
    "description": "This MCP server provides web scraping capabilities to language models via the Model Context Protocol, integrating with the ScrapeGraph AI API to offer tools for converting websites to markdown, extracting structured data using AI, and performing AI-powered web searches with structured results.",
    "command": "npx",
    "args": [
      "-y",
      "@smithery/cli@latest",
      "run",
      "@ScrapeGraphAI/scrapegraph-mcp",
      "--config",
      "\"{\\\"scrapegraphApiKey\\\":\\\"YOUR-SGAI-API-KEY\\\"}\""
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:45.578Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:02:48.084Z"
  },
  "tags": [
    "scrapegraphai scrapegraph",
    "scrapegraphai",
    "scrapegraph",
    "ai",
    "scrape graph ai scrape graph",
    "scrape",
    "graph",
    "ai"
  ]
},
{
  "_id": {
    "$oid": "68289b03a6f8dc721ceb44be"
  },
  "seq": {
    "$numberLong": "605"
  },
  "type": "STDIO",
  "url": "https://github.com/bitrise-io/bitrise-mcp",
  "stars": 22,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "bitrise",
    "description": "This MCP server implementation provides access to Bitrise's APIs, enabling app management, build operations, artifact handling, and more, using API token-based authentication and serving tools grouped by API for modular access via command-line arguments.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/bitrise-io/bitrise-mcp@v1.1.0",
      "bitrise-mcp"
    ],
    "env": {
      "BITRISE_TOKEN": "<YOUR_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:47.482Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:03:40.588Z"
  },
  "tags": [
    "bitrise"
  ]
},
{
  "_id": {
    "$oid": "68289b04a6f8dc721ceb44c0"
  },
  "seq": {
    "$numberLong": "606"
  },
  "type": "STDIO",
  "url": "https://github.com/grll/pubmedmcp",
  "stars": 21,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "pubmedmcp",
    "description": "This MCP server implementation searches and fetches biomedical articles from the PubMed database, leveraging the pubmedclient Python package for its operations. It integrates with Claude through a specified configuration using the uv package manager.",
    "command": "uvx",
    "args": [
      "pubmedmcp@latest"
    ],
    "env": {
      "UV_PYTHON": "3.12",
      "UV_PRERELEASE": "allow"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:48.754Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:03:42.820Z"
  },
  "tags": [
    "pubmed"
  ]
},
{
  "_id": {
    "$oid": "68289b05a6f8dc721ceb44c2"
  },
  "seq": {
    "$numberLong": "607"
  },
  "type": "STDIO",
  "url": "https://github.com/sugarforever/amap-mcp-server",
  "stars": 21,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "amap-mcp-server",
    "description": "The amap-mcp-server provides geocoding, IP location, weather, route planning (bicycling, walking, driving, and public transit), distance calculation, and POI search functionalities using the Gaode Maps API, accessible through stdio, SSE, or streamable-HTTP, and requiring an AMAP_MAPS_API_KEY environment variable.",
    "command": "uvx",
    "args": [
      "amap-mcp-server"
    ],
    "env": {
      "AMAP_MAPS_API_KEY": "your valid amap maps api key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:49.690Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:03:45.117Z"
  },
  "tags": [
    "amap",
    "a map",
    "map"
  ]
},
{
  "_id": {
    "$oid": "68289b06a6f8dc721ceb44c4"
  },
  "seq": {
    "$numberLong": "608"
  },
  "type": "STDIO",
  "url": "https://github.com/xxxbrian/mcp-rquest",
  "stars": 21,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "http-rquest",
    "description": "This MCP server implements advanced HTTP request capabilities for LLMs, particularly Claude, by leveraging the `rquest` library to provide realistic browser emulation through accurate TLS/JA3/JA4 fingerprinting and supports converting HTML and PDF documents to Markdown format for easier LLM processing.",
    "command": "uvx",
    "args": [
      "mcp-rquest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:50.352Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:03:47.022Z"
  },
  "tags": [
    "http rquest",
    "http",
    "rquest"
  ]
},
{
  "_id": {
    "$oid": "68289b08a6f8dc721ceb44c6"
  },
  "seq": {
    "$numberLong": "609"
  },
  "type": "STDIO",
  "url": "https://github.com/jkawamoto/mcp-youtube-transcript",
  "stars": 20,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "youtube-transcript",
    "description": "This MCP server retrieves YouTube video transcripts via the `get_transcript` tool, supporting optional language specification and integrating with Goose CLI/Desktop and Claude Desktop using a Standard IO interface; it leverages `uvx` and git-based installation and accommodates proxy server configurations through environment variables or command-line arguments.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/jkawamoto/mcp-youtube-transcript",
      "mcp-youtube-transcript"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:52.151Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:03:49.929Z"
  },
  "tags": [
    "youtube transcript",
    "youtube",
    "transcript"
  ]
},
{
  "_id": {
    "$oid": "68289b09a6f8dc721ceb44c8"
  },
  "seq": {
    "$numberLong": "610"
  },
  "type": "STDIO",
  "url": "https://github.com/arcaputo3/mcp-server-whisper",
  "stars": 20,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "whisper",
    "description": "This MCP server implements advanced audio processing capabilities using OpenAI's Whisper and GPT-4o models, providing tools for audio file management, transcription, text-to-speech generation, and format conversion, and it leverages protocols like MCP, utilizes libraries such as pydub, and supports formats like mp3 and wav.",
    "command": "uvx",
    "args": [
      "--with",
      "aiofiles",
      "--with",
      "mcp[cli]",
      "--with",
      "openai",
      "--with",
      "pydub",
      "mcp-server-whisper"
    ],
    "env": {
      "AUDIO_FILES_PATH": "/path/to/your/audio/files",
      "OPENAI_API_KEY": "your_openai_api_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:53.693Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:04:42.163Z"
  },
  "tags": [
    "whisper"
  ]
},
{
  "_id": {
    "$oid": "68289b0aa6f8dc721ceb44ca"
  },
  "seq": {
    "$numberLong": "611"
  },
  "type": "STDIO",
  "url": "https://github.com/allvoicelab/AllVoiceLab-MCP",
  "stars": 20,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "AllVoiceLab",
    "description": "This MCP server implementation by AllVoiceLab enables text-to-speech, speech-to-speech, voice cloning, vocal separation, multilingual dubbing, speech-to-text, subtitle removal, and text translation using AI-powered APIs; it integrates with MCP clients such as Claude Desktop and Cursor, communicating through a specified API key and domain.",
    "command": "uvx",
    "args": [
      "allvoicelab-mcp"
    ],
    "env": {
      "ALLVOICELAB_API_DOMAIN": "<insert-api-domain-here>",
      "ALLVOICELAB_BASE_PATH": "optional, default is user home directory.This is uesd to store the output files.",
      "ALLVOICELAB_API_KEY": "<insert-your-api-key-here>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:54.603Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:04:44.665Z"
  },
  "tags": [
    "allvoicelab",
    "all voice lab",
    "all",
    "voice",
    "lab",
    "voice lab"
  ]
},
{
  "_id": {
    "$oid": "68289b0ba6f8dc721ceb44cc"
  },
  "seq": {
    "$numberLong": "612"
  },
  "type": "STDIO",
  "url": "https://github.com/salesforce-mcp/salesforce-mcp",
  "stars": 19,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "salesforce",
    "description": "This Salesforce MCP server implementation allows users to interact with Salesforce data and metadata using natural language, enabling capabilities such as querying, creating, updating, and deleting records and metadata objects, using a natural language interface that translates to SOQL and SOSL queries.",
    "command": "uvx",
    "args": [
      "--from",
      "salesforce-mcp",
      "salesforce"
    ],
    "env": {
      "PASSWORD": "YOUR_SALESFORCE_PASSWORD",
      "SECURITY_TOKEN": "YOUR_SALESFORCE_SECURITY_TOKEN",
      "USERNAME": "YOUR_SALESFORCE_USERNAME"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:55.223Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:04:46.814Z"
  },
  "tags": [
    "salesforce"
  ]
},
{
  "_id": {
    "$oid": "68289b0ba6f8dc721ceb44ce"
  },
  "seq": {
    "$numberLong": "613"
  },
  "type": "STDIO",
  "url": "https://github.com/briandconnelly/mcp-server-ipinfo",
  "stars": 19,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "This MCP server implementation leverages the ipinfo.io API to retrieve detailed IP address information, including location and network details, via the Model Context Protocol; it integrates with Claude desktop using a configuration that specifies a command and environment variables for accessing the ipinfo.io API.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/briandconnelly/mcp-server-ipinfo.git",
      "mcp-server-ipinfo"
    ],
    "env": {
      "IPINFO_API_TOKEN": "<YOUR TOKEN HERE>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:55.820Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:04:48.502Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "68289b0ca6f8dc721ceb44d0"
  },
  "seq": {
    "$numberLong": "614"
  },
  "type": "STDIO",
  "url": "https://github.com/singlestore-labs/mcp-server-singlestore",
  "stars": 19,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "singlestore-mcp-server",
    "description": "The SingleStore MCP server implements the Model Context Protocol (MCP) to enable natural language interaction between LLM clients like Claude Desktop and Cursor and SingleStore, leveraging uvx to provide tools for managing workspaces, executing SQL queries, and handling notebooks within SingleStore using a standardized protocol.",
    "command": "uvx",
    "args": [
      "singlestore-mcp-server",
      "start",
      "<SINGLESTORE_API_KEY>"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:19:56.538Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:04:51.819Z"
  },
  "tags": [
    "singlestore",
    "single store",
    "store"
  ]
},
{
  "_id": {
    "$oid": "68289b0ea6f8dc721ceb44d2"
  },
  "seq": {
    "$numberLong": "615"
  },
  "type": "STDIO",
  "url": "https://github.com/PixVerseAI/PixVerse-MCP",
  "stars": 19,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "PixVerse",
    "description": "The PixVerse MCP server enables access to PixVerse's video generation models via applications supporting the Model Context Protocol (MCP), such as Claude and Cursor; it leverages the PixVerse API to provide text-to-video generation capabilities, allowing users to generate videos by sending text prompts, and it uses Python and UV/UVX for its server implementation.",
    "command": "uvx",
    "args": [
      "pixverse-mcp"
    ],
    "env": {
      "PIXVERSE_API_KEY": "your-api-key-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:58.770Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:05:43.919Z"
  },
  "tags": [
    "pixverse",
    "pix verse",
    "pix",
    "verse"
  ]
},
{
  "_id": {
    "$oid": "68289b0fa6f8dc721ceb44d4"
  },
  "seq": {
    "$numberLong": "616"
  },
  "type": "STDIO",
  "url": "https://github.com/dailydaniel/logseq-mcp",
  "stars": 18,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "logseq",
    "description": "This MCP server enables programmatic interaction with Logseq knowledge graphs via the Logseq API, allowing Large Language Models to create pages, manage blocks, and organize information; it integrates using HTTP requests and supports configuration via environment variables or command-line arguments.",
    "command": "uvx",
    "args": [
      "mcp-server-logseq"
    ],
    "env": {
      "LOGSEQ_API_TOKEN": "<YOUR_KEY>",
      "LOGSEQ_API_URL": "http://127.0.0.1:12315"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:19:59.770Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:05:46.269Z"
  },
  "tags": [
    "logseq"
  ]
},
{
  "_id": {
    "$oid": "68289b11a6f8dc721ceb44d6"
  },
  "seq": {
    "$numberLong": "617"
  },
  "type": "STDIO",
  "url": "https://github.com/quickchatai/quickchat-ai-mcp",
  "stars": 18,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "< QUICKCHAT AI MCP NAME >",
    "description": "The Quickchat AI MCP server enables integration of Quickchat AI agents into various AI applications like Claude Desktop and Cursor using the Model Context Protocol, communicating via HTTP requests and environment variables for configuration and authentication with a Quickchat AI account.",
    "command": "uvx",
    "args": [
      "quickchat-ai-mcp"
    ],
    "env": {
      "SCENARIO_ID": "< QUICKCHAT AI SCENARIO ID >",
      "API_KEY": "< QUICKCHAT AI API KEY >"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:01.463Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:05:48.468Z"
  },
  "tags": [
    "quickchat ai",
    "quickchat",
    "ai"
  ]
},
{
  "_id": {
    "$oid": "68289b12a6f8dc721ceb44d8"
  },
  "seq": {
    "$numberLong": "618"
  },
  "type": "STDIO",
  "url": "https://github.com/hetaoBackend/mcp-pyautogui-server",
  "stars": 18,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-pyautogui-server",
    "description": "This MCP server automates GUI interactions by using PyAutoGUI to control the mouse and keyboard, take screenshots, and find images on screen; it integrates with the Model Context Protocol (MCP) and can be configured for use with Claude desktop applications via JSON configuration files.",
    "command": "uvx",
    "args": [
      "mcp-pyautogui-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:02.120Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:05:50.262Z"
  },
  "tags": [
    "pyautogui",
    "py auto gui",
    "py",
    "auto",
    "gui"
  ]
},
{
  "_id": {
    "$oid": "68289b14a6f8dc721ceb44da"
  },
  "seq": {
    "$numberLong": "619"
  },
  "type": "STDIO",
  "url": "https://github.com/phil65/LLMling",
  "stars": 17,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "llmling",
    "description": "LLMLing is a framework for declarative LLM application development that uses YAML configuration to define resource management, prompt templates, and tool execution; it leverages the Machine Chat Protocol (MCP) for standardized LLM interaction and integrates with resources, prompts, and Python-based tools, serving content via an HTTP/SSE server.",
    "command": "uvx",
    "args": [
      "mcp-server-llmling@latest",
      "start",
      "path/to/your/config.yml"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:04.242Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:05:53.968Z"
  },
  "tags": [
    "llmling",
    "llm",
    "ling"
  ]
},
{
  "_id": {
    "$oid": "68289b16a6f8dc721ceb44dc"
  },
  "seq": {
    "$numberLong": "620"
  },
  "type": "STDIO",
  "url": "https://github.com/SecretiveShell/MCP-llms-txt",
  "stars": 16,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-llms-txt",
    "description": "This MCP server implementation integrates with Awesome-llms-txt to allow users to augment conversations with documentation using MCP resources; it is designed for use with Claude Desktop and can be installed via Smithery or manually configured with the `uvx` command, and tested using `mcp-cli`.",
    "command": "uvx",
    "args": [
      "mcp-llms-txt"
    ],
    "env": {
      "PYTHONUTF8": "1"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:06.052Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:06:45.600Z"
  },
  "tags": [
    "llms txt",
    "llms",
    "txt"
  ]
},
{
  "_id": {
    "$oid": "68289b18a6f8dc721ceb44de"
  },
  "seq": {
    "$numberLong": "621"
  },
  "type": "STDIO",
  "url": "https://github.com/j4c0bs/mcp-server-sql-analyzer",
  "stars": 16,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "sql-analyzer",
    "description": "This Model Context Protocol (MCP) server utilizes SQLGlot to provide SQL analysis capabilities, including linting, dialect conversion between various SQL dialects, and extraction of table and column references from SQL queries via dedicated tools.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/j4c0bs/mcp-server-sql-analyzer.git",
      "mcp-server-sql-analyzer"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:08.220Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:06:47.853Z"
  },
  "tags": [
    "sql analyzer",
    "sql",
    "analyzer"
  ]
},
{
  "_id": {
    "$oid": "68289b19a6f8dc721ceb44e0"
  },
  "seq": {
    "$numberLong": "622"
  },
  "type": "STDIO",
  "url": "https://github.com/keboola/mcp-server",
  "stars": 15,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "keboola",
    "description": "Keboola MCP Server acts as a bridge between AI tools like Claude and Cursor, and Keboola, enabling agents to query data, manage transformations, trigger jobs, and access metadata by translating natural language into API calls using the Keboola Storage API and executing SQL queries against Snowflake or BigQuery.",
    "command": "uvx",
    "args": [
      "keboola_mcp_server",
      "--api-url",
      "https://connection.YOUR_REGION.keboola.com"
    ],
    "env": {
      "KBC_WORKSPACE_SCHEMA": "your_workspace_schema",
      "KBC_STORAGE_TOKEN": "your_keboola_storage_token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:09.848Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:06:50.063Z"
  },
  "tags": [
    "keboola"
  ]
},
{
  "_id": {
    "$oid": "68289b1ba6f8dc721ceb44e2"
  },
  "seq": {
    "$numberLong": "623"
  },
  "type": "STDIO",
  "url": "https://github.com/tomekkorbak/oura-mcp-server",
  "stars": 15,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "oura",
    "description": "This MCP server, implemented in Python, provides language models with access to Oura API data, enabling queries for sleep, readiness, and resilience metrics through the Model Context Protocol using ISO date formats. It integrates with Claude for Desktop by specifying the server command and environment variables to enable querying Oura data directly from Claude.",
    "command": "uvx",
    "args": [
      "oura-mcp-server"
    ],
    "env": {
      "OURA_API_TOKEN": "YOUR_OURA_API_TOKEN"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:11.175Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:06:52.069Z"
  },
  "tags": [
    "oura"
  ]
},
{
  "_id": {
    "$oid": "68289b1da6f8dc721ceb44e4"
  },
  "seq": {
    "$numberLong": "624"
  },
  "type": "STDIO",
  "url": "https://github.com/anpigon/mcp-server-obsidian-omnisearch",
  "stars": 15,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "obsidian-omnisearch",
    "description": "This server, built with FastMCP, exposes an Obsidian vault search functionality through a REST API, allowing programmatic queries of Obsidian notes using the Omnisearch plugin and returning absolute paths to matching notes.",
    "command": "uvx",
    "args": [
      "mcp-server-obsidian-omnisearch",
      "/path/to/your/obsidian/vault"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:13.923Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:06:55.521Z"
  },
  "tags": [
    "obsidian omnisearch",
    "obsidian",
    "omnisearch"
  ]
},
{
  "_id": {
    "$oid": "68289b20a6f8dc721ceb44e6"
  },
  "seq": {
    "$numberLong": "625"
  },
  "type": "STDIO",
  "url": "https://github.com/ZeparHyfar/mcp-datetime",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-datetime",
    "description": "This MCP server, written in Python, provides a `get_datetime` tool that formats the current date and time into various string representations, including standard, Japanese, and filename-optimized formats, for seamless integration with the Claude Desktop Application using stdio.",
    "command": "uvx",
    "args": [
      "mcp-datetime"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:16.973Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:07:47.303Z"
  },
  "tags": [
    "datetime",
    "date time"
  ]
},
{
  "_id": {
    "$oid": "68289b22a6f8dc721ceb44e8"
  },
  "seq": {
    "$numberLong": "626"
  },
  "type": "STDIO",
  "url": "https://github.com/PyneSys/claude_autoapprove_mcp",
  "stars": 14,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "claude-autoapprove-mcp",
    "description": "This MCP server restarts the Claude Desktop application with a debugger port enabled and injects JavaScript to provide granular control over tool approval, leveraging the `claude-autoapprove` library; it uses the Electron remote debugging port and allows configuration of auto-approved and auto-blocked tools via the `claude_desktop_config.json` file.",
    "command": "uvx",
    "args": [
      "claude-autoapprove-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:18.918Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:07:49.830Z"
  },
  "tags": [
    "claude autoapprove",
    "claude",
    "autoapprove",
    "auto approve"
  ]
},
{
  "_id": {
    "$oid": "68289b28a6f8dc721ceb44ea"
  },
  "seq": {
    "$numberLong": "627"
  },
  "type": "STDIO",
  "url": "https://github.com/jkawamoto/mcp-bear",
  "stars": 13,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "youtube-transcript",
    "description": "This MCP server implements a Model Context Protocol interface for interacting with the Bear note-taking application, utilizing Bear's X-callback-url scheme; it integrates with applications like Goose CLI/Desktop and Claude Desktop via `uvx` to enable actions such as opening notes, creating notes, retrieving tags, and performing searches within Bear.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/jkawamoto/mcp-bear",
      "mcp-bear",
      "--token",
      "<YOUR_TOKEN>"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:24.624Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:07:51.712Z"
  },
  "tags": [
    "youtube transcript",
    "youtube",
    "transcript"
  ]
},
{
  "_id": {
    "$oid": "68289b2aa6f8dc721ceb44ec"
  },
  "seq": {
    "$numberLong": "628"
  },
  "type": "STDIO",
  "url": "https://github.com/atla-ai/atla-mcp-server",
  "stars": 13,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "atla-mcp-server",
    "description": "The Atla MCP server implements the Model Context Protocol to provide LLM evaluation capabilities using the Atla API, offering tools to score and critique LLM responses based on specified criteria; it integrates with OpenAI Agents SDK, Claude Desktop, and Cursor via command-line execution and configuration files, utilizing `uvx` for server management and requiring an Atla API key.",
    "command": "uvx",
    "args": [
      "atla-mcp-server"
    ],
    "env": {
      "ATLA_API_KEY": "<your-atla-api-key>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:26.408Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:07:53.688Z"
  },
  "tags": [
    "atla",
    "atla"
  ]
},
{
  "_id": {
    "$oid": "68289b2ba6f8dc721ceb44ee"
  },
  "seq": {
    "$numberLong": "629"
  },
  "type": "STDIO",
  "url": "https://github.com/abhishekbhakat/airflow-mcp-server",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "airflow-mcp-server",
    "description": "This MCP server implementation controls Airflow by leveraging Airflow APIs, communicating using the Model Context Protocol, and authenticating with JWT tokens. It supports both read-only (safe) and full-access (unsafe) operation modes, fetching the OpenAPI spec and page limit from Airflow's configuration.",
    "command": "uvx",
    "args": [
      "airflow-mcp-server",
      "--base-url",
      "http://localhost:8080",
      "--auth-token",
      "<jwt_token>"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:27.736Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:07:57.029Z"
  },
  "tags": [
    "airflow",
    "airflow"
  ]
},
{
  "_id": {
    "$oid": "68289b2ca6f8dc721ceb44f0"
  },
  "seq": {
    "$numberLong": "630"
  },
  "type": "STDIO",
  "url": "https://github.com/tomekkorbak/strava-mcp-server",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "strava",
    "description": "This MCP server enables language models to query athlete activity data from the Strava API using HTTP requests, providing tools to retrieve activities by date range, ID, or recency; it requires Strava API authentication using client ID, client secret, and refresh token to access and format activity data.",
    "command": "uvx",
    "args": [
      "strava-mcp-server"
    ],
    "env": {
      "STRAVA_CLIENT_SECRET": "YOUR_CLIENT_SECRET",
      "STRAVA_CLIENT_ID": "YOUR_CLIENT_ID",
      "STRAVA_REFRESH_TOKEN": "YOUR_REFRESH_TOKEN"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:28.370Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:08:48.753Z"
  },
  "tags": [
    "strava"
  ]
},
{
  "_id": {
    "$oid": "68289b2ea6f8dc721ceb44f2"
  },
  "seq": {
    "$numberLong": "631"
  },
  "type": "STDIO",
  "url": "https://github.com/loonghao/shotgrid-mcp-server",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "shotgrid-server",
    "description": "This Python-based ShotGrid MCP server implements the Model Context Protocol using fastmcp, providing CRUD operations, thumbnail management, and direct ShotGrid API access via environment variables for integrations with tools like Claude and VS Code through UV and standard ShotGrid authentication.",
    "command": "uvx",
    "args": [
      "--python",
      "3.10",
      "shotgrid-mcp-server"
    ],
    "env": {
      "SHOTGRID_SCRIPT_NAME": "XXX",
      "SHOTGRID_SCRIPT_KEY": "XX",
      "SHOTGRID_URL": "XXXX"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:30.378Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:08:51.324Z"
  },
  "tags": [
    "shotgrid",
    "shot grid"
  ]
},
{
  "_id": {
    "$oid": "68289b2fa6f8dc721ceb44f4"
  },
  "seq": {
    "$numberLong": "632"
  },
  "type": "STDIO",
  "url": "https://github.com/ecovacs-ai/ecovacs-mcp",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ecovacs_mcp",
    "description": "The Ecovacs MCP Server implements the Media Control Protocol to enable developers to integrate Ecovacs robot vacuum control functionalities, such as querying device lists, starting/pausing/stopping cleaning, initiating/stopping charging, and retrieving robot status, into large language models, using HTTP requests and JSON responses with an API key for authentication.",
    "command": "uvx",
    "args": [
      "ecovacs-robot-mcp"
    ],
    "env": {
      "ECO_API_KEY": "your AK...........",
      "ECO_API_URL": "https://open.ecovacs.cn"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:31.629Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:08:53.418Z"
  },
  "tags": [
    "ecovacs"
  ]
},
{
  "_id": {
    "$oid": "68289b30a6f8dc721ceb44f6"
  },
  "seq": {
    "$numberLong": "633"
  },
  "type": "STDIO",
  "url": "https://github.com/SkyworkAI/Mureka-mcp",
  "stars": 12,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "Mureka",
    "description": "The Mureka Model Context Protocol (MCP) server provides an interface for AI agents like Claude and OpenAI Agents to interact with the Mureka API for generating lyrics, songs, and background music, utilizing API keys and environment variables for configuration.",
    "command": "uvx",
    "args": [
      "mureka-mcp"
    ],
    "env": {
      "MUREKA_API_KEY": "<insert-your-api-key-here>",
      "MUREKA_API_URL": "https://api.mureka.ai",
      "TIME_OUT_SECONDS": "300"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:32.571Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:08:55.371Z"
  },
  "tags": [
    "mureka"
  ]
},
{
  "_id": {
    "$oid": "68289b31a6f8dc721ceb44f8"
  },
  "seq": {
    "$numberLong": "634"
  },
  "type": "STDIO",
  "url": "https://github.com/toolhouse-community/mcp-server-toolhouse",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-toolhouse",
    "description": "This MCP server implementation connects MCP clients to Toolhouse's tool ecosystem, utilizing the Model Context Protocol for integration and Groq's API for fast inference; it allows clients like Claude to access a library of tools available through Toolhouse, configured via an API key and a specified bundle.",
    "command": "uvx",
    "args": [
      "mcp_server_toolhouse"
    ],
    "env": {
      "TOOLHOUSE_BUNDLE": "a_bundle_name",
      "TOOLHOUSE_API_KEY": "your_toolhouse_api_key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:33.229Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:08:58.670Z"
  },
  "tags": [
    "toolhouse",
    "tool house",
    "tool",
    "house"
  ]
},
{
  "_id": {
    "$oid": "68289b32a6f8dc721ceb44fa"
  },
  "seq": {
    "$numberLong": "635"
  },
  "type": "STDIO",
  "url": "https://github.com/qiniu/qiniu-mcp-server",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "qiniu",
    "description": "The Qiniu MCP Server enables AI large language model clients to access Qiniu Cloud storage, intelligent multimedia services, and CDN functionalities via the Model Context Protocol (MCP) using Python, and integrates with Cline plugin in VS Code. It supports operations such as bucket and file listing, file uploading and downloading, image processing, and CDN cache management, utilizing technologies like S3/Kodo for storage access and uv for package management.",
    "command": "uvx",
    "args": [
      "qiniu-mcp-server"
    ],
    "env": {
      "QINIU_SECRET_KEY": "YOUR_SECRET_KEY",
      "QINIU_BUCKETS": "YOUR_BUCKET_A,YOUR_BUCKET_B",
      "QINIU_REGION_NAME": "YOUR_REGION_NAME",
      "QINIU_ACCESS_KEY": "YOUR_ACCESS_KEY",
      "QINIU_ENDPOINT_URL": "YOUR_ENDPOINT_URL"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:34.265Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:09:50.641Z"
  },
  "tags": [
    "qiniu"
  ]
},
{
  "_id": {
    "$oid": "68289b32a6f8dc721ceb44fc"
  },
  "seq": {
    "$numberLong": "636"
  },
  "type": "STDIO",
  "url": "https://github.com/Funmula-Corp/BigGo-MCP-Server",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "biggo-mcp-server",
    "description": "The BigGo MCP Server integrates with the BigGo price comparison website to provide product search and price history tracking functionalities via stdio or SSE transports, leveraging BigGo's APIs and Elasticsearch for product specification searches.",
    "command": "uvx",
    "args": [
      "BigGo-MCP-Server@latest"
    ],
    "env": {
      "BIGGO_MCP_SERVER_REGION": "REGION",
      "BIGGO_MCP_SERVER_CLIENT_ID": "CLIENT_ID",
      "BIGGO_MCP_SERVER_CLIENT_SECRET": "CLIENT_SECRET"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:34.966Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:09:52.807Z"
  },
  "tags": [
    "biggo",
    "big go",
    "biggo"
  ]
},
{
  "_id": {
    "$oid": "68289b35a6f8dc721ceb44fe"
  },
  "seq": {
    "$numberLong": "637"
  },
  "type": "STDIO",
  "url": "https://github.com/johnhuang316/code-index-mcp",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "code-index",
    "description": "This MCP server implements code indexing and analysis, enabling LLMs to search code, find files, and get file summaries within a project, utilizing the Model Context Protocol (MCP) and integrating with Claude Desktop via a JSON configuration; it supports multiple programming languages and installs with uv or pip.",
    "command": "uvx",
    "args": [
      "code-index-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:37.040Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:09:55.067Z"
  },
  "tags": [
    "code index",
    "code",
    "index"
  ]
},
{
  "_id": {
    "$oid": "68289b36a6f8dc721ceb4500"
  },
  "seq": {
    "$numberLong": "638"
  },
  "type": "STDIO",
  "url": "https://github.com/Chakra-Network/mcp-server",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "chakra",
    "description": "The Chakra MCP Server implements Anthropic's Model Context Protocol (MCP), enabling natural language interaction with databases and subscribed data shares through Claude Desktop; it uses Python and requires a DB Session Key for authentication.",
    "command": "uvx",
    "args": [
      "chakra-mcp"
    ],
    "env": {
      "db_session_key": "YOUR_DB_SESSION_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:38.381Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:09:56.903Z"
  },
  "tags": [
    "chakra"
  ]
},
{
  "_id": {
    "$oid": "68289b3aa6f8dc721ceb4502"
  },
  "seq": {
    "$numberLong": "639"
  },
  "type": "STDIO",
  "url": "https://github.com/caiyunapp/mcp-caiyun-weather",
  "stars": 11,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "caiyun-weather",
    "description": "This MCP server implements a weather data provider that integrates with the Caiyun Weather API to provide real-time weather, hourly forecasts, weekly forecasts, historical data, and weather alerts based on geographic coordinates; it utilizes `uv` or `uvx` for package and environment management, and exposes these functionalities as tools usable by Claude or other MCP-compatible agents.",
    "command": "uvx",
    "args": [
      "mcp-caiyun-weather"
    ],
    "env": {
      "CAIYUN_WEATHER_API_TOKEN": "YOUR_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:42.015Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:39:47.190Z"
  },
  "tags": [
    "caiyun weather",
    "caiyun",
    "weather"
  ]
},
{
  "_id": {
    "$oid": "68289b40a6f8dc721ceb4504"
  },
  "seq": {
    "$numberLong": "640"
  },
  "type": "STDIO",
  "url": "https://github.com/madtank/nova-act-mcp",
  "stars": 10,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "nova_act_browser_tools",
    "description": "This server implements the Model Context Protocol (MCP) to provide AI agents with access to Amazon Nova Act browser-automation tools, enabling them to interact with web pages through natural language instructions; it integrates with Nova Act using its API key and offers functionalities like starting/ending sessions, executing instructions, and capturing browser state.",
    "command": "uvx",
    "args": [
      "nova-act-mcp-server"
    ],
    "env": {
      "NOVA_ACT_API_KEY": "YOUR_NOVA_ACT_API_KEY_HERE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:48.924Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:10:52.547Z"
  },
  "tags": [
    "nova",
    "act",
    "browser tools",
    "browser",
    "tools",
    "act browser tools"
  ]
},
{
  "_id": {
    "$oid": "68289b42a6f8dc721ceb4506"
  },
  "seq": {
    "$numberLong": "641"
  },
  "type": "STDIO",
  "url": "https://github.com/hdcola/mcp-server-oracle",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-oracle",
    "description": "This MCP server implementation provides access to Oracle databases by utilizing the Model Context Protocol over a connection string and integrates with the Claude Desktop application for interaction.",
    "command": "uvx",
    "args": [
      "mcp-server-oracle"
    ],
    "env": {
      "ORACLE_CONNECTION_STRING": "username/password@hostname:port/service_name"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:20:50.154Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:10:54.216Z"
  },
  "tags": [
    "oracle"
  ]
},
{
  "_id": {
    "$oid": "68289b46a6f8dc721ceb4508"
  },
  "seq": {
    "$numberLong": "642"
  },
  "type": "STDIO",
  "url": "https://github.com/SecretiveShell/mcp-windows",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "windows",
    "description": "This MCP server implementation provides Windows API access through the MCP protocol, enabling media control, notification management, window manipulation, screenshot capture, monitor power control, theme management, start menu interactions, and clipboard access. It uses the `uvx` or `uv` command-line interface for integration.",
    "command": "uvx",
    "args": [
      "mcp-windows"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:54.700Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:10:56.577Z"
  },
  "tags": [
    "windows"
  ]
},
{
  "_id": {
    "$oid": "68289b48a6f8dc721ceb450a"
  },
  "seq": {
    "$numberLong": "643"
  },
  "type": "STDIO",
  "url": "https://github.com/preludeorg/windows-rs-mcp",
  "stars": 9,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "windows-docs",
    "description": "This MCP server implements a search tool for the Rust `windows` crate API documentation, using Playwright to interact with the microsoft.github.io/windows-docs-rs website and retrieve documentation and related API items based on search queries.",
    "command": "uvx",
    "args": [
      "windows-rs-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:56.807Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:10:58.369Z"
  },
  "tags": [
    "windows docs",
    "windows",
    "docs",
    "windows-docs"
  ]
},
{
  "_id": {
    "$oid": "68289b4ba6f8dc721ceb450c"
  },
  "seq": {
    "$numberLong": "644"
  },
  "type": "STDIO",
  "url": "https://github.com/the0807/GeekNews-MCP-Server",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "geeknews-mcp-server",
    "description": "The GeekNews MCP server, implemented in Python, scrapes articles and weekly news from GeekNews using BeautifulSoup and provides them via the Model Context Protocol (MCP). It leverages a caching mechanism with scheduled updates to reduce server load and serves data including titles, URLs, authors, and comments.",
    "command": "npx",
    "args": [
      "-y",
      "@smithery/cli@latest",
      "run",
      "@the0807/geeknews-mcp-server",
      "--key",
      "smithery에서 발급 받은 키"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:20:59.268Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:11:02.030Z"
  },
  "tags": [
    "geeknews",
    "geek news",
    "geek",
    "news"
  ]
},
{
  "_id": {
    "$oid": "68289b4ea6f8dc721ceb450e"
  },
  "seq": {
    "$numberLong": "645"
  },
  "type": "STDIO",
  "url": "https://github.com/ai-zerolab/yourware-mcp",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "yourware-mcp",
    "description": "This MCP server implementation uploads projects to Yourware using the Yourware API, supporting both single files and directories; it integrates with development tools like Cursor and Claude Code via the `uvx` command and leverages the `YOURWARE_API_KEY` environment variable for authentication.",
    "command": "uvx",
    "args": [
      "yourware-mcp@latest",
      "stdio"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:02.228Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:11:54.273Z"
  },
  "tags": [
    "yourware",
    "your ware",
    "ware"
  ]
},
{
  "_id": {
    "$oid": "68289b55a6f8dc721ceb4510"
  },
  "seq": {
    "$numberLong": "646"
  },
  "type": "STDIO",
  "url": "https://github.com/eka-care/eka_mcp_server",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "eka-mcp-server",
    "description": "The Eka MCP server provides structured access to curated Indian medical knowledge-bases via the Model Context Protocol, enabling LLMs to ground responses in factual healthcare information; it integrates Indian Branded Drug Search, utilizing over 500,000 drugs, and Indian Treatment Protocol Search, accessing over 180 ICMR and RSSDI protocol documents via the Eka Care API.",
    "command": "uvx",
    "args": [
      "eka_mcp_server",
      "--eka-api-host",
      "https://api.eka.care",
      "--client-id",
      "<client_id>",
      "--client-secret",
      "<client_secret>"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:09.736Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:11:56.166Z"
  },
  "tags": [
    "eka",
    "eka"
  ]
},
{
  "_id": {
    "$oid": "68289b56a6f8dc721ceb4512"
  },
  "seq": {
    "$numberLong": "647"
  },
  "type": "STDIO",
  "url": "https://github.com/erikhoward/azure-fhir-mcp-server",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "fhir",
    "description": "This MCP server implementation provides a standardized interface for interacting with Azure Health Data Services FHIR servers using the Model Context Protocol, offering tools like FHIR resource search and access to standard FHIR resources via `fhir://` URLs; it authenticates with Azure FHIR using OAuth2, requiring client ID, client secret, and tenant ID.",
    "command": "uvx",
    "args": [
      "azure-fhir-mcp-server"
    ],
    "env": {
      "clientId": "your-client-id",
      "fhirUrl": "https://your-fhir-server.azurehealthcareapis.com/fhir",
      "tenantId": "your-tenant-id",
      "clientSecret": "your-client-secret",
      "LOG_LEVEL": "INFO"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:21:10.658Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:11:58.266Z"
  },
  "tags": [
    "fhir"
  ]
},
{
  "_id": {
    "$oid": "68289b59a6f8dc721ceb4514"
  },
  "seq": {
    "$numberLong": "648"
  },
  "type": "STDIO",
  "url": "https://github.com/Nazruden/mcp-openvision",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "openvision",
    "description": "MCP OpenVision is a Model Context Protocol (MCP) server that utilizes OpenRouter's vision models to provide image analysis capabilities, accepting image data as Base64 strings, URLs, or file paths; it integrates with AI assistants like Claude Desktop via MCP configuration and offers an `image_analysis` tool with configurable parameters for query, system prompt, model selection, and output control.",
    "command": "uvx",
    "args": [
      "mcp-openvision"
    ],
    "env": {
      "OPENROUTER_DEFAULT_MODEL": "anthropic/claude-3-sonnet",
      "OPENROUTER_API_KEY": "your_openrouter_api_key_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:21:13.220Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:12:00.122Z"
  },
  "tags": [
    "openvision",
    "open",
    "vision"
  ]
},
{
  "_id": {
    "$oid": "68289b5aa6f8dc721ceb4516"
  },
  "seq": {
    "$numberLong": "649"
  },
  "type": "STDIO",
  "url": "https://github.com/AB498/computer-control-mcp",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "computer-control-mcp",
    "description": "This MCP server provides computer control capabilities by using PyAutoGUI for mouse and keyboard automation, RapidOCR and ONNXRuntime for optical character recognition, and enables actions such as clicking, typing, taking screenshots, listing/activating windows, and performing drag-and-drop operations.",
    "command": "uvx",
    "args": [
      "computer-control-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:14.753Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:12:03.734Z"
  },
  "tags": [
    "computer control",
    "computer",
    "control"
  ]
},
{
  "_id": {
    "$oid": "68289b5ca6f8dc721ceb4518"
  },
  "seq": {
    "$numberLong": "650"
  },
  "type": "STDIO",
  "url": "https://github.com/yangkyeongmo/mcp-server-openmetadata",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-server-openmetadata",
    "description": "This MCP server acts as a wrapper around OpenMetadata's REST API, enabling MCP clients to interact with OpenMetadata through the Model Context Protocol; currently, it supports listing, getting, creating, updating, and deleting tables via OpenMetadata's `/api/v1/tables` endpoint.",
    "command": "uvx",
    "args": [
      "mcp-server-openmetadata"
    ],
    "env": {
      "OPENMETADATA_HOST": "https://your-openmetadata-host",
      "OPENMETADATA_JWT_TOKEN": "your-jwt-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:21:16.650Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:12:55.943Z"
  },
  "tags": [
    "openmetadata",
    "open metadata",
    "open",
    "metadata"
  ]
},
{
  "_id": {
    "$oid": "68289b5ea6f8dc721ceb451a"
  },
  "seq": {
    "$numberLong": "651"
  },
  "type": "STDIO",
  "url": "https://github.com/Evilran/baidu-mcp-server",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "baidu-search",
    "description": "This MCP server provides web search capabilities by querying Baidu, fetching and parsing webpage content, and formatting the results for use with large language models; it implements rate limiting and error handling to ensure stable operation, and integrates with Claude Desktop via JSON configuration.",
    "command": "uvx",
    "args": [
      "baidu-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:18.173Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:12:57.813Z"
  },
  "tags": [
    "baidu search",
    "baidu",
    "search"
  ]
},
{
  "_id": {
    "$oid": "68289b60a6f8dc721ceb451c"
  },
  "seq": {
    "$numberLong": "652"
  },
  "type": "STDIO",
  "url": "https://github.com/punkpeye/wikimedia",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "wikimedia",
    "description": "The Wikimedia MCP server enables programmatic access to Wikimedia content through natural language queries, utilizing the Model Context Protocol (MCP) to search content and titles, retrieve pages and their language versions, and fetch featured content and historical events; it interacts with Wikimedia APIs using Python 3.12+ and the uv package manager.",
    "command": "uvx",
    "args": [
      "wikimedia"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:20.206Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:12:59.798Z"
  },
  "tags": [
    "wikimedia"
  ]
},
{
  "_id": {
    "$oid": "68289b62a6f8dc721ceb451e"
  },
  "seq": {
    "$numberLong": "653"
  },
  "type": "STDIO",
  "url": "https://github.com/putdotio/putio-mcp-server",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "putio",
    "description": "This MCP server implementation allows users to manage put.io transfers through the Model Context Protocol, enabling actions such as listing, adding, and canceling transfers, and retrieving browser links using the put.io API with a provided API token.",
    "command": "uvx",
    "args": [
      "putio-mcp-server"
    ],
    "env": {
      "PUTIO_TOKEN": "<your-putio-api-token>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:21:22.626Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:13:01.540Z"
  },
  "tags": [
    "putio"
  ]
},
{
  "_id": {
    "$oid": "68289b68a6f8dc721ceb4520"
  },
  "seq": {
    "$numberLong": "654"
  },
  "type": "STDIO",
  "url": "https://github.com/AgentWong/optimized-memory-mcp-server",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "memory",
    "description": "This Python MCP server implements a persistent knowledge graph using SQLite to enable memory capabilities for AI models, featuring API endpoints to create entities, relations, and observations, as well as to search and retrieve graph data, and it integrates with Claude via Docker or NPX configurations using the Model Context Protocol.",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-memory"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:28.988Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:39:48.851Z"
  },
  "tags": [
    "memory"
  ]
},
{
  "_id": {
    "$oid": "68289b69a6f8dc721ceb4522"
  },
  "seq": {
    "$numberLong": "655"
  },
  "type": "STDIO",
  "url": "https://github.com/phil65/mcp-server-llmling",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "llmling",
    "description": "This MCP server implementation, built with LLMLing, provides a YAML-based configuration system for LLM applications, enabling static declaration of LLM environments using resources, prompts, and tools; it communicates using the Machine Chat Protocol (MCP) and supports transports like Stdio and Server-Sent Events (SSE).",
    "command": "uvx",
    "args": [
      "mcp-server-llmling",
      "start",
      "path/to/your/config.yml"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:29.650Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:13:57.793Z"
  },
  "tags": [
    "llmling",
    "llm",
    "ling"
  ]
},
{
  "_id": {
    "$oid": "68289b6aa6f8dc721ceb4524"
  },
  "seq": {
    "$numberLong": "656"
  },
  "type": "STDIO",
  "url": "https://github.com/qinyuanpei/mcp-server-weibo",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "weibo",
    "description": "This MCP server implementation retrieves user information, feeds, and search results from Weibo using the Model Context Protocol. It utilizes Python and the httpx library to access Weibo data.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/qinyuanpei/mcp-server-weibo.git",
      "mcp-server-weibo"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:30.922Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:13:59.202Z"
  },
  "tags": [
    "weibo"
  ]
},
{
  "_id": {
    "$oid": "68289b6ca6f8dc721ceb4526"
  },
  "seq": {
    "$numberLong": "657"
  },
  "type": "STDIO",
  "url": "https://github.com/non-dirty/mcp-server-restart",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-installer",
    "description": "This MCP server implements a tool that restarts the Claude Desktop application on macOS by responding to MCP requests, using `claude://status` to provide status updates in JSON format and the `restart_claude` tool to safely terminate and relaunch the application.",
    "command": "npx",
    "args": [
      "@anaisbetts/mcp-installer"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:32.817Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:14:01.370Z"
  },
  "tags": [
    "installer"
  ]
},
{
  "_id": {
    "$oid": "68289b6da6f8dc721ceb4528"
  },
  "seq": {
    "$numberLong": "658"
  },
  "type": "STDIO",
  "url": "https://github.com/hetaoBackend/mcp-github-trending",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-github-trending",
    "description": "This MCP server, implemented in Python, provides access to GitHub's trending repositories and developers data via a JSON API; it allows filtering by programming language, time period, and spoken language using the `get_github_trending_repositories` and `get_github_trending_developers` tools.",
    "command": "uvx",
    "args": [
      "mcp-github-trending"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:33.729Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:14:03.129Z"
  },
  "tags": [
    "github trending",
    "github",
    "trending",
    "github-trending"
  ]
},
{
  "_id": {
    "$oid": "68289b71a6f8dc721ceb452a"
  },
  "seq": {
    "$numberLong": "659"
  },
  "type": "STDIO",
  "url": "https://github.com/piebro/vlc-mcp-server",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "The VLC MCP server allows remote control of the VLC media player using the Model Context Protocol (MCP), enabling clients to play videos; it interfaces with VLC's HTTP interface and leverages technologies like `uv` for execution and supports configuration via environment variables, facilitating integration with MCP clients like `signal-mcp-client`.",
    "command": "uvx",
    "args": [
      "vlc-mcp-server"
    ],
    "env": {
      "VLC_HTTP_PASSWORD": "your_password",
      "ROOT_VIDEO_FOLDER": "path/to/your/video/folder",
      "VLC_HTTP_HOST": "localhost",
      "VLC_HTTP_PORT": "8081"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:21:37.167Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:14:07.146Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "68289b73a6f8dc721ceb452c"
  },
  "seq": {
    "$numberLong": "660"
  },
  "type": "STDIO",
  "url": "https://github.com/coreshub/mcp-server-coreshub",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "coreshub-mcp-server",
    "description": "The Coreshub MCP server provides tools and prompts for interacting with Coreshub's services, utilizing Python and integrating with Cherry Studio via stdio, and it exposes functionality like retrieving EPFS filesystem information, billing details, container instances, SSH access, distributed training tasks, and inference service logs, using environment variables for authentication.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/coreshub/mcp-server-coreshub",
      "coreshub-mcp-server"
    ],
    "env": {
      "QY_ACCESS_KEY_ID": "基石智算的AK",
      "CORESHUB_USER_ID": "基石智算的账户ID",
      "QY_SECRET_ACCESS_KEY": "基石智算的SK"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:21:39.172Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:14:59.608Z"
  },
  "tags": [
    "coreshub",
    "core hub",
    "core",
    "hub"
  ]
},
{
  "_id": {
    "$oid": "68289b79a6f8dc721ceb452e"
  },
  "seq": {
    "$numberLong": "661"
  },
  "type": "STDIO",
  "url": "https://github.com/norman-finance/norman-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "norman-mcp-server",
    "description": "The Norman Finance MCP Server exposes the Norman Finance API through the Model Context Protocol (MCP), enabling AI applications like Claude to access and manage accounting, invoicing, client, and tax data; it authenticates via OAuth 2.0 for SSE transport or environment variables for stdio, and integrates with Claude via a specified URL.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "https://mcp.norman.finance/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:45.279Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:15:01.379Z"
  },
  "tags": [
    "norman",
    "norman"
  ]
},
{
  "_id": {
    "$oid": "68289b7ba6f8dc721ceb4530"
  },
  "seq": {
    "$numberLong": "662"
  },
  "type": "STDIO",
  "url": "https://github.com/burakdirin/mysqldb-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mysqldb-mcp-server",
    "description": "This MCP server implementation provides tools to connect to a MySQL database using environment variables for configuration and execute SQL queries, returning the results in JSON format; it integrates with Claude Desktop and can be installed and debugged using Smithery and the MCP Inspector, respectively.",
    "command": "uvx",
    "args": [
      "mysqldb-mcp-server"
    ],
    "env": {
      "MYSQL_DATABASE": "[optional]",
      "MYSQL_PASSWORD": "password",
      "MYSQL_USER": "root",
      "MYSQL_READONLY": "true",
      "MYSQL_HOST": "localhost"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:21:47.812Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:39:50.554Z"
  },
  "tags": [
    "mysqldb",
    "mysql db",
    "mysql",
    "db"
  ]
},
{
  "_id": {
    "$oid": "68289b7ca6f8dc721ceb4532"
  },
  "seq": {
    "$numberLong": "663"
  },
  "type": "STDIO",
  "url": "https://github.com/jhgaylor/hirebase-mcp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "hirebase",
    "description": "The HireBase MCP server provides tools and prompts that interact with the HireBase Job API via HTTP requests; it enables job searching, job retrieval, and candidate profile generation leveraging the Model Context Protocol.",
    "command": "uvx",
    "args": [
      "hirebase-mcp"
    ],
    "env": {
      "HIREBASE_API_KEY": ""
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:21:48.472Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:15:04.770Z"
  },
  "tags": [
    "hirebase",
    "hire base",
    "hire",
    "base"
  ]
},
{
  "_id": {
    "$oid": "68289b81a6f8dc721ceb4534"
  },
  "seq": {
    "$numberLong": "664"
  },
  "type": "STDIO",
  "url": "https://github.com/zen4ever/steampipe-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "steampipe",
    "description": "This MCP server enables querying and schema discovery on PostgreSQL databases primarily used by Steampipe, exposing tools via the MCP protocol to run read-only SQL queries, list tables, and retrieve table schemas, leveraging a database URL passed as an argument or environment variable.",
    "command": "uvx",
    "args": [
      "steampipe-mcp-server",
      "--database-url",
      "postgresql://steampipe:password@localhost:9193/steampipe"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:53.041Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:15:08.829Z"
  },
  "tags": [
    "steampipe"
  ]
},
{
  "_id": {
    "$oid": "68289b83a6f8dc721ceb4536"
  },
  "seq": {
    "$numberLong": "665"
  },
  "type": "STDIO",
  "url": "https://github.com/narumiruna/mcp-server-template",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcpservertemplate",
    "description": "The mcp-server-template provides a server implementation that can be deployed from GitHub, PyPI, or a local directory using the 'uvx' or 'uv' command-line tools, enabling flexible installation and execution.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/narumiruna/mcp-server-template",
      "mcpservertemplate"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:55.157Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:16:01.110Z"
  },
  "tags": [
    "template"
  ]
},
{
  "_id": {
    "$oid": "68289b83a6f8dc721ceb4538"
  },
  "seq": {
    "$numberLong": "666"
  },
  "type": "STDIO",
  "url": "https://github.com/PritamPatil2603/upstage-mcp-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "upstage-mcp-server",
    "description": "The Upstage MCP Server acts as a bridge between AI models like Claude and Upstage AI's document processing APIs, allowing document digitization and information extraction from various formats using the Model Context Protocol with support for integration with Claude Desktop; it leverages the Astral UV tool to execute the server.",
    "command": "uvx",
    "args": [
      "upstage-mcp-server"
    ],
    "env": {
      "UPSTAGE_API_KEY": "<your-api-key>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:21:55.816Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:16:03.149Z"
  },
  "tags": [
    "upstage",
    "upstage"
  ]
},
{
  "_id": {
    "$oid": "68289b85a6f8dc721ceb453a"
  },
  "seq": {
    "$numberLong": "667"
  },
  "type": "STDIO",
  "url": "https://github.com/dragons96/mcp-undetected-chromedriver",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-undetected-chromedriver",
    "description": "This MCP server implements automated Chrome browser control using undetected-chromedriver to bypass anti-bot detection, offering APIs over the MCP protocol for actions like navigation, screenshots, clicks, form filling, and JavaScript execution; it integrates with the Smithery platform and uses Python, facilitating web scraping and automated testing.",
    "command": "npx",
    "args": [
      "-y",
      "@smithery/cli@latest",
      "run",
      "@dragons96/mcp-undetected-chromedriver",
      "--config",
      "{}"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:57.648Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:16:04.827Z"
  },
  "tags": [
    "undetected chromedriver",
    "undetected",
    "chromedriver",
    "chrome driver",
    "chrome",
    "driver"
  ]
},
{
  "_id": {
    "$oid": "68289b86a6f8dc721ceb453c"
  },
  "seq": {
    "$numberLong": "668"
  },
  "type": "STDIO",
  "url": "https://github.com/cdpath/mcp-server-chatgpt-app",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "chatgpt",
    "description": "This MCP server implementation integrates with the ChatGPT macOS app using shortcuts and the `uvx` command to facilitate communication, enabling applications like Cursor and Chatwise to interact with ChatGPT through a standard input/output interface.",
    "command": "uvx",
    "args": [
      "mcp-server-chatgpt-app"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:21:58.679Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:16:06.322Z"
  },
  "tags": [
    "chatgpt",
    "chat",
    "gpt"
  ]
},
{
  "_id": {
    "$oid": "68289b88a6f8dc721ceb453e"
  },
  "seq": {
    "$numberLong": "669"
  },
  "type": "STDIO",
  "url": "https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-server",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "HackerNews",
    "description": "This MCP SSH server provides secure remote access to MCP tool providers by establishing an SSH tunnel and proxying requests, while supporting key-based authentication and an optional HTTP API for key management; it uses JSON for dynamic configuration and is compatible with MCP features such as prompts, resources, tools, and logging.",
    "command": "uvx",
    "args": [
      "mcp-hn"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:22:00.372Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:16:10.410Z"
  },
  "tags": [
    "hackernews",
    "hacker",
    "news"
  ]
},
{
  "_id": {
    "$oid": "68289b89a6f8dc721ceb4540"
  },
  "seq": {
    "$numberLong": "670"
  },
  "type": "STDIO",
  "url": "https://github.com/Flyworks-AI/flyworks-mcp",
  "stars": 4,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "flyworks",
    "description": "The Flyworks MCP server implements the Model Context Protocol (MCP) to provide lipsync video creation by leveraging the Flyworks API, enabling digital avatars to speak from audio input or text via text-to-speech; it supports both synchronous and asynchronous operation modes and integrates with tools like Claude and Cursor.",
    "command": "uvx",
    "args": [
      "flyworks-mcp",
      "-y"
    ],
    "env": {
      "FLYWORKS_MCP_BASE_PATH": "/path/to/your/output/directory",
      "FLYWORKS_API_BASE_URL": "https://hfw-api.hifly.cc/api/v2/hifly",
      "FLYWORKS_API_TOKEN": "your_api_token_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:22:01.065Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:17:02.829Z"
  },
  "tags": [
    "flyworks",
    "fly",
    "works"
  ]
},
{
  "_id": {
    "$oid": "68289b90a6f8dc721ceb4542"
  },
  "seq": {
    "$numberLong": "671"
  },
  "type": "STDIO",
  "url": "https://github.com/caretdev/mcp-server-iris",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "iris",
    "description": "This MCP server implementation allows interaction and automation with an InterSystems IRIS database using the Model Context Protocol, facilitating communication between applications and the IRIS database via commands executed using `uvx` and configured environment variables for connection details.",
    "command": "uvx",
    "args": [
      "mcp-server-iris"
    ],
    "env": {
      "IRIS_PORT": "1972",
      "IRIS_PASSWORD": "SYS",
      "IRIS_HOSTNAME": "localhost",
      "IRIS_USERNAME": "_SYSTEM",
      "IRIS_NAMESPACE": "USER"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:22:08.501Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:17:04.683Z"
  },
  "tags": [
    "iris"
  ]
},
{
  "_id": {
    "$oid": "68289b92a6f8dc721ceb4544"
  },
  "seq": {
    "$numberLong": "672"
  },
  "type": "STDIO",
  "url": "https://github.com/wrale/mcp-server-make",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "make",
    "description": "This MCP server implementation exposes make functionality via the Model Context Protocol, allowing LLMs to execute specified make targets within a controlled environment; it integrates with tools like Claude and utilizes standard Makefile conventions for build automation.",
    "command": "uvx",
    "args": [
      "mcp-server-make",
      "--make-path",
      "/absolute/path/to/Makefile",
      "--working-dir",
      "/absolute/path/to/working/dir"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:22:10.238Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:17:06.425Z"
  },
  "tags": [
    "make"
  ]
},
{
  "_id": {
    "$oid": "68289b93a6f8dc721ceb4546"
  },
  "seq": {
    "$numberLong": "673"
  },
  "type": "STDIO",
  "url": "https://github.com/hygao1024/xingchen-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ifly-workflow-mcp-server",
    "description": "This iFlytek Workflow MCP server implementation facilitates the integration of iFlytek workflows with LLM applications using the Model Context Protocol (MCP); it supports various node types, orchestration modes (sequential, parallel, loop, nested), and streaming output, and it utilizes a config.yaml file to store workflow authentication information.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/iflytek/ifly-workflow-mcp-server",
      "ifly_workflow_mcp_server"
    ],
    "env": {
      "CONFIG_PATH": "$CONFIG_PATH"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:22:11.864Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:17:08.061Z"
  },
  "tags": [
    "ifly workflow",
    "ifly",
    "workflow"
  ]
},
{
  "_id": {
    "$oid": "68289b96a6f8dc721ceb4548"
  },
  "seq": {
    "$numberLong": "674"
  },
  "type": "STDIO",
  "url": "https://github.com/maxscheijen/mcp-yahoo-finance",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "yahoo-finance",
    "description": "This MCP server implementation retrieves financial data from Yahoo Finance, providing pricing and company information through the Model Context Protocol; it integrates with Claude Desktop and VSCode via command-line execution using tools like uvx and supports Docker deployment.",
    "command": "uvx",
    "args": [
      "mcp-yahoo-finance"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:22:14.484Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:17:11.937Z"
  },
  "tags": [
    "yahoo finance",
    "yahoo",
    "finance"
  ]
},
{
  "_id": {
    "$oid": "68289b9aa6f8dc721ceb454a"
  },
  "seq": {
    "$numberLong": "675"
  },
  "type": "STDIO",
  "url": "https://github.com/mugoosse/sitemap-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "sitemap",
    "description": "This MCP server implements a sitemap parser that fetches, analyzes, and visualizes website structures using sitemaps; it integrates with tools like Claude Desktop and Cursor via ready-to-use prompt templates and utilizes the Model Context Protocol for communication.",
    "command": "uvx",
    "args": [
      "sitemap-mcp-server"
    ],
    "env": {
      "TRANSPORT": "stdio"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:22:18.864Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:18:04.478Z"
  },
  "tags": [
    "sitemap"
  ]
},
{
  "_id": {
    "$oid": "68289b9ba6f8dc721ceb454c"
  },
  "seq": {
    "$numberLong": "676"
  },
  "type": "STDIO",
  "url": "https://github.com/AshDevFr/duckduckgo-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "duckduckgo",
    "description": "This Node.js server implements the Model Context Protocol (MCP) to provide DuckDuckGo web search functionality. It offers a 'search' tool via MCP, allowing integration with applications like Claude Desktop using UVX or Docker.",
    "command": "uvx",
    "args": [
      "ddg-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:22:19.842Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:18:06.127Z"
  },
  "tags": [
    "duckduckgo",
    "duck duck go",
    "duck",
    "go"
  ]
},
{
  "_id": {
    "$oid": "68289b9da6f8dc721ceb454e"
  },
  "seq": {
    "$numberLong": "677"
  },
  "type": "STDIO",
  "url": "https://github.com/sker65/testrail-mcp",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "testrail",
    "description": "This TestRail MCP server implements the Model Context Protocol, enabling interaction with TestRail entities like projects, cases, and runs via API authentication; it utilizes FastMCP, Requests, and python-dotenv for its framework, HTTP communication, and environment variable handling respectively, allowing integration with MCP clients like Claude Desktop and Cursor.",
    "command": "uvx",
    "args": [
      "testrail-mcp"
    ],
    "env": {
      "TESTRAIL_URL": "https://your-instance.testrail.io",
      "TESTRAIL_USERNAME": "your-email@example.com",
      "TESTRAIL_API_KEY": "your-api-key"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:22:21.398Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:18:08.010Z"
  },
  "tags": [
    "testrail",
    "test rail",
    "test",
    "rail"
  ]
},
{
  "_id": {
    "$oid": "68289ba1a6f8dc721ceb4550"
  },
  "seq": {
    "$numberLong": "678"
  },
  "type": "STDIO",
  "url": "https://github.com/neka-nat/mycobot-mcp",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mycobot",
    "description": "This MCP server implements a pick-and-place workflow for myCobot robots, using the DDS API for object detection from image feedback, and communicates using serial communication through a specified port and baud rate.",
    "command": "uvx",
    "args": [
      "mycobot-mcp",
      "--settings-path",
      "/path/to/settings.json"
    ],
    "env": {
      "DDS_API_TOKEN": "your-api-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:22:25.403Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:18:09.507Z"
  },
  "tags": [
    "mycobot"
  ]
},
{
  "_id": {
    "$oid": "68289ba5a6f8dc721ceb4552"
  },
  "seq": {
    "$numberLong": "679"
  },
  "type": "STDIO",
  "url": "https://github.com/tomekkorbak/voice-status-report-mcp-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "voice-status-report",
    "description": "This Model Context Protocol (MCP) server utilizes OpenAI's text-to-speech API to convert text into voice messages, enabling language models to communicate task updates and confirmations via audio using a `summarize` tool; it supports configuration with Claude and accepts command-line arguments for customizing voice, speed, and instructions.",
    "command": "uvx",
    "args": [
      "voice-status-report-mcp-server"
    ],
    "env": {
      "OPENAI_API_KEY": "YOUR_OPENAI_API_KEY"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:22:29.272Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:18:13.530Z"
  },
  "tags": [
    "voice status report",
    "voice",
    "status",
    "report"
  ]
},
{
  "_id": {
    "$oid": "68289ba6a6f8dc721ceb4554"
  },
  "seq": {
    "$numberLong": "680"
  },
  "type": "STDIO",
  "url": "https://github.com/adamjbird2/mcp-atlassian-sprint",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-atlassian",
    "description": "This MCP server implementation integrates with Atlassian Confluence and Jira (Cloud and Server/Data Center) using REST APIs and either API tokens or personal access tokens for authentication. It exposes tools for searching, creating, updating, and deleting resources in Confluence and Jira, accessed through resources like `confluence://{space_key}` and `jira://{project_key}`.",
    "command": "uvx",
    "args": [
      "mcp-atlassian",
      "--confluence-url=https://your-company.atlassian.net/wiki",
      "--confluence-username=your.email@company.com",
      "--confluence-token=your_api_token",
      "--jira-url=https://your-company.atlassian.net",
      "--jira-username=your.email@company.com",
      "--jira-token=your_api_token"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:22:30.394Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:19:06.160Z"
  },
  "tags": [
    "atlassian"
  ]
},
{
  "_id": {
    "$oid": "68289ba7a6f8dc721ceb4556"
  },
  "seq": {
    "$numberLong": "681"
  },
  "type": "STDIO",
  "url": "https://github.com/StdioA/beancount-mcp",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "https://github.com/StdioA/beancount-mcp/tree/master",
    "description": "This Beancount MCP server implements the Model Context Protocol to execute Beancount queries and submit transactions to a ledger via stdio or SSE transport; it integrates with Claude by defining a command and arguments for ledger access.",
    "command": "uvx",
    "args": [
      "beancount-mcp",
      "--transport=stdio",
      "PATH_TO_YOUR_LEDGER"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:22:31.037Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:19:07.601Z"
  },
  "tags": [
    "github",
    "stdioa",
    "beancount",
    "beancount mcp"
  ]
},
{
  "_id": {
    "$oid": "68289bb9a6f8dc721ceb4558"
  },
  "seq": {
    "$numberLong": "682"
  },
  "type": "STDIO",
  "url": "https://github.com/jeff-nasseri/mikrotik-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mikrotik",
    "description": "The MikroTik MCP server acts as a bridge enabling AI assistants to manage MikroTik RouterOS devices by executing commands for VLANs, firewall rules, DNS settings, and more, utilizing the RouterOS API and accessible via UVX.",
    "command": "uvx",
    "args": [
      "mcp-server-mikrotik",
      "--host",
      "<HOST>",
      "--username",
      "<USERNAME>",
      "--password",
      "<PASSWORD>",
      "--port",
      "22"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:22:49.587Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:19:10.617Z"
  },
  "tags": [
    "mikrotik"
  ]
},
{
  "_id": {
    "$oid": "68289bbaa6f8dc721ceb455a"
  },
  "seq": {
    "$numberLong": "683"
  },
  "type": "STDIO",
  "url": "https://github.com/Pollo3470/MoviePilot-MCP",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "moviepilot",
    "description": "This MCP server implementation bridges Large Language Models (LLMs) with MoviePilot, enabling users to interact with their media library through natural language via MCP-supported applications; it leverages MoviePilot's API and supports features such as media searching, subscription management, resource finding, and download task control using HTTP protocol and API keys for authentication.",
    "command": "uvx",
    "args": [
      "moviepilot-mcp"
    ],
    "env": {
      "MOVIEPILOT_BASE_URL": "MoviePilot 服务器的URL",
      "MOVIEPILOT_USERNAME": "你的 MoviePilot 用户名",
      "MOVIEPILOT_PASSWORD": "你的 MoviePilot 密码"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:22:50.588Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:19:12.327Z"
  },
  "tags": [
    "moviepilot",
    "movie pilot",
    "movie",
    "pilot"
  ]
},
{
  "_id": {
    "$oid": "68289bbda6f8dc721ceb455c"
  },
  "seq": {
    "$numberLong": "684"
  },
  "type": "STDIO",
  "url": "https://github.com/jkingsman/qanon-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "qanon_mcp",
    "description": "This MCP server provides access to a dataset of Q-Anon posts via the Model Context Protocol, enabling AI assistants like Claude to search, filter, and analyze the content using tools like `get_post_by_id_tool` and `search_posts`; it integrates with Claude Desktop and uses Python, `uv` package manager, and JSON for data handling.",
    "command": "uvx",
    "args": [
      "qanon_mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:22:53.255Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:19:15.171Z"
  },
  "tags": [
    "qanon"
  ]
},
{
  "_id": {
    "$oid": "68289bbea6f8dc721ceb455e"
  },
  "seq": {
    "$numberLong": "685"
  },
  "type": "STDIO",
  "url": "https://github.com/ferdousbhai/wsb-analyst-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "wsb-analyst",
    "description": "This Model Context Protocol (MCP) server provides real-time WallStreetBets data to LLM clients like Claude Desktop, enabling analysis of posts, comments, and trending tickers using the Reddit API. It offers tools for filtering posts, extracting links, and utilizing prompt templates, and can integrate with the Firecrawl MCP server for enhanced external link analysis.",
    "command": "uvx",
    "args": [
      "run",
      "wsb-analyst"
    ],
    "env": {
      "REDDIT_CLIENT_ID": "your_client_id_here",
      "REDDIT_CLIENT_SECRET": "your_client_secret_here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:22:54.187Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:20:07.838Z"
  },
  "tags": [
    "wsb analyst",
    "wsb",
    "analyst"
  ]
},
{
  "_id": {
    "$oid": "68289bc5a6f8dc721ceb4560"
  },
  "seq": {
    "$numberLong": "686"
  },
  "type": "STDIO",
  "url": "https://github.com/cygkichi/estat-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "e-stat",
    "description": "This MCP server implementation provides access to the e-Stat API, enabling language models to search and retrieve Japanese government statistical data using keywords, table IDs, and dataset IDs; it integrates with the e-Stat API through tools that utilize an application ID for authentication.",
    "command": "uvx",
    "args": [
      "estat-mcp-server"
    ],
    "env": {
      "E_STAT_APP_ID": "YOUR_E_STAT_APP_ID"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:23:01.105Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:20:09.444Z"
  },
  "tags": [
    "e stat",
    "e",
    "stat"
  ]
},
{
  "_id": {
    "$oid": "68289bc8a6f8dc721ceb4562"
  },
  "seq": {
    "$numberLong": "687"
  },
  "type": "STDIO",
  "url": "https://github.com/jin38324/oci-documentation-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "oci-documentation-mcp-server",
    "description": "This MCP server provides access to OCI documentation by fetching and converting documentation pages to markdown, and enables searching OCI documentation using a search engine; it is implemented using Python and utilizes the Model Context Protocol (MCP).",
    "command": "uvx",
    "args": [
      "oci-documentation-mcp-server@latest"
    ],
    "env": {
      "FASTMCP_LOG_LEVEL": "ERROR"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:23:04.703Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:20:12.094Z"
  },
  "tags": [
    "oci documentation",
    "oci",
    "documentation"
  ]
},
{
  "_id": {
    "$oid": "68289bd4a6f8dc721ceb4564"
  },
  "seq": {
    "$numberLong": "688"
  },
  "type": "STDIO",
  "url": "https://github.com/PhiloSolares/roam-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "roam-helper",
    "description": "This Model Context Protocol (MCP) server connects Claude AI to Roam Research, enabling content creation, search, and memory recall within Roam using the Roam Research API; it also supports URL content processing for importing data from websites, PDFs, and YouTube transcripts.",
    "command": "uvx",
    "args": [
      "git+https://github.com/PhiloSolares/roam-mcp.git"
    ],
    "env": {
      "ROAM_API_TOKEN": "<your_roam_api_token>",
      "ROAM_GRAPH_NAME": "<your_roam_graph_name>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:23:16.949Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:20:13.920Z"
  },
  "tags": [
    "roam helper",
    "roam",
    "helper"
  ]
},
{
  "_id": {
    "$oid": "68289bd6a6f8dc721ceb4566"
  },
  "seq": {
    "$numberLong": "689"
  },
  "type": "STDIO",
  "url": "https://github.com/avivsinai/langfuse-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "langfuse",
    "description": "The Langfuse MCP server provides a set of tools for AI agents to query and retrieve trace data from Langfuse using the Model Context Protocol. It integrates with Langfuse via its API to fetch traces, observations, sessions, and exceptions, and it supports configuration with clients like Cursor and Claude, communicating through standard input/output (stdio).",
    "command": "uvx",
    "args": [
      "langfuse-mcp",
      "--public-key",
      "YOUR_KEY",
      "--secret-key",
      "YOUR_SECRET",
      "--host",
      "https://cloud.langfuse.com"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:23:18.250Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:20:16.985Z"
  },
  "tags": [
    "langfuse"
  ]
},
{
  "_id": {
    "$oid": "68289bdaa6f8dc721ceb4568"
  },
  "seq": {
    "$numberLong": "690"
  },
  "type": "STDIO",
  "url": "https://github.com/jamiesonio/defectdojo-mcp",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "defectdojo",
    "description": "This MCP server implements the Model Context Protocol to provide AI agents with programmatic access to DefectDojo, enabling them to manage findings, products, and engagements via the DefectDojo API using tools for creation, retrieval, status updates, and notes.",
    "command": "uvx",
    "args": [
      "defectdojo-mcp"
    ],
    "env": {
      "DEFECTDOJO_API_TOKEN": "YOUR_API_TOKEN_HERE",
      "DEFECTDOJO_API_BASE": "https://your-defectdojo-instance.com"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:23:22.021Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:21:09.743Z"
  },
  "tags": [
    "defectdojo",
    "defect dojo",
    "defect",
    "dojo"
  ]
},
{
  "_id": {
    "$oid": "68289bdda6f8dc721ceb456a"
  },
  "seq": {
    "$numberLong": "691"
  },
  "type": "STDIO",
  "url": "https://github.com/yamaton/mcp-dice",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "dice",
    "description": "This MCP server implements a dice roller that accepts dice notation via JSON and responds with individual rolls and their sum, integrating with Claude Desktop and debugging tools like MCP Inspector over the Model Context Protocol.",
    "command": "uvx",
    "args": [
      "mcp-dice"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:23:25.284Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:21:11.259Z"
  },
  "tags": [
    "dice"
  ]
},
{
  "_id": {
    "$oid": "68289bdfa6f8dc721ceb456c"
  },
  "seq": {
    "$numberLong": "692"
  },
  "type": "STDIO",
  "url": "https://github.com/waldur/waldur-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "waldur-mcp-server",
    "description": "The Waldur MCP server implements the Model Context Protocol (MCP) to integrate Claude Desktop with a Waldur instance, enabling Claude to interact directly via a configured API URL and token; it uses Python 3.13 or higher and the `uv` package manager.",
    "command": "uvx",
    "args": [
      "waldur-mcp-server"
    ],
    "env": {
      "WALDUR_API_URL": "https://your-waldur-instance",
      "WALDUR_TOKEN": "your-token"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:23:27.973Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:21:13.595Z"
  },
  "tags": [
    "waldur",
    "waldur"
  ]
},
{
  "_id": {
    "$oid": "68289be1a6f8dc721ceb456e"
  },
  "seq": {
    "$numberLong": "693"
  },
  "type": "STDIO",
  "url": "https://github.com/Johnxjp/todoist-mcp-python",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "todoist-server",
    "description": "This Python MCP server enables Claude to manage Todoist tasks by translating natural language commands into Todoist API calls via HTTP, using tools to create, retrieve, update, complete, and delete tasks; it utilizes the `todoist-api-python` library and Model Context Protocol for seamless integration.",
    "command": "uvx",
    "args": [
      "--from",
      "https://github.com/Johnxjp/todoist-mcp-python.git",
      "mcp-server-todoist"
    ],
    "env": {
      "TODOIST_API_TOKEN": "YOUR_API_TOKEN"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:23:29.253Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:21:15.554Z"
  },
  "tags": [
    "todoist",
    "todo ist"
  ]
},
{
  "_id": {
    "$oid": "68289be2a6f8dc721ceb4570"
  },
  "seq": {
    "$numberLong": "694"
  },
  "type": "STDIO",
  "url": "https://github.com/jkawamoto/mcp-florence2",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "florence-2",
    "description": "This MCP server implements image processing capabilities, utilizing Florence-2 to perform OCR for text extraction and to generate descriptive captions from images and PDF files accessed via local paths or URLs; it integrates with Claude Desktop and Goose CLI/Desktop using the Model Context Protocol (MCP) over stdio.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/jkawamoto/mcp-florence2",
      "mcp-florence2"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:23:30.567Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:21:18.472Z"
  },
  "tags": [
    "florence 2",
    "florence",
    "2"
  ]
},
{
  "_id": {
    "$oid": "68289be8a6f8dc721ceb4572"
  },
  "seq": {
    "$numberLong": "695"
  },
  "type": "STDIO",
  "url": "https://github.com/piebro/echo-mcp-server-for-testing",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "This MCP server implementation provides a simple echo tool for testing MCP clients and serves as a template for new MCP servers, utilizing `uv` for dependency management and `ruff` for formatting and linting; it communicates using the Model Context Protocol.",
    "command": "uvx",
    "args": [
      "echo-mcp-server-for-testing"
    ],
    "env": {
      "SECRET_KEY": "123456789"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:23:36.154Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:22:11.206Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "68289bf0a6f8dc721ceb4574"
  },
  "seq": {
    "$numberLong": "696"
  },
  "type": "STDIO",
  "url": "https://github.com/cdpath/mcp-server-anki",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "anki",
    "description": "This MCP server implementation integrates with Anki via AnkiConnect, allowing interaction with Anki decks; it is designed to be launched via `uvx mcp-server-anki` using either a cursor or chatwise integration.",
    "command": "uvx",
    "args": [
      "mcp-server-anki"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:23:44.650Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:22:12.700Z"
  },
  "tags": [
    "anki"
  ]
},
{
  "_id": {
    "$oid": "68289bf1a6f8dc721ceb4576"
  },
  "seq": {
    "$numberLong": "697"
  },
  "type": "STDIO",
  "url": "https://github.com/xiaoyingv/mcp_calculate_server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "calculate_mcp",
    "description": "The Calculator MCP server implements a secure expression calculator using Python AST parsing, providing basic arithmetic operations such as addition, subtraction, multiplication, and division, while offering safety features like code injection prevention and division-by-zero error handling; it integrates with an MCP server framework via a defined API for expression evaluation.",
    "command": "uvx",
    "args": [
      "mcp_calculate_server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:23:45.680Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:22:15.215Z"
  },
  "tags": [
    "calculate",
    "calculate"
  ]
},
{
  "_id": {
    "$oid": "68289bf3a6f8dc721ceb4578"
  },
  "seq": {
    "$numberLong": "698"
  },
  "type": "STDIO",
  "url": "https://github.com/Gyan-max/MCP-Server-blender",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "playwright",
    "description": "The Unified MCP Client Library (mcp-use) connects any Large Language Model (LLM) supporting tool calling, such as those from OpenAI, Anthropic, and others via LangChain, to any Machine Control Protocol (MCP) server for tool access. It supports HTTP connections, dynamic server selection, and allows agents to use multiple MCP servers simultaneously, enabling capabilities like web browsing with Playwright and 3D creation with Blender through natural language prompts.",
    "command": "npx",
    "args": [
      "@playwright/mcp@latest"
    ],
    "env": {
      "DISPLAY": ":1"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:23:47.288Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:22:17.963Z"
  },
  "tags": [
    "playwright"
  ]
},
{
  "_id": {
    "$oid": "68289bf6a6f8dc721ceb457a"
  },
  "seq": {
    "$numberLong": "699"
  },
  "type": "STDIO",
  "url": "https://github.com/g-fukurowl/fess-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "fess-search-sse",
    "description": "Fess MCP Server acts as a middleware that integrates with the Fess full-text search engine, enabling MCP clients to retrieve information using Fess by communicating over HTTP on a configured port and utilizing Server-Sent Events (SSE). This server is configured via environment variables and supports deployment using Docker or Python package managers like uv.",
    "command": "npx",
    "args": [
      "-y",
      "mcp-remote",
      "http://localhost:8000/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:23:50.298Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:22:20.295Z"
  },
  "tags": [
    "fess search sse",
    "fess",
    "search",
    "sse"
  ]
},
{
  "_id": {
    "$oid": "68289bfaa6f8dc721ceb457c"
  },
  "seq": {
    "$numberLong": "700"
  },
  "type": "STDIO",
  "url": "https://github.com/pdm-project/template-mcp-server",
  "stars": 1,
  "views": 4,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "template-mcp-server",
    "description": "This Python-based MCP server implementation integrates with Claude Desktop via JSON configuration, utilizing the `uvx` command to launch and communicate; it facilitates interaction with Claude Desktop through defined tools and protocols.",
    "command": "uvx",
    "args": [
      "template-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:23:54.378Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:42:50.900Z"
  },
  "tags": [
    "template",
    "template"
  ]
},
{
  "_id": {
    "$oid": "68289c00a6f8dc721ceb457e"
  },
  "seq": {
    "$numberLong": "701"
  },
  "type": "STDIO",
  "url": "https://github.com/sap156/zillow-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "zillow-remote",
    "description": "This MCP server, built with Python and FastMCP, provides real-time access to Zillow real estate data through the Zillow Bridge API, enabling property searches, detail retrieval, Zestimates, market trend analysis, and mortgage calculations; it supports both standard I/O and HTTP server modes for integration with tools like Claude Desktop.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "https://your-mcp-server-url.com/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:24:00.246Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:23:14.408Z"
  },
  "tags": [
    "zillow remote",
    "zillow",
    "remote"
  ]
},
{
  "_id": {
    "$oid": "68289c0da6f8dc721ceb4580"
  },
  "seq": {
    "$numberLong": "702"
  },
  "type": "STDIO",
  "url": "https://github.com/piebro/fal-ai-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "default",
    "description": "This MCP server implementation leverages fal.ai APIs to generate images and videos, communicating via the Model Context Protocol. It utilizes uv for package management and can be extended to support various fal.ai models and API endpoints.",
    "command": "uvx",
    "args": [
      "fal-ai-mcp-server"
    ],
    "env": {
      "FAL_KEY": "your-key",
      "SAVE_MEDIA_DIR": "path/to/save/images"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:24:13.622Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:23:16.532Z"
  },
  "tags": [
    "default"
  ]
},
{
  "_id": {
    "$oid": "68289c14a6f8dc721ceb4582"
  },
  "seq": {
    "$numberLong": "703"
  },
  "type": "STDIO",
  "url": "https://github.com/MCP-Mirror/evangstav_python-memory-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "memory",
    "description": "This server implements the Model Context Protocol (MCP) to manage Claude's memory and knowledge graph using an SQLite database, and it integrates with Claude Desktop through a specified configuration to serve as a memory server.",
    "command": "uvx",
    "args": [
      "memory-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:24:20.050Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:23:19.431Z"
  },
  "tags": [
    "memory"
  ]
},
{
  "_id": {
    "$oid": "68289c29a6f8dc721ceb4584"
  },
  "seq": {
    "$numberLong": "704"
  },
  "type": "STDIO",
  "url": "https://github.com/kukapay/defi-yields-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "defi-yields-mcp",
    "description": "This MCP server allows AI agents to discover DeFi yield opportunities by fetching yield pool data from DefiLlama via the `get_yield_pools` tool, enabling filtering by blockchain or project, and analyzing the data using the `analyze_yields` prompt for key metrics like APY.",
    "command": "uvx",
    "args": [
      "defi-yields-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:24:41.574Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:23:21.905Z"
  },
  "tags": [
    "defi yields",
    "defi",
    "yields",
    "defi-yields"
  ]
},
{
  "_id": {
    "$oid": "68289c2ba6f8dc721ceb4586"
  },
  "seq": {
    "$numberLong": "705"
  },
  "type": "STDIO",
  "url": "https://github.com/olafgeibig/knowledge-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "knowledge-mcp",
    "description": "The knowledge-mcp server implements a specialized knowledge base accessible to AI agents via the FastMCP protocol, utilizing LightRAG to process documents, build knowledge graphs, and support various retrieval strategies; it integrates with technologies like OpenAI for LLM and embedding functionalities and is configurable through YAML files.",
    "command": "uvx",
    "args": [
      "knowledge-mcp",
      "--config",
      "<absolute-path-to-your-config.yaml>",
      "mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:24:43.142Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:24:14.571Z"
  },
  "tags": [
    "knowledge",
    "knowledge"
  ]
},
{
  "_id": {
    "$oid": "68289c2da6f8dc721ceb4588"
  },
  "seq": {
    "$numberLong": "706"
  },
  "type": "STDIO",
  "url": "https://github.com/Sacode/searxng-simple-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "searxng",
    "description": "This MCP server implementation integrates with SearxNG to provide privacy-focused web search capabilities to AI assistants via the Model Context Protocol (MCP), utilizing either STDIO or Server-Sent Events (SSE) as transport protocols and configurable via environment variables.",
    "command": "uvx",
    "args": [
      "run",
      "searxng-simple-mcp@latest"
    ],
    "env": {
      "SEARXNG_MCP_SEARXNG_URL": "https://your-instance.example.com"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:24:45.660Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:24:15.973Z"
  },
  "tags": [
    "searxng"
  ]
},
{
  "_id": {
    "$oid": "68289c2fa6f8dc721ceb458a"
  },
  "seq": {
    "$numberLong": "707"
  },
  "type": "STDIO",
  "url": "https://github.com/PyneSys/project-mem-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "project-memory",
    "description": "The Project Memory MCP server provides AI agents, such as Claude, with persistent memory by storing and retrieving project information in Markdown files, using tools like `get_project_memory`, `set_project_memory`, and `update_project_memory`; it communicates with clients using the fastmcp protocol and supports updating memory files via block-based patching.",
    "command": "uvx",
    "args": [
      "project-mem-mcp",
      "--allowed-dir",
      "/Users/your-username/projects",
      "--allowed-dir",
      "/Users/your-username/Documents/code"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:24:47.303Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:24:18.171Z"
  },
  "tags": [
    "project memory",
    "project",
    "memory"
  ]
},
{
  "_id": {
    "$oid": "68289c32a6f8dc721ceb458c"
  },
  "seq": {
    "$numberLong": "708"
  },
  "type": "STDIO",
  "url": "https://github.com/iflytek/ifly-spark-agent-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "ifly-spark-agent-mcp",
    "description": "This MCP server implementation exposes the iFlytek SparkAgent Platform task chain as a tool, enabling interactions via the MCP protocol using STDIO or SSE transport; it utilizes the `uv` or `uvx` command to run and integrates with platforms like Claude through configuration files.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/iflytek/ifly-spark-agent-mcp",
      "ifly-spark-agent-mcp"
    ],
    "env": {
      "IFLY_SPARK_AGENT_BASE_URL": "xxxx",
      "IFLY_SPARK_AGENT_APP_ID": "xxxx",
      "IFLY_SPARK_AGENT_APP_SECRET": "xxxx"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:24:50.283Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:24:20.984Z"
  },
  "tags": [
    "ifly spark agent",
    "ifly",
    "spark",
    "agent"
  ]
},
{
  "_id": {
    "$oid": "68289c36a6f8dc721ceb458e"
  },
  "seq": {
    "$numberLong": "709"
  },
  "type": "STDIO",
  "url": "https://github.com/topmcp/cloudflare-ai-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "CloudflareAI",
    "description": "This MCP server leverages the Cloudflare AI API to generate images using multiple Stable Diffusion models and AI-powered prompts; it exposes functionalities via tools like `generate_images` and `generate_prompt`, communicating over HTTP and is configurable via JSON and environment variables.",
    "command": "uvx",
    "args": [
      "cloudflare-ai"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:24:54.844Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:24:23.566Z"
  },
  "tags": [
    "cloudflareai",
    "cloudflare",
    "ai"
  ]
},
{
  "_id": {
    "$oid": "68289ff4a6f8dc721ceb4590"
  },
  "seq": {
    "$numberLong": "710"
  },
  "type": "STDIO",
  "url": "https://github.com/smat-dev/jinni",
  "stars": 262,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "jinni",
    "description": "Jinni provides project context to Large Language Models via a Model Context Protocol (MCP) server and command-line interface (CLI), efficiently concatenating relevant files while respecting `.gitignore`-style inclusion/exclusion rules defined in `.contextfiles`; the server integrates with AI tools like Cursor using `uvx` and exposes a `read_context` tool, and the CLI outputs to the clipboard or files.",
    "command": "uvx",
    "args": [
      "jinni-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:40:52.012Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:25:16.347Z"
  },
  "tags": [
    "jinni"
  ]
},
{
  "_id": {
    "$oid": "68289ff4a6f8dc721ceb4592"
  },
  "seq": {
    "$numberLong": "711"
  },
  "type": "STDIO",
  "url": "https://github.com/NapthaAI/automcp",
  "stars": 246,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "My Agent",
    "description": "automcp converts agent frameworks like CrewAI, LangGraph, Llama Index, OpenAI Agents SDK, and Pydantic AI into MCP servers, enabling access through standardized interfaces using clients like Cursor and Claude Desktop via STDIO or SSE transports.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/your-username/your-repo",
      "serve_stdio"
    ],
    "env": {
      "OPENAI_API_KEY": "your-key-here"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:40:52.792Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:25:18.100Z"
  },
  "tags": [
    "my agent",
    "my",
    "agent"
  ]
},
{
  "_id": {
    "$oid": "68289ff6a6f8dc721ceb4594"
  },
  "seq": {
    "$numberLong": "712"
  },
  "type": "STDIO",
  "url": "https://github.com/cr7258/elasticsearch-mcp-server",
  "stars": 139,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "elasticsearch-mcp-server",
    "description": "This Model Context Protocol (MCP) server provides an interface for interacting with Elasticsearch and OpenSearch clusters via HTTP APIs, enabling operations such as managing indices and documents, performing searches, and retrieving cluster statistics. The server integrates with Claude Desktop and offers multiple installation options using Smithery, `uvx`, and `uv`.",
    "command": "uvx",
    "args": [
      "elasticsearch-mcp-server"
    ],
    "env": {
      "ELASTICSEARCH_USERNAME": "elastic",
      "ELASTICSEARCH_HOSTS": "https://localhost:9200",
      "ELASTICSEARCH_PASSWORD": "test123"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:40:54.990Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:25:19.858Z"
  },
  "tags": [
    "elasticsearch",
    "elastic search"
  ]
},
{
  "_id": {
    "$oid": "68289ffca6f8dc721ceb4596"
  },
  "seq": {
    "$numberLong": "713"
  },
  "type": "STDIO",
  "url": "https://github.com/aliyun/alibaba-cloud-ops-mcp-server",
  "stars": 41,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "alibaba-cloud-ops-mcp-server",
    "description": "Alibaba Cloud Ops MCP Server implements a Model Context Protocol (MCP) server that integrates with Alibaba Cloud APIs to enable AI assistants to operate cloud resources, supporting services like ECS, Cloud Monitor, and OOS through both Alibaba Cloud APIs and OOS workflows.",
    "command": "uvx",
    "args": [
      "alibaba-cloud-ops-mcp-server@latest"
    ],
    "env": {
      "ALIBABA_CLOUD_ACCESS_KEY_ID": "Your Access Key ID",
      "ALIBABA_CLOUD_ACCESS_KEY_SECRET": "Your Access Key SECRET"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:41:00.817Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:25:22.576Z"
  },
  "tags": [
    "alibaba cloud ops",
    "alibaba",
    "cloud",
    "ops",
    "alibaba-cloud-ops"
  ]
},
{
  "_id": {
    "$oid": "68289ffea6f8dc721ceb4598"
  },
  "seq": {
    "$numberLong": "714"
  },
  "type": "STDIO",
  "url": "https://github.com/Xuanwo/mcp-server-opendal",
  "stars": 28,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "opendal",
    "description": "This MCP server implementation uses Apache OpenDAL™ to provide access to various storage services, such as S3 and Azure Blob Storage, via environment variable configuration; it supports listing files/directories and reading file contents with automatic text/binary detection.",
    "command": "uvx",
    "args": [
      "mcp-server-opendal"
    ],
    "env": {
      "YOUR_ENV_VAR": "YOUR_ENV_VALUE"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:41:02.365Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:25:25.020Z"
  },
  "tags": [
    "opendal"
  ]
},
{
  "_id": {
    "$oid": "68289fffa6f8dc721ceb459a"
  },
  "seq": {
    "$numberLong": "715"
  },
  "type": "STDIO",
  "url": "https://github.com/acryldata/mcp-server-datahub",
  "stars": 27,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "datahub",
    "description": "This server implements the Model Context Protocol (MCP) to enable AI agents to query DataHub Core or DataHub Cloud for metadata, supporting features like entity search, metadata fetching, lineage traversal, and SQL query listing; it utilizes `uvx` to interface with the DataHub GraphQL Metadata Service (GMS) via a URL and personal access token.",
    "command": "uvx",
    "args": [
      "mcp-server-datahub"
    ],
    "env": {
      "DATAHUB_GMS_URL": "<your-datahub-url>",
      "DATAHUB_GMS_TOKEN": "<your-datahub-token>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:41:03.420Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:26:18.200Z"
  },
  "tags": [
    "datahub",
    "data hub",
    "data",
    "hub"
  ]
},
{
  "_id": {
    "$oid": "6828a000a6f8dc721ceb459c"
  },
  "seq": {
    "$numberLong": "716"
  },
  "type": "STDIO",
  "url": "https://github.com/wandb/wandb-mcp-server",
  "stars": 27,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "wandb",
    "description": "This MCP server enables querying Weights & Biases (W&B) data using GraphQL, including runs, sweeps, artifacts, and the model registry, as well as querying Weave traces, evaluations, and datasets using filtering and pagination; it also supports writing markdown and HTML-rendered visualizations to W&B Reports.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/wandb/wandb-mcp-server",
      "mcp_server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:04.486Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:26:19.894Z"
  },
  "tags": [
    "wandb"
  ]
},
{
  "_id": {
    "$oid": "6828a001a6f8dc721ceb459e"
  },
  "seq": {
    "$numberLong": "717"
  },
  "type": "STDIO",
  "url": "https://github.com/Rootly-AI-Labs/Rootly-MCP-server",
  "stars": 24,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "rootly",
    "description": "This MCP server implementation integrates with the Rootly API to allow users to resolve production incidents directly within MCP-compatible editors by dynamically generating MCP resources based on Rootly's OpenAPI specification and using `uv` as a package manager.",
    "command": "uvx",
    "args": [
      "--from",
      "rootly-mcp-server",
      "rootly-mcp-server"
    ],
    "env": {
      "ROOTLY_API_TOKEN": "<YOUR_ROOTLY_API_TOKEN>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:41:05.827Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:26:21.382Z"
  },
  "tags": [
    "rootly"
  ]
},
{
  "_id": {
    "$oid": "6828a002a6f8dc721ceb45a0"
  },
  "seq": {
    "$numberLong": "718"
  },
  "type": "STDIO",
  "url": "https://github.com/cyberchitta/scrapling-fetch-mcp",
  "stars": 24,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "Cyber-Chitta",
    "description": "This MCP server implementation, built with Python and utilizing the `uv` package manager, provides AI assistants with the ability to access text and HTML content from bot-protected websites through tools like `s-fetch-page` for complete page retrieval and `s-fetch-pattern` for extracting regex-matched content, offering varying levels of protection ('basic', 'stealth', 'max-stealth') and pagination support.",
    "command": "uvx",
    "args": [
      "scrapling-fetch-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:06.548Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:26:24.317Z"
  },
  "tags": [
    "cyber chitta",
    "cyber",
    "chitta"
  ]
},
{
  "_id": {
    "$oid": "6828a003a6f8dc721ceb45a2"
  },
  "seq": {
    "$numberLong": "719"
  },
  "type": "STDIO",
  "url": "https://github.com/MCPPhalanx/binaryninja-mcp",
  "stars": 23,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "binaryninja",
    "description": "This MCP server implementation provides Model Context Protocol (MCP) support for Binary Ninja, enabling interaction with tools like Claude Desktop and Cherry Studio via stdio or Server-Sent Events (SSE) on port 7000 and offering functionalities such as renaming symbols, retrieving pseudo-code, and accessing binary information like imports, exports, sections and segments.",
    "command": "uvx",
    "args": [
      "binaryninja-mcp",
      "client"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:07.258Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:26:26.836Z"
  },
  "tags": [
    "binaryninja",
    "binary ninja",
    "binary",
    "ninja"
  ]
},
{
  "_id": {
    "$oid": "6828a005a6f8dc721ceb45a4"
  },
  "seq": {
    "$numberLong": "720"
  },
  "type": "STDIO",
  "url": "https://github.com/aliyun/alibabacloud-hologres-mcp-server",
  "stars": 19,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "hologres-mcp-server",
    "description": "The Hologres MCP Server acts as an intermediary, enabling AI Agents to retrieve metadata and execute SQL operations against Hologres databases via a universal interface; it supports local file or PIP installation and communicates with Hologres using provided connection parameters to execute queries and manage database objects.",
    "command": "uvx",
    "args": [
      "hologres-mcp-server"
    ],
    "env": {
      "HOLOGRES_PASSWORD": "access_key",
      "HOLOGRES_DATABASE": "database",
      "HOLOGRES_HOST": "host",
      "HOLOGRES_PORT": "port",
      "HOLOGRES_USER": "access_id"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:41:09.542Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:27:19.859Z"
  },
  "tags": [
    "hologres",
    "hologres"
  ]
},
{
  "_id": {
    "$oid": "6828a009a6f8dc721ceb45a6"
  },
  "seq": {
    "$numberLong": "721"
  },
  "type": "STDIO",
  "url": "https://github.com/strands-agents/mcp-server",
  "stars": 20,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "strands",
    "description": "This MCP server provides documentation about Strands Agents and integrates with AI coding assistants using the Model Context Protocol (MCP). It supports integrations with tools such as Amazon Q Developer CLI, Anthropic Claude Code, Cline, and Cursor.",
    "command": "uvx",
    "args": [
      "strands-agents-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:13.087Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:27:21.332Z"
  },
  "tags": [
    "strands"
  ]
},
{
  "_id": {
    "$oid": "6828a014a6f8dc721ceb45a8"
  },
  "seq": {
    "$numberLong": "722"
  },
  "type": "STDIO",
  "url": "https://github.com/jiayao/mcp-chess",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "chess",
    "description": "The MCP Chess Server implements a chess game engine accessible through MCP, offering tools to visualize the board, determine valid moves in UCI notation, make moves using SAN, and start new games; it also integrates PGN parsing to find specific board positions based on piece placement, returning image representations.",
    "command": "uvx",
    "args": [
      "mcp-chess"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:24.056Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:27:23.013Z"
  },
  "tags": [
    "chess"
  ]
},
{
  "_id": {
    "$oid": "6828a015a6f8dc721ceb45aa"
  },
  "seq": {
    "$numberLong": "723"
  },
  "type": "STDIO",
  "url": "https://github.com/evansims/openfga-mcp",
  "stars": 8,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "openfga-mcp",
    "description": "The OpenFGA MCP Server implements the Model Context Protocol, enabling LLMs to interact with OpenFGA by managing stores, authorization models, and relationship tuples through the OpenFGA API; it supports querying relationships using check, list_objects and list_users endpoints.",
    "command": "uvx",
    "args": [
      "openfga-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:25.455Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:27:26.040Z"
  },
  "tags": [
    "openfga",
    "open fga",
    "fga"
  ]
},
{
  "_id": {
    "$oid": "6828a016a6f8dc721ceb45ac"
  },
  "seq": {
    "$numberLong": "724"
  },
  "type": "STDIO",
  "url": "https://github.com/vgnshiyer/apple-books-mcp",
  "stars": 7,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "apple-books-mcp",
    "description": "This MCP server implementation provides an interface for interacting with Apple Books data, enabling users to retrieve and manipulate information such as books, collections, and annotations; it uses Python and is configured via JSON, allowing integration with tools like Claude for summarization, organization, and recommendations.",
    "command": "uvx",
    "args": [
      "apple-books-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:26.380Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:27:28.594Z"
  },
  "tags": [
    "apple books",
    "apple",
    "books",
    "apple-books"
  ]
},
{
  "_id": {
    "$oid": "6828a018a6f8dc721ceb45ae"
  },
  "seq": {
    "$numberLong": "725"
  },
  "type": "STDIO",
  "url": "https://github.com/metricool/mcp-metricool",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-metricool",
    "description": "This MCP server provides AI agents with access to the Metricool API, enabling them to retrieve social media metrics and campaign data from platforms like Instagram, Facebook, TikTok, X, and others, and schedule posts to Metricool using a variety of tools.",
    "command": "uvx",
    "args": [
      "mcp-metricool"
    ],
    "env": {
      "METRICOOL_USER_TOKEN": "<METRICOOL_USER_TOKEN>",
      "METRICOOL_USER_ID": "<METRICOOL_USER_ID>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:41:28.073Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:28:21.590Z"
  },
  "tags": [
    "metricool"
  ]
},
{
  "_id": {
    "$oid": "6828a019a6f8dc721ceb45b0"
  },
  "seq": {
    "$numberLong": "726"
  },
  "type": "STDIO",
  "url": "https://github.com/waii-ai/waii-mcp-server",
  "stars": 6,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "waii",
    "description": "The WAII MCP server facilitates database interaction for language models by leveraging the WAII API to translate natural language into SQL queries, requiring configuration with a WAII URL, API key, and database connection string.",
    "command": "uvx",
    "args": [
      "mcp_server_waii",
      "--url",
      "YOUR_WAII_URL",
      "--api-key",
      "YOUR_API_KEY",
      "--database-key",
      "YOUR_DATABASE_CONNECTION_STRING"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:29.121Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:28:23.393Z"
  },
  "tags": [
    "waii"
  ]
},
{
  "_id": {
    "$oid": "6828a01ba6f8dc721ceb45b2"
  },
  "seq": {
    "$numberLong": "727"
  },
  "type": "STDIO",
  "url": "https://github.com/cr7258/higress-ai-search-mcp-server",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "higress-ai-search-mcp-server",
    "description": "This MCP server implements an AI search tool that enhances AI model responses by integrating real-time search results from sources like Google, Bing, Arxiv, and internal knowledge bases through Higress's ai-search and ai-proxy plugins, utilizing the Model Context Protocol and configurable via environment variables for Higress URL, LLM model, and knowledge base descriptions.",
    "command": "uvx",
    "args": [
      "higress-ai-search-mcp-server"
    ],
    "env": {
      "HIGRESS_URL": "http://localhost:8080/v1/chat/completions",
      "INTERNAL_KNOWLEDGE_BASES": "Employee handbook, company policies, internal process documents",
      "MODEL": "qwen-turbo"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:41:31.133Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:28:25.053Z"
  },
  "tags": [
    "higress",
    "ai",
    "search",
    "higress ai search",
    "ai search"
  ]
},
{
  "_id": {
    "$oid": "6828a01da6f8dc721ceb45b4"
  },
  "seq": {
    "$numberLong": "728"
  },
  "type": "STDIO",
  "url": "https://github.com/crate/cratedb-mcp",
  "stars": 5,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "my_cratedb",
    "description": "The CrateDB MCP Server enables large language models to interact with CrateDB databases via the Model Context Protocol, providing capabilities such as Text-to-SQL and documentation retrieval; it utilizes HTTP to communicate with CrateDB and retrieves documentation from sources like `cratedb.com/docs`.",
    "command": "uvx",
    "args": [
      "cratedb-mcp"
    ],
    "env": {
      "CRATEDB_MCP_HTTP_URL": "http://localhost:4200/",
      "CRATEDB_MCP_TRANSPORT": "stdio"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:41:33.097Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:28:27.929Z"
  },
  "tags": [
    "my cratedb",
    "my",
    "cratedb"
  ]
},
{
  "_id": {
    "$oid": "6828a023a6f8dc721ceb45b6"
  },
  "seq": {
    "$numberLong": "729"
  },
  "type": "STDIO",
  "url": "https://github.com/c-cf/imf-data-mcp",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "imf",
    "description": "This MCP server provides access to IMF economic data via the IMF's Dataflow, DataStructure, CompactData, and DataMapper APIs, enabling users to retrieve datasets, time series, indicators, and country lists. It integrates with applications via configuration and can be run using uv or pip.",
    "command": "uvx",
    "args": [
      "imf-data-mcp"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:39.497Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:28:30.146Z"
  },
  "tags": [
    "imf"
  ]
},
{
  "_id": {
    "$oid": "6828a024a6f8dc721ceb45b8"
  },
  "seq": {
    "$numberLong": "730"
  },
  "type": "STDIO",
  "url": "https://github.com/feiskyer/mcp-kubernetes-server",
  "stars": 3,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "kubernetes",
    "description": "The mcp-kubernetes-server implements a Model Context Protocol (MCP) server that facilitates natural language interaction with Kubernetes clusters by translating requests into `kubectl` and `helm` commands, and providing access to Kubernetes resources via `k8s_*` commands, enabling AI tools to query, manage, and diagnose Kubernetes deployments.",
    "command": "uvx",
    "args": [
      "mcp-kubernetes-server"
    ],
    "env": {
      "KUBECONFIG": "<your-kubeconfig-path>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:41:40.776Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:29:23.370Z"
  },
  "tags": [
    "kubernetes"
  ]
},
{
  "_id": {
    "$oid": "6828a02aa6f8dc721ceb45ba"
  },
  "seq": {
    "$numberLong": "731"
  },
  "type": "STDIO",
  "url": "https://github.com/Pearl-com/pearl_mcp_server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "pearl-remote",
    "description": "The Pearl MCP server implements the Model Context Protocol, enabling integration between MCP clients and Pearl's AI and expert services via stdio or SSE transports, and it provides tools for AI-only, AI-assisted expert, and direct expert interactions through the Pearl API.",
    "command": "npx",
    "args": [
      "mcp-remote",
      "https://pearl-api-mcp-server.pearlapi.workers.dev/sse"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:46.515Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:29:25.076Z"
  },
  "tags": [
    "pearl remote",
    "pearl",
    "remote"
  ]
},
{
  "_id": {
    "$oid": "6828a02ba6f8dc721ceb45bc"
  },
  "seq": {
    "$numberLong": "732"
  },
  "type": "STDIO",
  "url": "https://github.com/groundlight/framegrab-mcp-server",
  "stars": 2,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "framegrab",
    "description": "This MCP server captures images from various video sources, including webcams, USB cameras, and RTSP/YouTube streams, using the framegrab library; it exposes tools for managing framegrabber configurations and integrates with Claude Desktop and Zed via JSON configuration using the UVX command.",
    "command": "uvx",
    "args": [
      "framegrab-mcp-server"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:47.653Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:29:26.821Z"
  },
  "tags": [
    "framegrab",
    "frame grab",
    "frame",
    "grab"
  ]
},
{
  "_id": {
    "$oid": "6828a031a6f8dc721ceb45be"
  },
  "seq": {
    "$numberLong": "733"
  },
  "type": "STDIO",
  "url": "https://github.com/eadm/grain-mcp-server",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "grain_uvx",
    "description": "This MCP server implementation enables access to Grain meeting data and transcript downloads via the Model Context Protocol using Playwright for browser automation; it offers tools to retrieve meeting lists and download transcripts in VTT or SRT formats.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/eadm/grain-mcp-server",
      "grain-mcp-server",
      "--user-data-dir",
      "<absolute-path-to-browser-session-data>"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:41:53.829Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:29:29.462Z"
  },
  "tags": [
    "grain",
    "uvx"
  ]
},
{
  "_id": {
    "$oid": "6828a03ba6f8dc721ceb45c0"
  },
  "seq": {
    "$numberLong": "734"
  },
  "type": "STDIO",
  "url": "https://github.com/vijaykodam/kubernetes-readonly-mcp",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "kubernetes-readonly-mcp",
    "description": "This MCP server implementation provides read-only access to Kubernetes clusters using the Model Context Protocol, exposing APIs for listing resources (pods, deployments, services, namespaces), retrieving events, and accessing logs based on label selectors; it is built with FastMCP 2.0 and the Kubernetes Python client.",
    "command": "uvx",
    "args": [
      "kubernetes-readonly-mcp@latest"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:42:03.594Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:29:31.646Z"
  },
  "tags": [
    "kubernetes readonly",
    "kubernetes",
    "readonly"
  ]
},
{
  "_id": {
    "$oid": "6828a03da6f8dc721ceb45c2"
  },
  "seq": {
    "$numberLong": "735"
  },
  "type": "STDIO",
  "url": "https://github.com/karateboss/mcp_pdf_reader",
  "stars": 1,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "mcp-pdf-reader",
    "description": "The MCP PDF Reader server implements a tool to read PDF documents and exposes this functionality through the Model Context Protocol (MCP), enabling integration with AI tools such as Claude Desktop and LibreChat using `uvx` to manage dependencies from a Git repository.",
    "command": "uvx",
    "args": [
      "--from",
      "git+https://github.com/karateboss/mcp_pdf_reader@main",
      "mcp_pdf_reader"
    ]
  },
  "created_at": {
    "$date": "2025-05-17T14:42:05.098Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:39:51.943Z"
  },
  "tags": [
    "pdf reader",
    "pdf",
    "reader"
  ]
},
{
  "_id": {
    "$oid": "6828a078a6f8dc721ceb45c4"
  },
  "seq": {
    "$numberLong": "736"
  },
  "type": "STDIO",
  "url": "https://github.com/armorwallet/armor-crypto-mcp",
  "stars": 122,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "armor-crypto-mcp",
    "description": "The Armor Crypto MCP enables AI agent integration with the cryptocurrency ecosystem by providing wallet management, token swaps, specialized trades like DCA, and staking functionality, currently supporting Solana with plans to expand to multiple blockchains like Ethereum, and it leverages `uv` for installation and utilizes an API key for authentication.",
    "command": "uvx",
    "args": [
      "armor-crypto-mcp@latest",
      "--version"
    ],
    "env": {
      "ARMOR_API_KEY": "<PUT-YOUR-KEY-HERE>"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:43:04.713Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:30:26.757Z"
  },
  "tags": [
    "armor",
    "crypto",
    "armor crypto"
  ]
},
{
  "_id": {
    "$oid": "6828a07aa6f8dc721ceb45c6"
  },
  "seq": {
    "$numberLong": "737"
  },
  "type": "STDIO",
  "url": "https://github.com/TheRaLabs/legion-mcp",
  "stars": 27,
  "views": 0,
  "official": false,
  "scanned": false,
  "securityRank": "UNRATED",
  "mcpServers": {
    "name": "database-mcp",
    "description": "The Multi-Database MCP Server enables AI applications to access and query data across multiple databases such as PostgreSQL, MySQL, and SQL Server through a unified interface using the Model Context Protocol (MCP) and the Legion Query Runner, exposing database operations as MCP resources, tools, and prompts.",
    "command": "uvx",
    "args": [
      "database-mcp"
    ],
    "env": {
      "DB_TYPE": "pg",
      "DB_CONFIG": "{\"host\":\"localhost\",\"port\":5432,\"user\":\"user\",\"password\":\"pw\",\"dbname\":\"dbname\"}"
    }
  },
  "created_at": {
    "$date": "2025-05-17T14:43:06.587Z"
  },
  "updated_at": {
    "$date": "2025-05-17T21:30:28.353Z"
  },
  "tags": [
    "database",
    "database"
  ]
}]